{
  "parameters": [
    {
      "name": "Order Requested Sources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryEventsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TipsEventsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.OrderId",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "OrchestratorUsed",
      "value": "True",
      "valueType": "Boolean",
      "defaultValue": "True",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REMPThawTime",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryIncubator",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventorySkyline",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryStacksCarousel",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryHotelsCarousel",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryOperationRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTypePreDilution",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Queued Jobs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Queued Jobs",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Processed Sources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Processed Sources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "All Sources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Sources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Racks Required",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Queued Sources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Processed Racks",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Cancelled Racks",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Cancelled Jobs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Queued Crash Plates",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Cancelled Crash Jobs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Cancelled Crash Plates",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Processed Crash Plates",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Crah Plates",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Crash Plates Required",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Queued Crash Jobs",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Crash Plates",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Processed Crash Plates",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REMP Source Jobs Cancelled",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Crash Plates Jobs Cancelled",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Cancel Order Processing",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "All Ready Jobs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "PDPPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Order Labware Types",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CP Labware Type Validated",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Labware Type Validated",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EB Labware Type Validated",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "helpText": "Runs the specified script",
            "backgroundColorHex": "#FFF58CFF",
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "name": "Run Script",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "description": "Run Script: DebugCheckAllQueuedSources",
            "isPausePointSet": false,
            "scriptName": "DebugCheckAllQueuedSources",
            "guid": "c76ca654-840f-4424-855b-ce19e675f4c5"
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "helpText": "Runs the specified script",
            "backgroundColorHex": "#FFF58CFF",
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "name": "Run Script",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "description": "Run Script: Process State Machine Input",
            "isPausePointSet": false,
            "scriptName": "Process State Machine Input",
            "guid": "6b6b8c2b-932e-4b9c-ae34-01c91b6af90c"
          },
          {
            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
            "helpText": "Executes two sequences in parallel",
            "backgroundColorHex": "#FF72EAFF",
            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
            "name": "Parallel",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false,
            "description": "Parallel",
            "left": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "backgroundColorHex": "#0000FF",
                  "iconUrl": "PackIcon.Telegram [#FFFFFF:0:0]",
                  "name": "Script.Validate Labware Type List",
                  "timeout": "00:30:00",
                  "inputParameters": [
                    {
                      "name": "checklabwaretypelist",
                      "value": "%Order Labware Types%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "RequestedLabwareTypesValidation",
                      "mapToGlobalVariableName": "IOC Labware Type Validated",
                      "parameterType": "Boolean"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "description": "Order: Script.Validate Labware Type List",
                  "guid": "51fc81cf-3da8-443e-9f99-3eadd327d726",
                  "isAsync": false,
                  "allowAsync": true,
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "backgroundColorHex": "#FFDEDE81",
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "name": "Branch",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                        "helpText": "Generates and error in the workflow with the specified message",
                        "backgroundColorHex": "#FFFF0000",
                        "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                        "name": "Error",
                        "message": "IOC Labware Type Not Recognized",
                        "description": "Error: IOC Labware Type Not Recognized",
                        "guid": "8540844f-f273-488b-884f-e715e1180a0a",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "89b50359-8074-4450-affc-2de79bf61589",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "f051415f-8af9-42d2-a143-51bc3719a00d",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "IOC Labware Type Validated",
                    "right": "False",
                    "evaluator": "Equal"
                  },
                  "description": "Branch if IOC Labware Type Validated = False",
                  "guid": "18ad9d28-686a-46e1-a4fd-90bf2f01e5d8",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "9172c25b-065d-4c2b-b107-53b1ea1d53da",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "right": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "helpText": "Executes two sequences in parallel",
                  "backgroundColorHex": "#FF72EAFF",
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "name": "Parallel",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false,
                  "description": "Parallel",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                        "backgroundColorHex": "#0000FF",
                        "iconUrl": "PackIcon.Telegram [#FFFFFF:0:0]",
                        "name": "Script.Validate Labware Type List EB",
                        "timeout": "00:30:00",
                        "inputParameters": [
                          {
                            "name": "checklabwaretypelist",
                            "value": "%Order Labware Types%",
                            "valueType": "String",
                            "defaultValue": "",
                            "valueOptions": [],
                            "validationRules": [],
                            "tags": [
                              "User",
                              "#DarkMagenta"
                            ]
                          }
                        ],
                        "outputParameterMapping": [
                          {
                            "name": "RequestedLabwareTypesValidation",
                            "mapToGlobalVariableName": "EB Labware Type Validated",
                            "parameterType": "Boolean"
                          },
                          {
                            "name": "Module ID",
                            "parameterType": "String"
                          }
                        ],
                        "description": "Order: Script.Validate Labware Type List EB",
                        "guid": "b78660fc-9ec6-4406-9cb0-8d9eee000ac5",
                        "isAsync": false,
                        "allowAsync": true,
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "backgroundColorHex": "#FFDEDE81",
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "name": "Branch",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                              "helpText": "Generates and error in the workflow with the specified message",
                              "backgroundColorHex": "#FFFF0000",
                              "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                              "name": "Error",
                              "message": "EB Labware Type Not Recognized",
                              "description": "Error: EB Labware Type Not Recognized",
                              "guid": "25d334e7-c7fc-4423-b38d-ffa8452dbf5a",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "ba812728-9c9a-4337-b2bc-98f3320f10d6",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "97e789cc-c285-48fa-9e8d-9829c6e2f978",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "EB Labware Type Validated",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "description": "Branch if EB Labware Type Validated = False",
                        "guid": "43de7e23-04ab-4bfc-851f-73ebe0b57f4f",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "568cef02-a5c3-4ef6-9081-bf4c7f22d28e",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                        "backgroundColorHex": "#0000FF",
                        "iconUrl": "PackIcon.PersonRemove [#FFFFFF:0:0]",
                        "name": "Script.Validate Labware Type List CP",
                        "timeout": "00:30:00",
                        "inputParameters": [
                          {
                            "name": "checklabwaretypelist",
                            "value": "%Order Labware Types%",
                            "valueType": "String",
                            "defaultValue": "",
                            "valueOptions": [],
                            "validationRules": [],
                            "tags": [
                              "User",
                              "#DarkMagenta"
                            ]
                          }
                        ],
                        "outputParameterMapping": [
                          {
                            "name": "RequestedLabwareTypesValidation",
                            "mapToGlobalVariableName": "CP Labware Type Validated",
                            "parameterType": "Boolean"
                          },
                          {
                            "name": "Module ID",
                            "parameterType": "String"
                          }
                        ],
                        "description": "Order: Script.Validate Labware Type List CP",
                        "guid": "fc0a201c-0871-4747-b417-4595adf99dfd",
                        "isAsync": false,
                        "allowAsync": true,
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "backgroundColorHex": "#FFDEDE81",
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "name": "Branch",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                              "helpText": "Generates and error in the workflow with the specified message",
                              "backgroundColorHex": "#FFFF0000",
                              "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                              "name": "Error",
                              "message": "CP Labware Type Not Recognized",
                              "description": "Error: CP Labware Type Not Recognized",
                              "guid": "780c8818-6de4-47d9-b7af-2a8e49367d5c",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "9d1f66b6-4886-44cb-ae6b-744cf972d533",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "6957c0c0-c928-4cc9-b5ae-657347d4234a",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "CP Labware Type Validated",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "description": "Branch if CP Labware Type Validated = False",
                        "guid": "7dac0588-9aa7-433f-b208-da3dc83d2555",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "c5db7476-ad00-4ec3-a010-e457e7a16ab9",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "guid": "d8466a3b-ed02-4447-b997-5230261d9664"
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "5208a59a-0e8e-4d6f-8274-2fc335c0e3d7",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "guid": "730a50fd-3a6d-46b7-9f3e-4204f4222264"
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "helpText": "Runs the specified script",
            "backgroundColorHex": "#FFF58CFF",
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "name": "Run Script",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "description": "Run Script: CheckForTipsEvent",
            "isPausePointSet": false,
            "scriptName": "CheckForTipsEvent",
            "guid": "b5de2bf4-81a5-4d5b-81ec-6509ce7d24bb"
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "helpText": "Writes to the log",
            "backgroundColorHex": "#FFC69AE8",
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "name": "Log",
            "description": "Log: Do we Require crash plates? \r\n\r\n------ %IOC Crash Plates Required%",
            "text": "Do we Require crash plates? \r\n\r\n------ %IOC Crash Plates Required%",
            "appendNewLine": false,
            "guid": "be2e9f14-c2cb-4846-ba6f-720f547de1c3",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
            "helpText": "Executes two sequences in parallel",
            "backgroundColorHex": "#FF72EAFF",
            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
            "name": "Parallel",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false,
            "description": "Parallel",
            "left": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "helpText": "Executes two sequences in parallel",
                  "backgroundColorHex": "#FF72EAFF",
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "name": "Parallel",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false,
                  "description": "Parallel",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "helpText": "Executes two sequences in parallel",
                        "backgroundColorHex": "#FF72EAFF",
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "name": "Parallel",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false,
                        "description": "Parallel",
                        "left": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "backgroundColorHex": "#FFDEDE81",
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "name": "Branch",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                                    "helpText": "Writes to the log",
                                    "backgroundColorHex": "#FFC69AE8",
                                    "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                                    "name": "Log",
                                    "description": "Log: REACHED THE PROMISED LAND",
                                    "text": "REACHED THE PROMISED LAND",
                                    "appendNewLine": false,
                                    "guid": "88e0defa-203f-457e-a8dd-ebe947d3373e",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "backgroundColorHex": "#FF00FF22",
                                    "iconUrl": "PackIcon.HomeMinus [#FFFFFF:0:0]",
                                    "name": "Crash Plate Preparation",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "SMCrashPlateThawTime",
                                        "value": "2",
                                        "valueType": "Double",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryIncubator",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventorySkyline",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryStacksCarousel",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryHotelsCarousel",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "Unknown",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrchestratorUsed",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMCrashPlateWorklist",
                                        "value": "%Queued Crash Plates%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryOperationRequired",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "True",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMLabwareTypePreDilution",
                                        "value": "",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrder Id",
                                        "value": "%Input.OrderId%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "description": "Order: Crash Plate Preparation",
                                    "guid": "68853cd9-3419-4730-9660-57370901043e",
                                    "isAsync": true,
                                    "allowAsync": true,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "helpText": "Runs the specified script",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "name": "Run Script",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "description": "Run Script: CheckAllQueuedSources",
                                    "isPausePointSet": false,
                                    "scriptName": "CheckAllQueuedSources",
                                    "guid": "79bf542f-d056-4754-80fd-c42573dc2c9c"
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                                    "helpText": "A loop over a sequence of elements",
                                    "backgroundColorHex": "#FF08EAA7",
                                    "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                                    "name": "Loop",
                                    "sequence": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                          "helpText": "Runs the specified script",
                                          "backgroundColorHex": "#FFF58CFF",
                                          "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                          "name": "Run Script",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "description": "Run Script: CheckAllQueuedSources",
                                          "isPausePointSet": false,
                                          "scriptName": "CheckAllQueuedSources",
                                          "guid": "ba54bbe6-611b-4276-beab-26675730e32c"
                                        },
                                        {
                                          "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                          "helpText": "Delays the workflow for the specified amount of time",
                                          "backgroundColorHex": "#FF26A9FF",
                                          "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                          "name": "Delay",
                                          "seconds": 30.0,
                                          "minutes": 0.0,
                                          "hours": 0.0,
                                          "description": "Delay 0:0:30",
                                          "guid": "635aa3df-e2a1-4e6d-8a6c-54e69313de7a",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "493369dc-e957-41d0-876a-a00dc5e8bca1",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "Total Crash Plates",
                                      "right": "%Total Processed Crash Plates%",
                                      "evaluator": "GreaterThan"
                                    },
                                    "evaluateAtEnd": false,
                                    "loopCount": 0,
                                    "loopType": "While",
                                    "foreachCollectionVariable": "",
                                    "foreachItemVariable": "",
                                    "foreachDelimiter": ",",
                                    "description": "Loop While Total Crash Plates > %Total Processed Crash Plates%",
                                    "guid": "8f9b8760-e6ef-439a-9fcb-6139d37f20c5",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "helpText": "Runs the specified script",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "name": "Run Script",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "description": "Run Script: CheckCancelledJobsAndOrders",
                                    "isPausePointSet": false,
                                    "scriptName": "CheckCancelledJobsAndOrders",
                                    "guid": "ba013fa0-3b4b-4d2d-a401-9c6bae00d581"
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                    "helpText": "Evaluates a condition and branches accordingly",
                                    "backgroundColorHex": "#FFDEDE81",
                                    "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                    "name": "Branch",
                                    "yes": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                          "helpText": "Evaluates a condition and branches accordingly",
                                          "backgroundColorHex": "#FFDEDE81",
                                          "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                          "name": "Branch",
                                          "yes": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                                "helpText": "Evaluates a condition and branches accordingly",
                                                "backgroundColorHex": "#FFDEDE81",
                                                "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                                "name": "Branch",
                                                "yes": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                      "helpText": "Transports the specified barcode(s) from one station to another.",
                                                      "backgroundColorHex": "#FF666666",
                                                      "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                      "name": "Transport",
                                                      "inputParameters": [
                                                        {
                                                          "name": "Timeout (min)",
                                                          "value": "10",
                                                          "valueType": "Double",
                                                          "defaultValue": "10"
                                                        },
                                                        {
                                                          "name": "From",
                                                          "value": "IO",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "To",
                                                          "value": "EB2",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "Barcodes",
                                                          "value": "%IOC Processed Crash Plates%",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "Metadata",
                                                          "value": "Source Orchestrator Workflow=Consumables Carousel;Destination Orchestrator Workflow=Cytomat Source;Labware Designation=Source Labware;Labware Type=%CrashLabwareType%",
                                                          "valueType": "String"
                                                        }
                                                      ],
                                                      "outputParameterMapping": [
                                                        {
                                                          "name": "Barcodes",
                                                          "parameterType": "String"
                                                        },
                                                        {
                                                          "name": "Request ID",
                                                          "parameterType": "String"
                                                        }
                                                      ],
                                                      "description": "Transport",
                                                      "guid": "bf9dff1e-722b-4dfb-a30d-a452fdc0b27a",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "isPausePointSet": false
                                                    },
                                                    {
                                                      "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                      "helpText": "Runs the specified script",
                                                      "backgroundColorHex": "#FFF58CFF",
                                                      "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                      "name": "Run Script",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "description": "Run Script: SetRemainingSourcesToTransferred",
                                                      "isPausePointSet": false,
                                                      "scriptName": "SetRemainingSourcesToTransferred",
                                                      "guid": "4fbf554b-cc38-458d-937c-674013678948"
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "f0470b4e-a8eb-4364-898c-4baa111ab94c",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "no": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                                                      "helpText": "Sets a parameter",
                                                      "backgroundColorHex": "#FFA8E281",
                                                      "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                                                      "name": "Set Parameter",
                                                      "parameterName": "Crash Plates Jobs Cancelled",
                                                      "leftOperand": "True",
                                                      "isUnaryOperation": true,
                                                      "operator": "Add",
                                                      "rightOperand": "",
                                                      "description": "Crash Plates Jobs Cancelled = True",
                                                      "guid": "1138a7c0-201b-4a56-b22f-5a63d8c95471",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "isPausePointSet": false
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "2ba9fba4-484f-4a4a-a7a6-b0cd32f50748",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "evaluation": {
                                                  "left": "IOC Processed Crash Plates",
                                                  "right": "",
                                                  "evaluator": "NotEqual"
                                                },
                                                "description": "Branch if IOC Processed Crash Plates ≠ ",
                                                "guid": "312b62dc-e1ac-400f-81b6-00cb38a24b2e",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "9eb2d9e2-2a4e-4565-967b-c1ac51c77864",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "no": {
                                            "children": [],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "c060a0b5-46bb-4d04-9316-5b90bb81a126",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "evaluation": {
                                            "left": "All Ready Jobs",
                                            "right": "",
                                            "evaluator": "NotEqual"
                                          },
                                          "description": "Branch if All Ready Jobs ≠ ",
                                          "guid": "612bd877-658a-48ce-b90f-9970421f8557",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "cd363fdc-307a-4bc2-920a-76256d5cb632",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "no": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                                          "helpText": "Generates and error in the workflow with the specified message",
                                          "backgroundColorHex": "#FFFF0000",
                                          "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                                          "name": "Error",
                                          "message": "Order Processing Cancelled",
                                          "description": "Error: Order Processing Cancelled",
                                          "guid": "23a5e589-0f69-46fa-8f59-7490de91d867",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "fbc9e27b-e506-4475-a243-2d467eb4d964",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "Cancel Order Processing",
                                      "right": "",
                                      "evaluator": "Equal"
                                    },
                                    "description": "Branch if Cancel Order Processing = ",
                                    "guid": "b37810f7-2fed-47bd-b369-26e8b8ca85fe",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "8b7c833c-4961-4f8d-8650-ff0911ac3b63",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "f67e72ab-e093-474e-a57e-5cb8496b229d",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "IOC Crash Plates Required",
                                "right": "True",
                                "evaluator": "Equal"
                              },
                              "description": "Branch if IOC Crash Plates Required = True",
                              "guid": "5288b6a7-5d97-4300-b748-1de34bc98c42",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "f0c93872-8922-4499-848f-92fd0340c676",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "backgroundColorHex": "#FFDEDE81",
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "name": "Branch",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                                    "helpText": "Writes to the log",
                                    "backgroundColorHex": "#FFC69AE8",
                                    "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                                    "name": "Log",
                                    "description": "Log: WE ARE DOING REMP",
                                    "text": "WE ARE DOING REMP",
                                    "appendNewLine": false,
                                    "guid": "ada247b2-370b-4112-a4dc-31099944dd45",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "backgroundColorHex": "#FF00FF00",
                                    "iconUrl": "PackIcon.CommentPlusOutline [#FFFFFF:0:0]",
                                    "name": "REMP Preparation",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "SMREMPThawTime",
                                        "value": "2",
                                        "valueType": "Double",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryIncubator",
                                        "value": "%InventoryIncubator%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventorySkyline",
                                        "value": "%InventorySkyline%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryStacksCarousel",
                                        "value": "%InventoryStacksCarousel%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryHotelsCarousel",
                                        "value": "%InventoryHotelsCarousel%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMSourceDetails",
                                        "value": "%Queued Sources%",
                                        "valueType": "String",
                                        "defaultValue": "SIM BC5,SIM BC6",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "Unknown",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrchestratorUsed",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMInventoryOperationRequired",
                                        "value": "%InventoryOperationRequired%",
                                        "valueType": "Boolean",
                                        "defaultValue": "True",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMLabwareTypePreDilution",
                                        "value": "",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrder Id",
                                        "value": "%Input.OrderId%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "description": "Order: REMP Preparation",
                                    "guid": "47b6c1b2-0cd5-43bc-b1ac-4fbe5f4a380d",
                                    "isAsync": true,
                                    "allowAsync": true,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "helpText": "Runs the specified script",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "name": "Run Script",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "description": "Run Script: CheckAllQueuedSources",
                                    "isPausePointSet": false,
                                    "scriptName": "CheckAllQueuedSources",
                                    "guid": "5b10b587-1d54-475f-8e31-4989eec3d8d0"
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                                    "helpText": "A loop over a sequence of elements",
                                    "backgroundColorHex": "#FF08EAA7",
                                    "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                                    "name": "Loop",
                                    "sequence": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                          "helpText": "Delays the workflow for the specified amount of time",
                                          "backgroundColorHex": "#FF26A9FF",
                                          "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                          "name": "Delay",
                                          "seconds": 20.0,
                                          "minutes": 0.0,
                                          "hours": 0.0,
                                          "description": "Delay 0:0:20",
                                          "guid": "c20dc9f3-0763-4796-b56a-45187c7f3d16",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        },
                                        {
                                          "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                          "helpText": "Runs the specified script",
                                          "backgroundColorHex": "#FFF58CFF",
                                          "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                          "name": "Run Script",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "description": "Run Script: CheckAllQueuedSources",
                                          "isPausePointSet": false,
                                          "scriptName": "CheckAllQueuedSources",
                                          "guid": "79e75cdf-0908-4d75-89c7-2d341666c075"
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "a1204887-6cd0-49f9-bad3-e57ce9a92391",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "Total Sources",
                                      "right": "%Total Processed Sources%",
                                      "evaluator": "GreaterThan"
                                    },
                                    "evaluateAtEnd": false,
                                    "loopCount": 0,
                                    "loopType": "While",
                                    "foreachCollectionVariable": "",
                                    "foreachItemVariable": "",
                                    "foreachDelimiter": ",",
                                    "description": "Loop While Total Sources > %Total Processed Sources%",
                                    "guid": "905329f5-7939-4f6c-a52b-dacca0636453",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "helpText": "Runs the specified script",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "name": "Run Script",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "description": "Run Script: CheckCancelledJobsAndOrders",
                                    "isPausePointSet": false,
                                    "scriptName": "CheckCancelledJobsAndOrders",
                                    "guid": "22fbc92c-5948-43b7-8c72-a9a5b4dd195a"
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                    "helpText": "Evaluates a condition and branches accordingly",
                                    "backgroundColorHex": "#FFDEDE81",
                                    "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                    "name": "Branch",
                                    "yes": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                          "helpText": "Evaluates a condition and branches accordingly",
                                          "backgroundColorHex": "#FFDEDE81",
                                          "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                          "name": "Branch",
                                          "yes": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                                "helpText": "Evaluates a condition and branches accordingly",
                                                "backgroundColorHex": "#FFDEDE81",
                                                "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                                "name": "Branch",
                                                "yes": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                      "helpText": "Runs the specified script",
                                                      "backgroundColorHex": "#FFF58CFF",
                                                      "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                      "name": "Run Script",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "description": "Run Script: CP_Populate_Placeholder_CAPS_And_PDP",
                                                      "isPausePointSet": false,
                                                      "scriptName": "CP_Populate_Placeholder_CAPS_And_PDP",
                                                      "guid": "f39762b5-fa09-4be7-a0b6-7fd961f21476"
                                                    },
                                                    {
                                                      "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                                                      "helpText": "Executes two sequences in parallel",
                                                      "backgroundColorHex": "#FF72EAFF",
                                                      "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                                                      "name": "Parallel",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "isPausePointSet": false,
                                                      "description": "Parallel",
                                                      "left": {
                                                        "children": [
                                                          {
                                                            "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                            "helpText": "Transports the specified barcode(s) from one station to another.",
                                                            "backgroundColorHex": "#FF666666",
                                                            "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                            "name": "Transport",
                                                            "inputParameters": [
                                                              {
                                                                "name": "Timeout (min)",
                                                                "value": "180",
                                                                "valueType": "Double",
                                                                "defaultValue": "10"
                                                              },
                                                              {
                                                                "name": "From",
                                                                "value": "IO",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "To",
                                                                "value": "CP",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Barcodes",
                                                                "value": "%IOC Processed Racks%",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Metadata",
                                                                "value": "Source Orchestrator Workflow=Consumables Carousel;Destination Orchestrator Workflow=Cytomat Source;Orchestrator Used=True;Labware Type=REMP 96-900",
                                                                "valueType": "String"
                                                              }
                                                            ],
                                                            "outputParameterMapping": [
                                                              {
                                                                "name": "Barcodes",
                                                                "parameterType": "String"
                                                              },
                                                              {
                                                                "name": "Request ID",
                                                                "parameterType": "String"
                                                              }
                                                            ],
                                                            "description": "Transport",
                                                            "guid": "b90d8915-fe82-4b0b-b36a-706c8cc02d08",
                                                            "isAsync": false,
                                                            "allowAsync": false,
                                                            "isDisabled": false,
                                                            "isPausePointSet": false
                                                          },
                                                          {
                                                            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                            "helpText": "Runs the specified script",
                                                            "backgroundColorHex": "#FFF58CFF",
                                                            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                            "name": "Run Script",
                                                            "isAsync": false,
                                                            "allowAsync": false,
                                                            "isDisabled": false,
                                                            "description": "Run Script: SetRemainingSourcesToTransferred",
                                                            "isPausePointSet": false,
                                                            "scriptName": "SetRemainingSourcesToTransferred",
                                                            "guid": "73750a27-a87d-4143-81d4-ae14d134b703"
                                                          }
                                                        ],
                                                        "name": "Sequence",
                                                        "description": "Sequence",
                                                        "helpText": "A sequence of workflow elements",
                                                        "guid": "28f7ac2b-33a4-4038-9215-aade94b4e429",
                                                        "isAsync": false,
                                                        "allowAsync": false,
                                                        "backgroundColorHex": "#00000000",
                                                        "isDisabled": false,
                                                        "isPausePointSet": false
                                                      },
                                                      "right": {
                                                        "children": [
                                                          {
                                                            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                                                            "helpText": "Executes two sequences in parallel",
                                                            "backgroundColorHex": "#FF72EAFF",
                                                            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                                                            "name": "Parallel",
                                                            "isAsync": false,
                                                            "allowAsync": false,
                                                            "isDisabled": false,
                                                            "isPausePointSet": false,
                                                            "description": "Parallel",
                                                            "left": {
                                                              "children": [
                                                                {
                                                                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                                  "helpText": "Transports the specified barcode(s) from one station to another.",
                                                                  "backgroundColorHex": "#FF666666",
                                                                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                                  "name": "Transport",
                                                                  "inputParameters": [
                                                                    {
                                                                      "name": "Timeout (min)",
                                                                      "value": "180",
                                                                      "valueType": "Double",
                                                                      "defaultValue": "10"
                                                                    },
                                                                    {
                                                                      "name": "From",
                                                                      "value": "IO",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "To",
                                                                      "value": "CP",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Barcodes",
                                                                      "value": "%CapsPlaceholderBarcodes%",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Metadata",
                                                                      "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=Cap Racks;Destination Orchestrator Workflow=Cap Racks;Placeholder=true;Labware Type=Cap Holder",
                                                                      "valueType": "String"
                                                                    }
                                                                  ],
                                                                  "outputParameterMapping": [
                                                                    {
                                                                      "name": "Barcodes",
                                                                      "parameterType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Request ID",
                                                                      "parameterType": "String"
                                                                    }
                                                                  ],
                                                                  "description": "Transport",
                                                                  "guid": "fa800350-99a1-425c-ac29-a85207bdb53a",
                                                                  "isAsync": false,
                                                                  "allowAsync": false,
                                                                  "isDisabled": false,
                                                                  "isPausePointSet": false
                                                                }
                                                              ],
                                                              "name": "Sequence",
                                                              "description": "Sequence",
                                                              "helpText": "A sequence of workflow elements",
                                                              "guid": "e25e61b2-f756-40d5-88af-7fca4d3b4371",
                                                              "isAsync": false,
                                                              "allowAsync": false,
                                                              "backgroundColorHex": "#00000000",
                                                              "isDisabled": false,
                                                              "isPausePointSet": false
                                                            },
                                                            "right": {
                                                              "children": [
                                                                {
                                                                  "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                                                                  "helpText": "Writes to the log",
                                                                  "backgroundColorHex": "#FFC69AE8",
                                                                  "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                                                                  "name": "Log",
                                                                  "description": "Log: Need to apply the script to populate PDPD storage and type post FAT",
                                                                  "text": "Need to apply the script to populate PDPD storage and type post FAT",
                                                                  "appendNewLine": false,
                                                                  "guid": "be4e65ba-48bb-47fd-b3ea-77a8bf1e0a35",
                                                                  "isAsync": false,
                                                                  "allowAsync": false,
                                                                  "isDisabled": false,
                                                                  "isPausePointSet": false
                                                                },
                                                                {
                                                                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                                  "helpText": "Transports the specified barcode(s) from one station to another.",
                                                                  "backgroundColorHex": "#FF666666",
                                                                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                                  "name": "Transport",
                                                                  "inputParameters": [
                                                                    {
                                                                      "name": "Timeout (min)",
                                                                      "value": "10",
                                                                      "valueType": "Double",
                                                                      "defaultValue": "10"
                                                                    },
                                                                    {
                                                                      "name": "From",
                                                                      "value": "IO",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "To",
                                                                      "value": "CP",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Barcodes",
                                                                      "value": "%PDPPlaceholderBarcodes%",
                                                                      "valueType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Metadata",
                                                                      "value": "Source Orchestrator Workflow=%LabwarePreDilutionStorage%;Labware Types=%Input.LabwarePreDilutionName%;Destination Orchestrator Workflow=%LabwarePreDilutionStorage%",
                                                                      "valueType": "String"
                                                                    }
                                                                  ],
                                                                  "outputParameterMapping": [
                                                                    {
                                                                      "name": "Barcodes",
                                                                      "parameterType": "String"
                                                                    },
                                                                    {
                                                                      "name": "Request ID",
                                                                      "parameterType": "String"
                                                                    }
                                                                  ],
                                                                  "description": "Transport",
                                                                  "guid": "7305e983-7ba1-483c-bed7-bb5bca4ef1d0",
                                                                  "isAsync": false,
                                                                  "allowAsync": false,
                                                                  "isDisabled": true,
                                                                  "isPausePointSet": false
                                                                }
                                                              ],
                                                              "name": "Sequence",
                                                              "description": "Sequence",
                                                              "helpText": "A sequence of workflow elements",
                                                              "guid": "ea6ada33-9894-4051-bb25-eaa2c2c006d3",
                                                              "isAsync": false,
                                                              "allowAsync": false,
                                                              "backgroundColorHex": "#00000000",
                                                              "isDisabled": false,
                                                              "isPausePointSet": false
                                                            },
                                                            "guid": "e672bdd3-8a13-43f8-b1f3-eb638a37dbe8"
                                                          }
                                                        ],
                                                        "name": "Sequence",
                                                        "description": "Sequence",
                                                        "helpText": "A sequence of workflow elements",
                                                        "guid": "4a9fd170-bc9a-4fa8-9c58-da807cd8806b",
                                                        "isAsync": false,
                                                        "allowAsync": false,
                                                        "backgroundColorHex": "#00000000",
                                                        "isDisabled": false,
                                                        "isPausePointSet": false
                                                      },
                                                      "guid": "8f7acdd2-4d38-4e52-a218-9e44e9bfb82a"
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "dae57a34-50a6-4ff3-9eb5-dc3c1dcc19d6",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "no": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                                                      "helpText": "Sets a parameter",
                                                      "backgroundColorHex": "#FFA8E281",
                                                      "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                                                      "name": "Set Parameter",
                                                      "parameterName": "REMP Source Jobs Cancelled",
                                                      "leftOperand": "True",
                                                      "isUnaryOperation": true,
                                                      "operator": "Add",
                                                      "rightOperand": "",
                                                      "description": "REMP Source Jobs Cancelled = True",
                                                      "guid": "77dc861d-3c73-49e8-b106-8cfcb1e218b4",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "isDisabled": false,
                                                      "isPausePointSet": false
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "8e372848-93d7-4d3f-9a11-8bcd78d01fb7",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "evaluation": {
                                                  "left": "IOC Processed Racks",
                                                  "right": "",
                                                  "evaluator": "NotEqual"
                                                },
                                                "description": "Branch if IOC Processed Racks ≠ ",
                                                "guid": "5e4f7ead-381a-4267-a93c-8b7047b3ef0d",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "12553eab-422b-433f-a790-83ad76b13725",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "no": {
                                            "children": [],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "95ad0a8e-43d2-42e4-a7df-ac513c919078",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "evaluation": {
                                            "left": "All Ready Jobs",
                                            "right": "",
                                            "evaluator": "NotEqual"
                                          },
                                          "description": "Branch if All Ready Jobs ≠ ",
                                          "guid": "b1bf3750-3171-4f71-b873-b0734fe52ae9",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "e623c31c-2a01-44f8-aacd-648074f7587e",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "no": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                                          "helpText": "Generates and error in the workflow with the specified message",
                                          "backgroundColorHex": "#FFFF0000",
                                          "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                                          "name": "Error",
                                          "message": "Order processing cancelled",
                                          "description": "Error: Order processing cancelled",
                                          "guid": "00cc539a-547c-44fd-922c-12fb8a77d41d",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "61609a62-abe7-47b1-a6ff-240cb1fdbae6",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "Cancel Order Processing",
                                      "right": "false",
                                      "evaluator": "Equal"
                                    },
                                    "description": "Branch if Cancel Order Processing = false",
                                    "guid": "2f0f30f8-fb96-417d-8b22-0a3c7100abf7",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "backgroundColorHex": "#0000FF",
                                    "iconUrl": "PackIcon.BusSchool [#FFFFFF:0:0]",
                                    "name": "REMP On",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "SMOrchestratorUsed",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMCurrentCapHolders",
                                        "value": "%CapsPlaceholderBarcodes%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMSourcesUsed",
                                        "value": "%IOC Processed Racks%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMJobNumber",
                                        "value": "",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrderId",
                                        "value": "%Input.OrderId%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "description": "Order: REMP On",
                                    "guid": "21328424-da90-4bff-9fb6-bb7571f87d41",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "c90311be-1c3b-428c-830d-924608e351ab",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "c78975c7-505c-4d47-a8ca-33dd793ffc88",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "IOC Racks Required",
                                "right": "True",
                                "evaluator": "Equal"
                              },
                              "description": "Branch if IOC Racks Required = True",
                              "guid": "f9e5834f-bf42-4835-bf90-7560f479a62a",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "8e0280ee-18ca-4514-ab59-dc39409af9ed",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "guid": "a964361f-aaec-494e-9839-98653ebf8ccb"
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "3be4d1e2-5f90-45b6-8a39-084704049693",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "backgroundColorHex": "#FFDEDE81",
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "name": "Branch",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "backgroundColorHex": "#FFDEDE81",
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "name": "Branch",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                    "helpText": "Delays the workflow for the specified amount of time",
                                    "backgroundColorHex": "#FF26A9FF",
                                    "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                    "name": "Delay",
                                    "seconds": 0.0,
                                    "minutes": 1.0,
                                    "hours": 0.0,
                                    "description": "Delay 0:1:0",
                                    "guid": "1abe510f-bfbb-4ce9-b81e-ae803b060314",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "9762b33a-d6d4-409e-b9f9-7ffc327bc817",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                    "helpText": "Evaluates a condition and branches accordingly",
                                    "backgroundColorHex": "#FFDEDE81",
                                    "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                    "name": "Branch",
                                    "yes": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                          "helpText": "Delays the workflow for the specified amount of time",
                                          "backgroundColorHex": "#FF26A9FF",
                                          "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                          "name": "Delay",
                                          "seconds": 0.0,
                                          "minutes": 1.0,
                                          "hours": 0.0,
                                          "description": "Delay 0:1:0",
                                          "guid": "47f4357d-3d59-4676-b945-38593cc30316",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "012311da-a8cf-492a-a7c0-abf637322c4b",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "no": {
                                      "children": [],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "2ca65769-f5ae-4ad3-a95d-e01b768db099",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "IOC Racks Required",
                                      "right": "True",
                                      "evaluator": "Equal"
                                    },
                                    "description": "Branch if IOC Racks Required = True",
                                    "guid": "d3f44886-b847-4c29-84e1-0003ea701ee3",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "05b218e7-9e6d-4e45-a3cb-f8cc2cd9a223",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "IOC Crash Plates Required",
                                "right": "True",
                                "evaluator": "Equal"
                              },
                              "description": "Branch if IOC Crash Plates Required = True",
                              "guid": "dafa220e-f422-40c9-9fc6-4d9ce753e80f",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "helpText": "Runs the specified script",
                              "backgroundColorHex": "#FFF58CFF",
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "name": "Run Script",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "description": "Run Script: CreateInventoryEvent",
                              "isPausePointSet": false,
                              "scriptName": "CreateInventoryEvent",
                              "guid": "11ca8bd7-07e8-4a23-be4c-9db0deefa934"
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "InventoryOperationRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "InventoryOperationRequired = True",
                              "guid": "a277135f-f600-4d12-9eae-d05c95467054",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "InventorySkyline",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "InventorySkyline = True",
                              "guid": "69664147-1a85-40a1-8b11-9672afe7c1fc",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "InventoryStacksCarousel",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "InventoryStacksCarousel = True",
                              "guid": "2a768ae7-4584-4134-b515-4f86e59a5eb0",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "InventoryHotelsCarousel",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "InventoryHotelsCarousel = True",
                              "guid": "d05c78f3-a544-47a2-ace2-b2bf24102463",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "InventoryIncubator",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "InventoryIncubator = True",
                              "guid": "eab7c9f5-51ac-4aff-a11e-65adce2c6fe8",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "backgroundColorHex": "#FFFF002E",
                              "iconUrl": "PackIcon.Store [#FFFFFF:0:0]",
                              "name": "General Inventory",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "SMInventoryIncubator",
                                  "value": "%InventoryIncubator%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "SMInventorySkyline",
                                  "value": "%InventoryIncubator%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "SMInventoryStacksCarousel",
                                  "value": "%InventoryStacksCarousel%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "SMInventoryHotelsCarousel",
                                  "value": "%InventoryHotelsCarousel%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "SMOrchestratorUsed",
                                  "value": "True",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "description": "Order: General Inventory",
                              "guid": "08b68248-4234-45ea-b90a-4d2ad323a0cf",
                              "isAsync": false,
                              "allowAsync": true,
                              "isDisabled": true,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "fd6771e8-649c-44bc-877e-89316013d905",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "16dd5dd5-2e40-478a-ab85-d056674ec754",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "InventoryEventsFound",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "description": "Branch if InventoryEventsFound = False",
                        "guid": "311bf64e-89bb-4e1a-ad97-391fc537ae54",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "d11c4066-338d-45de-ba8b-d7a95f1ba3a3",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "guid": "1d8bad38-d2a6-4c1e-9541-c455b8145274"
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "d8c159b0-47e6-40f6-9ba5-51134ce8bccc",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "right": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "backgroundColorHex": "#FFDEDE81",
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "name": "Branch",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "backgroundColorHex": "#FFDEDE81",
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "name": "Branch",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                              "helpText": "Delays the workflow for the specified amount of time",
                              "backgroundColorHex": "#FF26A9FF",
                              "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                              "name": "Delay",
                              "seconds": 0.0,
                              "minutes": 1.0,
                              "hours": 0.0,
                              "description": "Delay 0:1:0",
                              "guid": "8a4909e6-0a50-4335-bcd4-a1389d7f7baa",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "backgroundColorHex": "#FFFF004D",
                              "iconUrl": "PackIcon.AccessPointNetwork [#FFFFFF:0:0]",
                              "name": "State machine - CP Tips",
                              "timeout": "00:30:00",
                              "inputParameters": [],
                              "outputParameterMapping": [
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "description": "Order: State machine - CP Tips",
                              "guid": "ff22a110-6677-437b-abb7-dd7e1a492743",
                              "isAsync": false,
                              "allowAsync": true,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "14928aaf-1fcc-447d-ad3c-b27d34e6758d",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "backgroundColorHex": "#FFDEDE81",
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "name": "Branch",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                    "helpText": "Delays the workflow for the specified amount of time",
                                    "backgroundColorHex": "#FF26A9FF",
                                    "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                    "name": "Delay",
                                    "seconds": 0.0,
                                    "minutes": 1.0,
                                    "hours": 0.0,
                                    "description": "Delay 0:1:0",
                                    "guid": "64a90666-ac30-40e8-b9b1-cf0625a9363b",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "backgroundColorHex": "#FFFF004D",
                                    "iconUrl": "PackIcon.AccessPointNetwork [#FFFFFF:0:0]",
                                    "name": "State machine - CP Tips",
                                    "timeout": "00:30:00",
                                    "inputParameters": [],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "description": "Order: State machine - CP Tips",
                                    "guid": "3a06bb20-7ab0-4259-9a9a-c42a0ab5a2a6",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "c20ed695-16d1-482f-82ae-09952c1d5e6f",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "ca8b46b8-510f-4d81-b542-0a33b1035880",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "IOC Racks Required",
                                "right": "True",
                                "evaluator": "Equal"
                              },
                              "description": "Branch if IOC Racks Required = True",
                              "guid": "5108aa3f-00b8-4171-b134-3d74bc69ffc7",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "1f8c0754-bcc4-41cc-8e62-2ca5783b87fb",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "IOC Crash Plates Required",
                          "right": "True",
                          "evaluator": "Equal"
                        },
                        "description": "Branch if IOC Crash Plates Required = True",
                        "guid": "312f329b-a505-4f45-bf50-e45080408e86",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "helpText": "Runs the specified script",
                        "backgroundColorHex": "#FFF58CFF",
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "name": "Run Script",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": true,
                        "description": "Run Script: CreateEventForTips",
                        "isPausePointSet": false,
                        "scriptName": "CreateEventForTips",
                        "guid": "834336e8-9bc1-4273-8d6e-876dc2c61f1d"
                      },
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "helpText": "Executes two sequences in parallel",
                        "backgroundColorHex": "#FF72EAFF",
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "name": "Parallel",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": true,
                        "isPausePointSet": false,
                        "description": "Parallel",
                        "left": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "backgroundColorHex": "#FF666666",
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "name": "Transport",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "180",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "IO",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "CP",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "50_1,50_2",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=50uL Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true;Labware Type=96 50ul Tips Tecan",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "description": "Transport",
                              "guid": "a122ec8e-ffe9-4b51-a095-a402ac97f91f",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": true,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "e1e5d4f3-ace1-4b1d-b08b-6a48d4b164a4",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "backgroundColorHex": "#FF666666",
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "name": "Transport",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "180",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "IO",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "CP",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "200_1,200_2",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=200uL Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true;Labware Type=96 200ul Tips Tecan",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "description": "Transport",
                              "guid": "9b8975d7-3b6e-4083-83ab-42c43b42170b",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": true,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "77cd030b-169f-4e9b-8a3f-23892bd8df05",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "guid": "25c5a761-177c-40b5-a458-80154fb321ee"
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "805bb62d-11f9-4605-b9e1-d0ca03902c55",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "8e437804-78ee-4450-918b-0a4a5b0f8189",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "TipsEventsFound",
                    "right": "False",
                    "evaluator": "Equal"
                  },
                  "description": "Branch if TipsEventsFound = False",
                  "guid": "00d1a4b6-d665-4631-a510-1d3363b541e6",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "73c58374-1057-4d8f-8422-3b46732960ef",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "guid": "a7704ba7-8957-4df0-9a79-aaca83348f22"
          },
          {
            "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
            "helpText": "Evaluates a condition and branches accordingly",
            "backgroundColorHex": "#FFDEDE81",
            "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
            "name": "Branch",
            "yes": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                  "helpText": "Writes to the log",
                  "backgroundColorHex": "#FFC69AE8",
                  "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                  "name": "Log",
                  "description": "Log: If there are REMP source racks to retrieve AND all jobs were cancelled - show error \"All Order Jobs Cancelled\"\r\n\r\nIf there are Crash plates to retrieve AND all jobs were cancelled - show error \"All Order Jobs Cancelled\"\r\n\r\nSet variable 'Cancel Order Processing\" to True if any are TRUE above",
                  "text": "If there are REMP source racks to retrieve AND all jobs were cancelled - show error \"All Order Jobs Cancelled\"\r\n\r\nIf there are Crash plates to retrieve AND all jobs were cancelled - show error \"All Order Jobs Cancelled\"\r\n\r\nSet variable 'Cancel Order Processing\" to True if any are TRUE above",
                  "appendNewLine": false,
                  "guid": "18cfbf72-c588-4752-aa84-57c0375cc67f",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "backgroundColorHex": "#FFDEDE81",
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "name": "Branch",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "backgroundColorHex": "#FFDEDE81",
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "name": "Branch",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "backgroundColorHex": "#FFDEDE81",
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "name": "Branch",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                                    "helpText": "Sets a parameter",
                                    "backgroundColorHex": "#FFA8E281",
                                    "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                                    "name": "Set Parameter",
                                    "parameterName": "Cancel Order Processing",
                                    "leftOperand": "True",
                                    "isUnaryOperation": true,
                                    "operator": "Add",
                                    "rightOperand": "",
                                    "description": "Cancel Order Processing = True",
                                    "guid": "d32f00bc-ebca-4c6f-8eab-9382930a5893",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "b1bd8610-11db-4881-998b-05641e09cbe5",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "086fbe37-f640-4724-8fa5-e6a9afbd788f",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "Crash Plates Jobs Cancelled",
                                "right": "Cancelled",
                                "evaluator": "Equal"
                              },
                              "description": "Branch if Crash Plates Jobs Cancelled = Cancelled",
                              "guid": "b2da5932-6997-4dcb-8c0a-f4e9e3b46854",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "47721272-cc4a-4644-b13d-2a19da3d4c0f",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "helpText": "Sets a parameter",
                              "backgroundColorHex": "#FFA8E281",
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "name": "Set Parameter",
                              "parameterName": "Cancel Order Processing",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "description": "Cancel Order Processing = True",
                              "guid": "fade22cb-fd69-4b0b-99de-94388d8c0e4b",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "3108e61d-64c4-41cf-929e-758c53f55bef",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "Total Crah Plates",
                          "right": "0",
                          "evaluator": "GreaterThan"
                        },
                        "description": "Branch if Total Crah Plates > 0",
                        "guid": "46553bbd-3124-476e-8f30-a2d78a0fd4db",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "e3ae9e88-3328-4603-a1b5-44a9b0a693bb",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "46053227-4e06-4012-87af-8ec3a8354ade",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "REMP Source Jobs Cancelled",
                    "right": "True",
                    "evaluator": "Equal"
                  },
                  "description": "Branch if REMP Source Jobs Cancelled = True",
                  "guid": "6d212ce5-25ea-4f77-babc-646f1f647591",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "11d17711-e83e-43ac-ba26-196398c1c038",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "no": {
              "children": [],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "e73abef0-1538-4077-81e7-74c443bbe272",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "Total Sources",
              "right": "0",
              "evaluator": "GreaterThan"
            },
            "description": "Branch if Total Sources > 0",
            "guid": "d805f54d-4431-4421-bdff-3d432b188306",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "9a43abf9-9475-4b5a-9334-2920fbda1c0b",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "scripts": [
    {
      "name": "Process State Machine Input",
      "code": "#r Roche.LAMA1.dll\r\n\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nInitial script to determine the type of order jobs required to be processed and their contents.\r\nThe script also populates various required variables in dataservices in down the line processes\r\n*/\r\n\r\n\r\n\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_State_Machine_Input\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            // Boolean variable determining if the first workflow should process Racks or Crash plates. Both set to FALSE initially.\r\n            // it is not expected for a job to have bothrequired\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Racks Required\", false);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Crash Plates Required\", false);\r\n\r\n            // Retrieve order ID ran\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n\r\n            // connnect to the DS server, declare query, assecssioning and event clients for the URL\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs for the requested order\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n\r\n            // Various lists used throughout processing to collect related data for the order and job\r\n            List<string> AllSourcesForOrder = new List<string>();\r\n            List<string> QueuedSourcesForOrder = new List<string>();\r\n            List<string> AllJobsForOrder = new List<string>();\r\n            List<string> AllCrashJobsForOrder = new List<string>();\r\n            List<string> AllCrashPlatesForOrder = new List<string>();\r\n            List<string> QueuedCrashPlatesForOrder = new List<string>();\r\n            List<string> AllLabwareForForOrder = new List<string>();\r\n            List<string> LabwareTypesForOrder = new List<string>();\r\n            List<string> CrashPlateLabwareTypesForOrder = new List<string>();\r\n\r\n\r\n            //Loop through all destination identities for the order\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n                string DestinationSiblingIdentifier = dest.SiblingIdentifier?.ToString() ?? \"\";\r\n                string DestinationLabwareType = dest.CommonName.ToString();\r\n\r\n\r\n                // if not member already - add to a list of all labware types for the order\r\n                if ((!LabwareTypesForOrder.Contains(DestinationLabwareType)) && (DestinationParent == null))\r\n                {\r\n                    LabwareTypesForOrder.Add(DestinationLabwareType);\r\n                }\r\n\r\n\r\n                // If the destination operation is CherryPick, we know that IOC REMP work is required and so process accordingly\r\n                if (DestinationOperationType == \"CherryPick\")\r\n                {\r\n                    // Determing the current JobId\r\n                    var i = jobs\r\n                    .Where(x => x.Properties.GetValue<string>(\"JobId\") == DestinationJobId)\r\n                    .FirstOrDefault();\r\n\r\n                    //Determing the current Job Name\r\n                    string DestJobName = i.Name;\r\n\r\n                    string DestReplicateJobName = i.Name;\r\n\r\n                    if (DestinationSiblingIdentifier != \"\")\r\n                    {\r\n\r\n                        //Determine source identifier and CrashPlateName of the destination sibling\r\n                        var cc = sources\r\n                        .Where(x => x.Identifier == DestinationSiblingIdentifier)\r\n                        .FirstOrDefault();\r\n\r\n                        string REMPRackName = cc.Name;\r\n                        Serilog.Log.Information(\"Job Id {DestinationJobId} - REMPRackName= {REMPRackName}\", DestinationJobId.ToString(), REMPRackName.ToString());\r\n                    }\r\n\r\n\r\n                    // Add a unique job record to list of cherry pick jobs (if is not already present)\r\n                    if (!AllJobsForOrder.Contains(DestJobName))\r\n                    {\r\n                        AllJobsForOrder.Add(DestJobName);\r\n                    }\r\n\r\n\r\n                    //////////\r\n                    /// use the DestinationSampleTransfers to determine all required sources for the destination. \r\n                    /// Add to alist of all sources and another list of all queued sources.\r\n                    /// Lists will be used to compare job required vs work done....\r\n                    /// /////////////\r\n\r\n                    string[] lines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n                    var firstValues = lines.Select(line => line.Split(',')[0]);\r\n\r\n                    foreach (var value in firstValues)\r\n                    {\r\n\r\n                        // if not member already - add to a list of all sources for the order\r\n                        if (!AllSourcesForOrder.Contains(value))\r\n                        {\r\n                            AllSourcesForOrder.Add(value);\r\n                            QueuedSourcesForOrder.Add(value);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                // If the destination operation is Replicate, we know that IOC Crash Plate work is required and so process accordingly\r\n                if ((DestinationOperationType == \"Replicate\") && (DestinationParent == null))\r\n                {\r\n\r\n\r\n\r\n                    // Determing jobID and Job Name\r\n                    var ii = jobs\r\n                    .Where(x => x.Properties.GetValue<string>(\"JobId\") == DestinationJobId)\r\n                    .FirstOrDefault();\r\n\r\n                    string DestReplicateJobName = ii.Name;\r\n\r\n                    //Determine source identifier and CrashPlateName of the destination sibling\r\n                    var c = sources\r\n                    .Where(x => x.Identifier == DestinationSiblingIdentifier)\r\n                    .FirstOrDefault();\r\n\r\n                    string CrashPlateName = c.Name;\r\n                    string CrashLabwareType = c.CommonName.ToString();\r\n\r\n\r\n                    // if not member already - add to a list of all crash labware types for the order\r\n                    if (!CrashPlateLabwareTypesForOrder.Contains(CrashLabwareType))\r\n                    {\r\n                        CrashPlateLabwareTypesForOrder.Add(CrashLabwareType);\r\n                    }\r\n\r\n\r\n                    Console.WriteLine($\"******Process_State_Machine_Input*****      Job Id = {DestinationJobId.ToString()} and Crash Plate Name Is {CrashPlateName.ToString()}\" + Environment.NewLine);\r\n\r\n\r\n                    // Add a unique job record to list of crash plate jobs \r\n                    if (!AllCrashJobsForOrder.Contains(DestReplicateJobName))\r\n                    {\r\n                        AllCrashJobsForOrder.Add(DestReplicateJobName);\r\n                    }\r\n\r\n                    //////////\r\n                    /// use the DestinationSampleTransfers to determine all required sources for the destination. \r\n                    /// Add to alist of all sources and another list of all queued sources.\r\n                    /// Lists will be used to compare job required vs work done....\r\n                    /// /////////////\r\n\r\n                    string[] Crashlines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n                    var CrashfirstValues = Crashlines.Select(line => line.Split(',')[0]);\r\n\r\n                    foreach (var Crashvalue in CrashfirstValues)\r\n                    {\r\n\r\n                        // if not member already - add to a list of all crash sources for the order\r\n                        if (!AllCrashPlatesForOrder.Contains(CrashPlateName))\r\n                        {\r\n                            AllCrashPlatesForOrder.Add(CrashPlateName);\r\n                            QueuedCrashPlatesForOrder.Add(CrashPlateName);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Format a string version of all created lists\r\n            string QueuedJobs = string.Join(\",\", AllJobsForOrder);\r\n            string AllSources = string.Join(\",\", AllSourcesForOrder);\r\n            string QueuedSources = string.Join(\",\", QueuedSourcesForOrder);\r\n            string QueuedCrashJobs = string.Join(\",\", AllCrashJobsForOrder);\r\n            string OrderLabwareTypes = string.Join(\",\", LabwareTypesForOrder);\r\n            string OrderCrashLabwareTypes = string.Join(\",\", CrashPlateLabwareTypesForOrder);\r\n            string AllCrashPlates = string.Join(\",\", AllCrashPlatesForOrder);\r\n            string QueuedCrashPlates = string.Join(\",\", QueuedCrashPlatesForOrder);\r\n\r\n            // Count members for each list and save to a variable\r\n            int NumQueuedSources = QueuedSourcesForOrder.Count;\r\n            int NumSources = AllSourcesForOrder.Count;\r\n            int NumQueuedJobs = AllJobsForOrder.Count;\r\n            int NumQueuedCrashJobs = AllCrashJobsForOrder.Count;\r\n            int NumQueuedCrashPlates = QueuedCrashPlatesForOrder.Count;\r\n            int NumCrashPlates = AllCrashPlatesForOrder.Count;\r\n\r\n\r\n\r\n\r\n            // save required labware types list to the \"Order Labware Types\" dataservices variable\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Order Labware Types\", OrderLabwareTypes);\r\n            //add the list of sources needed to the DS variable \"All Sources Queued for the order\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"All Sources Queued for the order\", QueuedSources);\r\n            // add the total of sources needed to the DS variable \"Total Sources\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Sources\", NumSources);\r\n            // add the total of queued jobs for the order to the DS variable \"Total Queued Jobs\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Queued Jobs\", NumQueuedJobs);\r\n\r\n\r\n            // if there is at least 1 queued source, we know that REMP work is required and so set the DS variable \"IOC Racks Required\" to TRUE\r\n            if (NumQueuedSources > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Racks Required\", true);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"Queued Sources\", QueuedSources);\r\n            }\r\n\r\n\r\n\r\n            // if there is at least 1 queued crash plate, we know that Crash  work is required and so set the DS variable \"IOC Crash Plates Required\" to TRUE\r\n            if (NumQueuedCrashPlates > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Crash Plates Required\", true);\r\n            }\r\n\r\n            //Various logs showing the current state of processing\r\n\r\n\r\n\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  ORDER DATA RELATED TO REMP SOURCES **********\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumQueuedJobs.ToString()} queued jobs in this order: {QueuedJobs.ToString()}\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumSources.ToString()} sources in this order: {AllSources.ToString()}\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumQueuedSources.ToString()} queued sources in this order: {QueuedSources.ToString()}\" + Environment.NewLine);\r\n\r\n            Console.WriteLine(Environment.NewLine + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  ORDER DATA RELATED TO Crash Plates **********\" + Environment.NewLine);\r\n\r\n\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumQueuedCrashJobs.ToString()}  queued crash jobs in this order: {QueuedCrashJobs.ToString()}\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumCrashPlates.ToString()}  crash plates in this order: {AllCrashPlates.ToString()}\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  There are {NumQueuedCrashPlates.ToString()} queued crash plates in this order: {QueuedCrashPlates.ToString()}\" + Environment.NewLine);\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  These are the crash labware types for the order {OrderCrashLabwareTypes.ToString()} \" + Environment.NewLine);\r\n\r\n\r\n            Console.WriteLine($\"******Process_State_Machine_Input*****  These are the destination labware types for the order {OrderLabwareTypes.ToString()} \" + Environment.NewLine);\r\n\r\n\r\n\r\n\r\n            // add the list of crash plates for the order to the DS variable \"Queued Crash Plates\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Queued Crash Plates\", QueuedCrashPlates);\r\n            // add the total of crash plates for the order to the DS variable \"Total Crah Plates\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Crah Plates\", NumCrashPlates);\r\n            // add the total of crash jobs for the order to the DS variable \"Total Crah Plates\"\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Queued Crash Jobs\", NumQueuedCrashJobs);\r\n\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "CheckForTipsEvent",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nLook for any inventory or Tips events for the current day. Add TRUE or FALSE accordingly\r\n*/\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForTipsEvent\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // midnight today at local location\r\n            var midnight = DateTime.Now.Date;\r\n\r\n            // convert to utc since Events.CreatedDateUtc is stored in UTC timezone\r\n            var createdFrom = midnight.ToUniversalTime();\r\n\r\n            //get all Events from DS with a topic = \"Biosero.Scripting.TipsSentEvent\"\r\n            var events = await client.GetEventsAsync(topic: \"Biosero.Scripting.TipsSentEvent\", createdFrom: createdFrom);\r\n\r\n            // Add to an array all those events where actor = \"Roche-Orchestrator\"\r\n            events = events.Where(x => x.ActorId == \"Roche-Orchestrator\").ToArray();\r\n\r\n            //If any found, add as TRUE to DS variable \"TipsEventsFound\" FALSE otherwise\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TipsEventsFound\", events.Any());\r\n\r\n\r\n            Serilog.Log.Information(\"Tips Events Found = {TipsEventsFound}\", events.Any());\r\n\r\n            //get all Events from DS with a topic = \"Biosero.Scripting.InventorySentEvent\"\r\n            events = await client.GetEventsAsync(topic: \"Biosero.Scripting.InventorySentEvent\", createdFrom: createdFrom);\r\n\r\n            // Add to an array all those events where actor = \"Roche-Orchestrator\"\r\n            events = events.Where(x => x.ActorId == \"Roche-Orchestrator\").ToArray();\r\n\r\n            //If any found, add as TRUE to DS variable \"InventoryEventsFound\" FALSE otherwise\r\n            await context.AddOrUpdateGlobalVariableAsync(\"InventoryEventsFound\", events.Any());\r\n\r\n\r\n            Serilog.Log.Information(\"Inventory Events Found= {InventoryEventsFound}\", events.Any());\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateEventForTips",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nRegisters a new TipsSentEvent\r\n*/\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateEventForTips\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            //New TipsSentEvent called Transfer with current timestamp and \"Roche-Orchestrator\" set as actor\r\n            TipsSentEvent transfer = new TipsSentEvent()\r\n            {\r\n                TimeStamp = DateTime.Now,\r\n                OperatorIdentifier = \"Roche-Orchestrator\",\r\n            };\r\n\r\n            var now = DateTimeOffset.Now;\r\n\r\n            //Add the new tips event using the TRANSFER data defined above\r\n            await client.AddEventAsync(new AddEventCommand\r\n            {\r\n                Topic = \"Biosero.Scripting.TipsSentEvent\",\r\n                Data = JsonConvert.SerializeObject(transfer),\r\n                Start = now,\r\n                End = now,\r\n                ActorId = \"Roche-Orchestrator\",\r\n                OperatorId = \"Roche-Orchestrator\",\r\n                Subjects = new string[] { \"\" }\r\n            });\r\n\r\n            Serilog.Log.Information(\"TecanTipRacksSent= Yes\");\r\n        }\r\n    }\r\n\r\n    // Class defining the structure of the TipsSentEvent\r\n    public class TipsSentEvent\r\n    {\r\n        public DateTimeOffset TimeStamp { get; set; }\r\n\r\n        public string OperatorIdentifier { get; set; }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateInventoryEvent",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nRegisters a new InventorySentEvent\r\n*/\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateInventoryEvent\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            //New InventorySentEvent called Transfer with current timestamp and \"Roche-Orchestrator\" set as actor\r\n            InventorySentEvent transfer = new InventorySentEvent()\r\n            {\r\n                TimeStamp = DateTime.Now,\r\n                OperatorIdentifier = \"Roche-Orchestrator\",\r\n            };\r\n\r\n            var now = DateTimeOffset.Now;\r\n            //Add the new inventory event using the TRANSFER data defined above\r\n            await client.AddEventAsync(new AddEventCommand\r\n            {\r\n                Topic = \"Biosero.Scripting.InventorySentEvent\",\r\n                Data = JsonConvert.SerializeObject(transfer),\r\n                Start = now,\r\n                End = now,\r\n                ActorId = \"Roche-Orchestrator\",\r\n                OperatorId = \"Roche-Orchestrator\",\r\n                Subjects = new string[] { \"\" }\r\n            });\r\n\r\n            Serilog.Log.Information(\"Inventory Operation Required= Yes\");\r\n        }\r\n    }\r\n\r\n\r\n    // Class defining the structure of the InventorySentEvent\r\n    public class InventorySentEvent\r\n    {\r\n        public DateTimeOffset TimeStamp { get; set; }\r\n\r\n        public string OperatorIdentifier { get; set; }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckAllQueuedSources",
      "code": "#r Roche.LAMA1.dll\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nfollowup  script to determine the the current state of sources processed for REMP or crash sources.\r\nThe script is designed to run on a loop (with a slight delay) to always capture the correct current state\r\n*/\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckAllQueuedSources\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // Retrieve order ID ran\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n\r\n            // connnect to the DS server, declare query, assecssioning and event clients for the URL\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            // Various lists used throughout processing to collect related data for the order and job\r\n            List<string> AllSourcesForOrder = new List<string>();\r\n            List<string> QueuedSourcesForOrder = new List<string>();\r\n            List<string> ReadySourcesForOrder = new List<string>();\r\n            List<string> CancelledSourcesForOrder = new List<string>();\r\n            List<string> ProcessedSourcesForOrder = new List<string>();\r\n\r\n            List<string> AllCrashPlatesForOrder = new List<string>();\r\n            List<string> QueuedCrashPlatesForOrder = new List<string>();\r\n            List<string> ReadyCrashPlatesForOrder = new List<string>();\r\n            List<string> CancelledCrashPlatesForOrder = new List<string>();\r\n            List<string> ProcessedCrashPlatesForOrder = new List<string>();\r\n\r\n\r\n            //Loop through all destination identities for the order\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationID = dest.Identifier;\r\n                string DestinationyName = dest.Name;\r\n                string DestinationType = dest.TypeIdentifier;\r\n               // int DestinationDescription = dest.JobId;\r\n                string DestinationState = dest.Status.ToString();\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n                string DestSibling  = dest.SiblingIdentifier?.ToString() ?? \"\";\r\n\r\n                //string DestinationParent;\r\n                // string DestSibling = \"\";\r\n\r\n\r\n                if (dest != null && dest.SiblingIdentifier != null)\r\n                    {\r\n                         DestSibling = dest.SiblingIdentifier.ToString();\r\n                        // Continue with your logic\r\n                    }\r\n                    else\r\n                    {\r\n                        // Handle the case where dest or SiblingIdentifier is null\r\n                        // For example, set DestSibling to a default value or handle the error\r\n                         DestSibling = string.Empty; // or any default value you deem appropriate\r\n                    }\r\n                    \r\n                    \r\n\r\n                if (dest.ParentIdentifier != null)\r\n                {\r\n                    DestinationParent = dest.ParentIdentifier.ToString();\r\n                }\r\n                else\r\n                {\r\n                    DestinationParent = string.Empty;\r\n                }\r\n\r\n\r\n                if (DestinationOperationType == \"CherryPick\")\r\n                {\r\n\r\n                    //////////\r\n                    /// use the DestinationSampleTransfers to determine all required sources for the destination. \r\n                    /// Add to alist of all sources and another list of all queued sources.\r\n                    /// Lists will be used to compare job required vs work done....\r\n                    /// /////////////\r\n\r\n                    string[] lines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n                    var firstValues = lines.Select(line => line.Split(',')[0]);\r\n                    foreach (var value in firstValues)\r\n                    {\r\n                        // If unknown source, add to total list of order CP sources and queued list of sources\r\n                        if (!AllSourcesForOrder.Contains(value))\r\n                        {\r\n                            AllSourcesForOrder.Add(value);\r\n                            QueuedSourcesForOrder.Add(value);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                else if ((DestinationOperationType == \"Replicate\") && (DestinationParent == \"\"))\r\n                {\r\n\r\n                    //////////\r\n                    /// use the DestinationSampleTransfers to determine all required crash plates for the destination. \r\n                    /// Add to alist of all sources and another list of all queued crash sources.\r\n                    /// Lists will be used to compare job required vs work done....\r\n                    /// /////////////\r\n                    /// \r\n                    string[] Crashlines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n                    var firstCrashValues = Crashlines.Select(line => line.Split(',')[0]);\r\n\r\n\r\n\r\n                    //get the source name for the current destination identity\r\n                    var a = sources\r\n                    .Where(a => a.Identifier == DestSibling)\r\n                    .FirstOrDefault();\r\n\r\n                    string SiblingName = a.Name;\r\n                    \r\n                    \r\n                    // get the erequired source labware type\r\n                    string SourceLabwareType = a.CommonName.ToString();\r\n\r\n                    //Add labware type to the DS variable called \"CrashLabwareType\"\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"CrashLabwareType\", SourceLabwareType);\r\n\r\n                    // If unknown source, add to total list of order crash plates and queued list of crash plates\r\n                    if (!AllCrashPlatesForOrder.Contains(SiblingName))\r\n                    {\r\n                        AllCrashPlatesForOrder.Add(SiblingName);\r\n                        QueuedCrashPlatesForOrder.Add(SiblingName);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            //scroll through all sources for the order\r\n            foreach (var source in sources)\r\n            {\r\n                string SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                string SourceIndentityState = source.Status.ToString();\r\n\r\n\r\n                Serilog.Log.Information(\"Source Name= {SourceIdentityName} Source State= {SourceIndentityState}\", SourceIdentityName.ToString(), SourceIndentityState.ToString());\r\n\r\n                //If found source is part of the queued sources list from top section of script, continue processing\r\n                if (QueuedSourcesForOrder.Contains(SourceIdentityName))\r\n                {\r\n                //If the source is either of state \"Ready\" or state \"Cancelled\" - add to the relevant list of sources\r\n                    // Check for cancelled CP sources and add to the relevant lists\r\n                    if ((!CancelledSourcesForOrder.Contains(SourceIdentityName)) && (SourceIndentityState == \"Cancelled\"))\r\n                    {\r\n                        CancelledSourcesForOrder.Add((SourceIdentityName));\r\n                    }\r\n                    // Check for ready CP sources and add to the relevant lists\r\n                    else if ((!ReadySourcesForOrder.Contains(SourceIdentityName)) && (SourceIndentityState == \"Ready\"))\r\n                    {\r\n                        ReadySourcesForOrder.Add((SourceIdentityName));\r\n                    }\r\n                }\r\n\r\n                //If found crash plate is part of the queued crash pate list from top section of script, continue processing\r\n                if (QueuedCrashPlatesForOrder.Contains(SourceIdentityName))\r\n                {\r\n                //If the crash plate is either of state \"Ready\" or state \"Cancelled\" - add to the relevant list of crash plates\r\n                    // Check for cancelled CP crash plates and add to the relevant lists\r\n                    if ((!CancelledCrashPlatesForOrder.Contains(SourceIdentityName)) && (SourceIndentityState == \"Cancelled\"))\r\n                    {\r\n                        CancelledCrashPlatesForOrder.Add((SourceIdentityName));\r\n                    }\r\n                    // Check for ready CP crash plates and add to the relevant lists\r\n                    else if ((!ReadyCrashPlatesForOrder.Contains(SourceIdentityName)) && (SourceIndentityState == \"Ready\"))\r\n                    {\r\n                        ReadyCrashPlatesForOrder.Add((SourceIdentityName));\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            // Format a string version of all created lists\r\n            string AllQueuedSources = string.Join(\",\", QueuedSourcesForOrder);\r\n            string AllReadyCrashPlates = string.Join(\",\", ReadyCrashPlatesForOrder);\r\n            string AllReadySources = string.Join(\",\", ReadySourcesForOrder);\r\n            string AllQueuedCrashPlates = string.Join(\",\", QueuedCrashPlatesForOrder);\r\n            string AllCancelledSources = string.Join(\",\", CancelledSourcesForOrder);\r\n            string AllCancelledCrashPlates = string.Join(\",\", CancelledCrashPlatesForOrder);\r\n            string AllCrashPlates = string.Join(\",\", AllCrashPlatesForOrder);\r\n            string AllSources = string.Join(\",\", AllSourcesForOrder);\r\n\r\n\r\n            // Count members for each list and save to a variable\r\n            int TotalQueuedsources = QueuedSourcesForOrder.Count;\r\n            int TotalQueuedCrashPlates = QueuedCrashPlatesForOrder.Count;\r\n            int TotalReadySources = ReadySourcesForOrder.Count;\r\n            int TotalReadyCrashPlates = ReadyCrashPlatesForOrder.Count;\r\n            int TotalCancelledSources = CancelledSourcesForOrder.Count;\r\n            int TotalCancelledCrashPlates = CancelledCrashPlatesForOrder.Count;\r\n            int Totalsources = AllSourcesForOrder.Count;\r\n            int TotalCrashPlates = AllCrashPlatesForOrder.Count;\r\n\r\n\r\n            Serilog.Log.Information(\"Following sources are queued: {AllQueuedSources}\", AllQueuedSources.ToString());\r\n            Serilog.Log.Information(\"Following sources have a READY state: {AllReadySources}\", AllReadySources.ToString());\r\n            Serilog.Log.Information(\"Following sources have a CANCELLED state: {AllCancelledSources}\", AllCancelledSources.ToString());\r\n\r\n            Serilog.Log.Information(\"Following crash plates are queued: {AllQueuedCrashPlates}\", AllQueuedCrashPlates.ToString()); \r\n            Serilog.Log.Information(\"Following crash plates have a READY state: {AllReadyCrashPlates}\", AllReadyCrashPlates.ToString());\r\n            Serilog.Log.Information(\"Following crash plates have a CANCELLED state: {AllCancelledCrashPlates}\", AllCancelledCrashPlates.ToString());\r\n\r\n\r\n            //add two ranges to a general \"processed\" list\r\n            ProcessedSourcesForOrder.AddRange(CancelledSourcesForOrder);\r\n            ProcessedSourcesForOrder.AddRange(ReadySourcesForOrder);\r\n\r\n            //add two ranges to a general crash plates \"processed\" list\r\n            ProcessedCrashPlatesForOrder.AddRange(CancelledCrashPlatesForOrder);\r\n            ProcessedCrashPlatesForOrder.AddRange(ReadyCrashPlatesForOrder);\r\n\r\n            // format a string containing all processed sources and crash plates\r\n            string AllProcessedSources = string.Join(\",\", ProcessedSourcesForOrder);\r\n            string AllProcessedCrashPlates = string.Join(\",\", ProcessedCrashPlatesForOrder);\r\n\r\n            // format an int variable with the total processed sources and total processed crash plates\r\n            int TotalProcessedSources = ProcessedSourcesForOrder.Count;\r\n            int TotalProcessedCrashPlates = ProcessedCrashPlatesForOrder.Count;\r\n\r\n\r\n            // add total queued and total processed sources to the relavant DS variables\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Sources\", TotalQueuedsources);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Processed Sources\", TotalProcessedSources);\r\n\r\n            // add total queued and total processed crash plates to the relavant DS variables\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Crash Plates\", TotalQueuedCrashPlates);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Processed Crash Plates\", TotalProcessedCrashPlates);\r\n\r\n            // add details of all proceessed sources to the relavant DS variable\r\n            if (TotalReadySources > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Processed Racks\", AllReadySources);\r\n            }\r\n\r\n            // add details of all cancelled sources to the relavant DS variable\r\n            if (TotalCancelledSources > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Cancelled Racks\", AllCancelledSources);\r\n            }\r\n\r\n\r\n            // add details of all proceessed crash plates to the relavant DS variable\r\n            if (TotalReadyCrashPlates > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Processed Crash Plates\", AllReadyCrashPlates);\r\n            }\r\n\r\n            // add details of all cancelled crash plates to the relavant DS variable\r\n            if (TotalCancelledCrashPlates > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Cancelled Crash Plates\", AllCancelledCrashPlates);\r\n            }\r\n\r\n\r\n            Serilog.Log.Information(\"All sources for the order= {AllSources} Total sources found for the order {Totalsources}\", AllSources.ToString(), Totalsources.ToString());\r\n            Serilog.Log.Information(\"All queued sources for the order= {AllQueuedSources} Total Queued sources for the order {TotalQueuedsources}\", AllQueuedSources.ToString(), TotalQueuedsources.ToString());\r\n            Serilog.Log.Information(\"All Processed sources for the order= {AllProcessedSources} Total processed sources for the order{TotalProcessedSources}\", AllProcessedSources.ToString(), TotalProcessedSources.ToString());\r\n            Serilog.Log.Information(\"====$$$$$$$====\");\r\n            Serilog.Log.Information(\"All crash plates for the order= {AllCrashPlates} Total crash plates for the order {TotalCrashPlates}\", AllCrashPlates.ToString(), TotalCrashPlates.ToString());\r\n            Serilog.Log.Information(\"all queued crash plates for the order= {AllQueuedCrashPlates} Total Queued crash plates for the order{TotalQueuedCrashPlates}\", AllQueuedCrashPlates.ToString(), TotalQueuedCrashPlates.ToString());\r\n            Serilog.Log.Information(\"All processed crash plates for the order= {AllProcessedCrashPlates} Total processed crash plates for the order {TotalProcessedCrashPlates}\", AllProcessedCrashPlates.ToString(), TotalProcessedCrashPlates.ToString());\r\n           \r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckCancelledJobsAndOrders",
      "code": "#r Roche.LAMA1.dll\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nProcess any requests to cancel either the entire order or a job within it. \r\nProcess error messages or the entire workflow processing accordingly\r\n*/\r\n\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckCancelledJobsAndOrders\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            List<string> ReadyCPSources = new List<string>();\r\n            List<string> CancelledCPSources = new List<string>();\r\n            List<string> ReadyRepSources = new List<string>();\r\n            List<string> CancelledRepSources = new List<string>();\r\n            List<string> ReadyJobs = new List<string>();\r\n            List<string> CancelledJobs = new List<string>();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n         \r\n\r\n\r\n            foreach (var source in sources)\r\n            {\r\n                string SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                string SourceIndentityState = source.Status.ToString();\r\n                string SourceJobId = source.JobId.ToString();\r\n                string SourceOperationType = source.OperationType.ToString();\r\n                \r\n                string SourceParent;\r\n\r\n                if (source.ParentIdentifier != null)\r\n                {\r\n                    SourceParent = source.ParentIdentifier.ToString();\r\n                }\r\n                else\r\n                {\r\n                    SourceParent = \"\";\r\n                }\r\n\r\n                if (SourceOperationType == \"CherryPick\")\r\n                {\r\n                    if ((SourceIndentityState==\"Ready\") &&(!ReadyJobs.Contains(SourceJobId)))\r\n                    {\r\n                        ReadyJobs.Add(SourceJobId);\r\n                    }\r\n                    else  if ((SourceIndentityState == \"Cancelled\") && (!CancelledJobs.Contains(SourceJobId)))\r\n                    {\r\n                        CancelledJobs.Add(SourceJobId);\r\n                    }\r\n\r\n\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyCPSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        ReadyCPSources.Add(SourceIdentityName);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledCPSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        CancelledCPSources.Add(SourceIdentityName);\r\n                    }\r\n\r\n                }\r\n\r\n                else if  ((SourceOperationType == \"Replicate\") && (SourceParent == \"\"))\r\n                {\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyJobs.Contains(SourceJobId)))\r\n                    {\r\n                        ReadyJobs.Add(SourceJobId);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledJobs.Contains(SourceJobId)))\r\n                    {\r\n                        CancelledJobs.Add(SourceJobId);\r\n                    }\r\n\r\n\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyRepSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        ReadyRepSources.Add(SourceIdentityName);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledRepSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        CancelledRepSources.Add(SourceIdentityName);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            var uniqueInList = CancelledJobs.Where(item => !ReadyJobs.Contains(item)).ToList();\r\n\r\n            var jobIDs = jobs.Select(job => job.JobId).ToList();\r\n\r\n            string AllReadyCPSources = string.Join(\",\", ReadyCPSources);\r\n            string AllCancelledCPSources = string.Join(\",\", CancelledCPSources);\r\n            string AllReadyRepSources = string.Join(\",\", ReadyRepSources);\r\n            string AllCancelledRepSources = string.Join(\",\", CancelledRepSources);\r\n            string AllReadyJobs = string.Join(\",\", ReadyJobs);\r\n            string AllCancelledJobs = string.Join(\",\", CancelledJobs);\r\n            string OnlyCancelledJobs = string.Join(\",\", uniqueInList);\r\n            string AllJobs = string.Join(\",\", jobIDs);\r\n\r\n            bool CancelOrder = false;\r\n\r\n            bool allInList2 = AllJobs.All(x => OnlyCancelledJobs.Contains(x));\r\n\r\n            if (allInList2 == true)\r\n            {\r\n                CancelOrder = true;\r\n            }\r\n\r\n\r\n            Serilog.Log.Information(\"AllReadyCPSources= {AllReadyCPSources}\", AllReadyCPSources.ToString());\r\n            Serilog.Log.Information(\"AllCancelledCPSources= {AllCancelledCPSources}\", AllCancelledCPSources.ToString());\r\n            Serilog.Log.Information(\"AllReadyRepSources= {AllReadyRepSources}\", AllReadyRepSources.ToString());\r\n            Serilog.Log.Information(\"AllCancelledRepSources= {AllCancelledRepSources}\", AllCancelledRepSources.ToString());\r\n            Serilog.Log.Information(\"AllReadyJobs= {AllReadyJobs}\", AllReadyJobs.ToString());\r\n            Serilog.Log.Information(\"AllCancelledJobs= {AllCancelledJobs}\", AllCancelledJobs.ToString());\r\n            Serilog.Log.Information(\"OnlyCancelledJobs= {OnlyCancelledJobs}\", OnlyCancelledJobs.ToString());\r\n            Serilog.Log.Information(\"AllJobs= {AllJobs}\", AllJobs.ToString());\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"All Ready Jobs\", AllReadyJobs); \r\n            await context.AddOrUpdateGlobalVariableAsync(\"Cancel Order Processing\", CancelOrder); \r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Processed Racks\", AllReadyCPSources); \r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Processed Crash Plates\", AllReadyRepSources);\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "DebugCheckAllQueuedSources",
      "code": "#r ScriptTools.dll\r\n\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing ScriptTools;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\npublic class DebugCheckAllQueuedSources\r\n    {\r\npublic async Task RunAsync  (DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            var DebugCheckAllQueuedSources = new ScriptTools.Tools();\r\n            await DebugCheckAllQueuedSources.RunAsync(\"Ronen\", client, context, cancellationToken);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "SetRemainingSourcesToTransferred",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetRemainingSourcesToTransferred\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            string ProcessedRacks = context.GetGlobalVariableValue<string>(\"IOC Processed Racks\");\r\n            string ProcessedCrashPlates = context.GetGlobalVariableValue<string>(\"IOC Processed Crash Plates\");\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n            foreach (var source in sources)\r\n            {\r\n                int identityJobID = source.JobId; // Identity Job as string\r\n                string SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                string SourceIndentityState = source.Status.ToString();\r\n\r\n                if ((ProcessedRacks != \"\") && (ProcessedRacks.Contains(SourceIdentityName)))\r\n                {\r\n                    var currentStatus = SourceIndentityState;\r\n                    source.Properties.SetValue(\"Status\", \"Transporting\");\r\n                    _identityHelper.Register(source,identityJobID , RequestedOrder);\r\n\r\n                }\r\n\r\n                if ((ProcessedCrashPlates != \"\") && (ProcessedCrashPlates.Contains(SourceIdentityName)))\r\n                {\r\n                    var currentStatus = SourceIndentityState;\r\n                    source.Properties.SetValue(\"Status\", \"Transporting\");\r\n                    _identityHelper.Register(source, identityJobID, RequestedOrder);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "CP_Populate_Placeholder_CAPS_And_PDP",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CP_Populate_Placeholder_CAPS_And_PDP\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string OrderNumber = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            int TotalSources = context.GetGlobalVariableValue<int>(\"Total Sources\");\r\n\r\n            string CapsPlaceholderBarcodes = \"\";\r\n            string PDPPlaceholderBarcodes = \"\";\r\n            DateTime currentDate = DateTime.Now;\r\n            int CurrentDay = currentDate.Day;\r\n\r\n\r\n            // Cap  = for each source, 1 Cap Holder\r\n\r\n            for (int i = 1; i <= (TotalSources); i++)\r\n            {\r\n                CapsPlaceholderBarcodes = CapsPlaceholderBarcodes + OrderNumber.ToString() + CurrentDay.ToString() + \"CAP\" + i + \",\";\r\n            }\r\n            CapsPlaceholderBarcodes = CapsPlaceholderBarcodes.TrimEnd(',');\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"CapsPlaceholderBarcodes\", CapsPlaceholderBarcodes);\r\n\r\n\r\n            // PDP  = for each source, 1 PDP \r\n\r\n            for (int i = 1; i <= (TotalSources); i++)\r\n            {\r\n                PDPPlaceholderBarcodes = PDPPlaceholderBarcodes + OrderNumber.ToString() + CurrentDay.ToString() + \"PDP\" + i + \",\";\r\n            }\r\n            PDPPlaceholderBarcodes = PDPPlaceholderBarcodes.TrimEnd(',');\r\n            await context.AddOrUpdateGlobalVariableAsync(\"PDPPlaceholderBarcodes\", PDPPlaceholderBarcodes);\r\n\r\n\r\n\r\n            Serilog.Log.Information(\"CapsPlaceholderBarcodes= {CapsPlaceholderBarcodes}\", CapsPlaceholderBarcodes.ToString());\r\n            Serilog.Log.Information(\"PDPPlaceholderBarcodes= {PDPPlaceholderBarcodes}\", PDPPlaceholderBarcodes.ToString());\r\n\r\n\r\n        }\r\n    }\r\n}\r\n",
      "language": "C#"
    },
    {
      "name": "CheckAllQueuedEBSources",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckAllQueuedEBSources\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string CPSourcesForEB = context.GetGlobalVariableValue<string>(\"CPSourcesForEB\");\r\n\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllSourcesForOrder = new List<string>();\r\n            List<string> QueuedSourcesForOrder = new List<string>();\r\n            List<string> ReadySourcesForEB = new List<string>();\r\n            List<string> CPToEBBarcodes = CPSourcesForEB.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\r\n\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the Sources associated with this order\r\n            var Sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicSource? Source = Sources?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var source in sources)\r\n            {\r\n                string SourceID = source.Identifier;\r\n                string SourceName = source.Name;\r\n                string SourceType = source.TypeIdentifier;\r\n                string SourceState = source.Status.ToString();\r\n                string SourceOperationType = source.OperationType.ToString();\r\n                string SourceSampleTransfers = source.SampleTransfers; \r\n\r\n                bool isInList = CPToEBBarcodes.Contains(SourceName);\r\n\r\n                    if (isInList) \r\n                    {\r\n\r\n                        if (!AllSourcesForOrder.Contains(SourceName))\r\n                        {\r\n                            AllSourcesForOrder.Add(SourceName);\r\n                            QueuedSourcesForOrder.Add(SourceName);\r\n                        }\r\n\r\n\r\n                        if ((!ReadySourcesForEB.Contains(SourceName)) && (SourceState == \"Ready\"))\r\n                        {\r\n                        ReadySourcesForEB.Add((SourceName));\r\n                        }\r\n                    }\r\n\r\n\r\n            }\r\n\r\n            string AllEBDestinedSources = string.Join(\",\", AllSourcesForOrder);\r\n            int TotalEBDestinedSources = AllSourcesForOrder.Count;\r\n            string AllQueuedEBDestinedSources = string.Join(\",\", QueuedSourcesForOrder);\r\n            int TotalEBQueuedDestinedSources = QueuedSourcesForOrder.Count;\r\n            string AllEBReadySources = string.Join(\",\", ReadySourcesForEB);\r\n            int TotalEBReadySources = ReadySourcesForEB.Count;\r\n\r\n\r\n            Serilog.Log.Information(\"TotalEBDestinedSources= {TotalEBDestinedSources} AllEBDestinedSources {AllEBDestinedSources}\", TotalEBDestinedSources.ToString(), AllEBDestinedSources.ToString());\r\n            Serilog.Log.Information(\"TotalEBQueuedDestinedSources= {TotalEBQueuedDestinedSources} AllQueuedEBDestinedSources {AllQueuedEBDestinedSources}\", TotalEBQueuedDestinedSources.ToString(), AllQueuedEBDestinedSources.ToString());\r\n            Serilog.Log.Information(\"TotalEBReadySources= {TotalEBReadySources} ReadySourcesForEB {ReadySourcesForEB}\", TotalEBReadySources.ToString(), ReadySourcesForEB.ToString());\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}",
      "language": "C#"
    }
  ],
  "screens": [],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.FlagCheckered [#FFFFFF:0:0]",
  "color": "#FFFF0000",
  "name": "State Machine V1.1",
  "category": "Workflows",
  "description": "State Machine V1",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}