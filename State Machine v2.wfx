{
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "SetRemainingSourcesToTransferred",
            "name": "Run Script",
            "description": "Run Script: SetRemainingSourcesToTransferred",
            "helpText": "Runs the specified script",
            "guid": "808dca3b-19a2-42f6-9097-af1a2ddd32b1",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "383b8a12-a851-441b-ae9c-b02768167adf",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "parameters": [
    {
      "name": "Input.OrderId",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Queued Sources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Queued Jobs",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Total Sources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Racks Required",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IOC Processed Racks",
      "value": "REMP00470287,REMP00470281",
      "valueType": "String",
      "defaultValue": "REMP00470287,REMP00470281",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "scripts": [
    {
      "name": "Process First Linage",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_First_Linage\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            //               Serilog.Log.Information(\"RequestedOrder= {RequestedOrder}\", RequestedOrder.ToString());\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            string RequestedSources = \"\";\r\n            int LineageLevel = 1;\r\n\r\n            var _queryClient = new QueryClient(API_BASE_URL);\r\n            var _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            var _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            string MosaicSourceBaseType = MosaicSource.GetBaseIdentifier(_queryClient);\r\n            string MosaicDestinationBaseType = MosaicDestination.GetBaseIdentifier(_queryClient);\r\n            string MosaicJobBaseType = MosaicJob.GetBaseIdentifier(_queryClient);\r\n\r\n            List<string> AllJobsForLineage = new List<string>();\r\n\r\n\r\n\r\n            //-------\r\n\r\n            //Create instance of IdentityHelper\r\n            var _identityHelper = new IdentityHelper(new QueryClient(\"http://192.168.14.10:8105/api/v2.0/\"), new AccessioningClient(\"http://192.168.14.10:8105/api/v2.0/\"), new EventClient(\"http://192.168.14.10:8105/api/v2.0/\"));\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            //Get all plates with with lineage of n (3rd input) for order X (4th input)\r\n            var listOfIdents = GetPlatesWithNumberOfParents(_identityHelper, _queryClient, 1, RequestedOrder);\r\n            var listOfJobIdents = GetPlatesWithNumberOfParents(_identityHelper, _queryClient, 0, RequestedOrder);\r\n\r\n\r\n\r\n            //    loop through each returned identities\r\n            foreach (var ident in listOfJobIdents)\r\n            {\r\n                string IdentityID = ident.Identifier;\r\n                string IdentityName = ident.Name;\r\n                string IdentityType = ident.TypeIdentifier;\r\n                string IdentityDescription = ident.Description;\r\n                string IndentityState = ident.Properties.GetValue<string>(\"Status\");\r\n\r\n\r\n                // if returned plate is of type MosaicSource\r\n                if (IdentityType == MosaicJobBaseType)\r\n                {\r\n                    string IdentityJobId = ident.Properties.GetValue<string>(\"JobId\");\r\n                    string IdentityWorkflowFragment = ident.Properties.GetValue<string>(\"Workflow Fragment\");\r\n                    string delimiter = \" -> \";\r\n\r\n                    string[] records = IdentityWorkflowFragment.Split(new string[] { delimiter }, StringSplitOptions.None);\r\n\r\n                    // Get the first record\r\n                    if (records.Length > 0)\r\n                    {\r\n                        string firstRecord = records[0];\r\n                        if (!AllJobsForLineage.Contains(IdentityJobId))\r\n                        {\r\n                            AllJobsForLineage.Add(IdentityJobId);\r\n                            Serilog.Log.Information(\"IdentityJobId= {IdentityJobId}\", IdentityJobId);\r\n                            Serilog.Log.Information(\"firstRecord= {firstRecord}\", firstRecord);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            foreach (string JobId in AllJobsForLineage)\r\n            {\r\n                foreach (var ident in listOfJobIdents)\r\n                {\r\n                    string IdentityName = ident.Name;\r\n                    string IdentityDescription = ident.Description;\r\n                    string IdentityID = ident.Identifier;\r\n                    string IdentityType = ident.TypeIdentifier;\r\n\r\n                    if ((IdentityType == MosaicSourceBaseType) || (IdentityType == MosaicDestinationBaseType))\r\n                    {\r\n\r\n                        if ((JobId == IdentityDescription) && (IdentityID == \"49f9ff4e-0561-44f0-bd7f-e449dd2c2ac9\"))\r\n                        {\r\n                            Serilog.Log.Information(\"ID= {IdentityID}\", IdentityID);\r\n                            Serilog.Log.Information(\"IdentityType= {IdentityType}\", IdentityType);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        public int getNumberOfParentsForID(string ID, IdentityHelper _helper, QueryClient _queryClient, string ownerId)\r\n        {\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n            var identity = _queryClient.GetIdentity(ID);\r\n            numberOfParentsCount = 0;\r\n            parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n            Ident = identity.Identifier;\r\n            while (parent != string.Empty)\r\n            {                    //add null check here?\r\n                Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                numberOfParentsCount += 1;\r\n            }\r\n            return numberOfParentsCount;\r\n        }\r\n\r\n\r\n\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            //       Serilog.Log.Information($\"Attempting to GetSources associated with ownerID {ownerId}\");\r\n            var orderSources = _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity);\r\n            //       Serilog.Log.Information($\"Successfuly retrieved {orderSources.Count()} sources. Querying Destinations\");\r\n            var orderDestinations = _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity);\r\n            //       Serilog.Log.Information($\"Successfuly retrieved {orderSources.Count()} sources. Querying Destinations\");\r\n            var orderJobs = _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity);\r\n\r\n\r\n            var orderIdents = new List<Biosero.DataModels.Resources.Identity>();\r\n            orderIdents.AddRange(orderSources);\r\n            orderIdents.AddRange(orderDestinations);\r\n            orderIdents.AddRange(orderJobs);\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in orderIdents)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "Register Identity",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.DataModels.Events;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Resources;\r\nusing Biosero.DataModels.Clients;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Register_Identity\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string jobId = \"100\";\r\n            string orderId = \"777\";\r\n\r\n            //IdentityHelper _identityHelper;\r\n\r\n\r\n            string url = $\"http://192.168.14.10:8105/api/v2.0/\";\r\n            IdentityHelper _identityHelper = new IdentityHelper(new QueryClient(url), new AccessioningClient(url), new EventClient(url));\r\n\r\n\r\n\r\n        MosaicSource source1 = new MosaicSource()\r\n            {\r\n                Name = \"DestinationEchoPlate001\",\r\n                Description = jobId,\r\n                TypeIdentifier = \"06df16e8-8cd8-4144-ba9c-8f3f37b11add\",\r\n                ParentIdentifier = \"e1e43e4b-19ce-4420-8906-c3fc1b2641d4\",\r\n                Status = Status.Pending,\r\n                IsInstance = true\r\n            };\r\n\r\n            _identityHelper.RegisterInstance(source1, jobId, orderId);\r\n\r\n            MosaicSource source2 = new MosaicSource()\r\n            {\r\n                Name = \"DestinationEchoPlate002\",\r\n                Description = jobId,\r\n                TypeIdentifier = \"06df16e8-8cd8-4144-ba9c-8f3f37b11add\",\r\n                ParentIdentifier = \"58398ca3-c369-437a-af4a-7a12eb72e788\",\r\n                Status = Status.Pending,\r\n                IsInstance = true\r\n            };\r\n\r\n            _identityHelper.RegisterInstance(source2, jobId, orderId);\r\n            \r\n\r\n        }\r\n\r\n        // string JobNumber = Identity.Properties.GetValue<string>(\"JobId\");\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "Process_State_Machine_Input_New",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_State_Machine_Input_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllSourcesForOrder = new List<string>();\r\n            List<string> QueuedSourcesForOrder = new List<string>();\r\n            List<string> AllJobsForOrder = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicDestination? destination = destinations?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n\r\n                if (DestinationOperationType == \"CherryPick\")\r\n                {\r\n                    var i = jobs\r\n                .Where(x => x.Properties.GetValue<string>(\"JobId\") == DestinationJobId)\r\n                .FirstOrDefault();\r\n\r\n                string DestJobName = i.Name;\r\n\r\n                    // Add a unique job record to list of cherry pick jobs \r\n                    if (!AllJobsForOrder.Contains(DestJobName))\r\n                    {\r\n                        AllJobsForOrder.Add(DestJobName);\r\n                    }\r\n\r\n\r\n                    string[] lines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n                    var firstValues = lines.Select(line => line.Split(',')[0]);\r\n\r\n                    foreach (var value in firstValues)\r\n                    {\r\n\r\n                        // if not member already - add to a list of all sources for the order\r\n                        if (!AllSourcesForOrder.Contains(value))\r\n                        {\r\n                            AllSourcesForOrder.Add(value);\r\n                            QueuedSourcesForOrder.Add(value);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n            string QueuedJobs = string.Join(\",\", AllJobsForOrder);\r\n            string AllSources = string.Join(\",\", AllSourcesForOrder);\r\n            string QueuedSources = string.Join(\",\", QueuedSourcesForOrder);\r\n            int NumQueuedSources = QueuedSourcesForOrder.Count;\r\n            int NumSources = AllSourcesForOrder.Count;\r\n            int NumQueuedJobs = AllJobsForOrder.Count;\r\n\r\n            Serilog.Log.Information(\"Name= {AllSources}\", AllSources.ToString());\r\n            Serilog.Log.Information(\"NumSources= {xx}\", NumSources.ToString());\r\n            Serilog.Log.Information(\"Name= {QueuedJobs}\", QueuedJobs.ToString());\r\n            Serilog.Log.Information(\"NumQueuedJobs= {xx}\", NumQueuedJobs.ToString());\r\n\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Queued Sources\", QueuedSources);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Queued Jobs\", NumQueuedJobs);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Total Sources\", NumSources);\r\n\r\n            if (NumQueuedSources > 0)\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"IOC Racks Required\", true);\r\n            }\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "Test Script",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_State_Machine_Input_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllSourcesForOrder = new List<string>();\r\n            List<string> QueuedSourcesForOrder = new List<string>();\r\n            List<string> AllJobsForOrder = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicDestination? destination = destinations?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n\r\n                if (DestinationOperationType == \"CherryPick\")\r\n                {\r\n                    var i = jobs\r\n                .Where(x => x.Properties.GetValue<string>(\"JobId\") == DestinationJobId)\r\n                .FirstOrDefault();\r\n\r\n                string DestJobName = i.Name;\r\n\r\n                    // Add a unique job record to list of cherry pick jobs \r\n                    if (!AllJobsForOrder.Contains(DestJobName))\r\n                    {\r\n                        AllJobsForOrder.Add(DestJobName);\r\n                    }\r\n\r\n\r\n                    string[] lines = DestinationSampleTransfers.Split(new[] { \"\\r\\n\" }, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n                    var firstValues = lines.Select(line => line.Split(',')[0]);\r\n\r\n                    foreach (var value in firstValues)\r\n                    {\r\n\r\n                        // if not member already - add to a list of all sources for the order\r\n                        if (!AllSourcesForOrder.Contains(value))\r\n                        {\r\n                            AllSourcesForOrder.Add(value);\r\n                            QueuedSourcesForOrder.Add(value);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n            string QueuedJobs = string.Join(\",\", AllJobsForOrder);\r\n            string AllSources = string.Join(\",\", AllSourcesForOrder);\r\n            string QueuedSources = string.Join(\",\", QueuedSourcesForOrder);\r\n            int NumQueuedSources = QueuedSourcesForOrder.Count;\r\n            int NumSources = AllSourcesForOrder.Count;\r\n            int NumQueuedJobs = AllJobsForOrder.Count;\r\n\r\n            Serilog.Log.Information(\"Name= {AllSources}\", AllSources.ToString());\r\n            Serilog.Log.Information(\"NumSources= {xx}\", NumSources.ToString());\r\n            Serilog.Log.Information(\"Name= {QueuedJobs}\", QueuedJobs.ToString());\r\n            Serilog.Log.Information(\"NumQueuedJobs= {xx}\", NumQueuedJobs.ToString());\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "CheckCancelledJobsAndOrders",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckCancelledJobsAndOrders\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            List<string> ReadyCPSources = new List<string>();\r\n            List<string> CancelledCPSources = new List<string>();\r\n            List<string> ReadyRepSources = new List<string>();\r\n            List<string> CancelledRepSources = new List<string>();\r\n            List<string> ReadyJobs = new List<string>();\r\n            List<string> CancelledJobs = new List<string>();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            foreach (var source in sources)\r\n            {\r\n                string SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                string SourceIndentityState = source.Status.ToString();\r\n                string SourceJobId = source.JobId.ToString();\r\n                string SourceOperationType = source.OperationType.ToString();\r\n                string SourceParent = source.ParentIdentifier.ToString();\r\n\r\n                if (SourceOperationType == \"CherryPick\")\r\n                {\r\n                    if ((SourceIndentityState==\"Ready\") &&(!ReadyJobs.Contains(SourceJobId)))\r\n                    {\r\n                        ReadyJobs.Add(SourceJobId);\r\n                    }\r\n                    else  if ((SourceIndentityState == \"Cancelled\") && (!CancelledJobs.Contains(SourceJobId)))\r\n                    {\r\n                        CancelledJobs.Add(SourceJobId);\r\n                    }\r\n\r\n\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyCPSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        ReadyCPSources.Add(SourceIdentityName);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledCPSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        CancelledCPSources.Add(SourceIdentityName);\r\n                    }\r\n\r\n                }\r\n\r\n                else if  ((SourceOperationType == \"Replicate\") && (SourceParent == \"\"))\r\n                {\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyJobs.Contains(SourceJobId)))\r\n                    {\r\n                        ReadyJobs.Add(SourceJobId);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledJobs.Contains(SourceJobId)))\r\n                    {\r\n                        CancelledJobs.Add(SourceJobId);\r\n                    }\r\n\r\n\r\n                    if ((SourceIndentityState == \"Ready\") && (!ReadyRepSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        ReadyRepSources.Add(SourceIdentityName);\r\n                    }\r\n                    else if ((SourceIndentityState == \"Cancelled\") && (!CancelledRepSources.Contains(SourceIdentityName)))\r\n                    {\r\n                        CancelledRepSources.Add(SourceIdentityName);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            var uniqueInList = CancelledJobs.Where(item => !ReadyJobs.Contains(item)).ToList();\r\n\r\n            var jobIDs = jobs.Select(job => job.JobId).ToList();\r\n\r\n            string AllReadyCPSources = string.Join(\",\", ReadyCPSources);\r\n            string AllCancelledCPSources = string.Join(\",\", CancelledCPSources);\r\n            string AllReadyRepSources = string.Join(\",\", ReadyRepSources);\r\n            string AllCancelledRepSources = string.Join(\",\", CancelledRepSources);\r\n            string AllReadyJobs = string.Join(\",\", ReadyJobs);\r\n            string AllCancelledJobs = string.Join(\",\", CancelledJobs);\r\n            string OnlyCancelledJobs = string.Join(\",\", uniqueInList);\r\n            string AllJobs = string.Join(\",\", jobIDs);\r\n\r\n            bool CancelOrder = false;\r\n\r\n            bool allInList2 = AllJobs.All(x => OnlyCancelledJobs.Contains(x));\r\n\r\n            if (allInList2 == true)\r\n            {\r\n                CancelOrder = true;\r\n            }\r\n\r\n\r\n\r\n\r\n            Serilog.Log.Information(\"AllReadyCPSources= {AllReadyCPSources}\", AllReadyCPSources.ToString());\r\n            Serilog.Log.Information(\"AllCancelledCPSources= {AllCancelledCPSources}\", AllCancelledCPSources.ToString());\r\n            Serilog.Log.Information(\"AllReadyRepSources= {AllReadyRepSources}\", AllReadyRepSources.ToString());\r\n            Serilog.Log.Information(\"AllCancelledRepSources= {AllCancelledRepSources}\", AllCancelledRepSources.ToString());\r\n            Serilog.Log.Information(\"AllReadyJobs= {AllReadyJobs}\", AllReadyJobs.ToString());\r\n            Serilog.Log.Information(\"AllCancelledJobs= {AllCancelledJobs}\", AllCancelledJobs.ToString());\r\n            Serilog.Log.Information(\"OnlyCancelledJobs= {OnlyCancelledJobs}\", OnlyCancelledJobs.ToString());\r\n            Serilog.Log.Information(\"AllJobs= {AllJobs}\", AllJobs.ToString());\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "DebugCheckAllQueuedSources",
      "code": "#r ScriptTools.dll\r\n\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing ScriptTools;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\n    public class DebugCheckAllQueuedSources\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            var DebugCheckAllQueuedSources = new ScriptTools.Tools();\r\n            await DebugCheckAllQueuedSources.RunAsync(\"Ronen\", client, context, cancellationToken);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "SetRemainingSourcesToTransferred",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetRemainingSourcesToTransferred\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            string ProcessedRacks = context.GetGlobalVariableValue<string>(\"IOC Processed Racks\");\r\n       /    string ProcessedCrashPlates = context.GetGlobalVariableValue<string>(\"IOC Processed Crash Plates\");\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n            foreach (var source in sources)\r\n            {\r\n                string SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                string SourceIndentityState = source.Status.ToString();\r\n\r\n                if (ProcessedRacks.Contains(SourceIdentityName))\r\n                {\r\n                    var currentStatus = SourceIndentityState;\r\n                    source.Properties.SetValue(\"Status\", \"Transporting\");\r\n                    _identityHelper.Register(source, 0, RequestedOrder);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            }\r\n            public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    }
  ],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "screens": [],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.Ansible [#FFFFFF:0:0]",
  "color": "#FFC400FF",
  "name": "State Machine V2",
  "category": "Workflows",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}