{
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
            "timeout": "00:30:00",
            "inputParameters": [
              {
                "name": "Barcode",
                "value": "%Input.SourceDetails%",
                "valueType": "String",
                "defaultValue": "",
                "valueOptions": [],
                "validationRules": [],
                "tags": [
                  "Unknown",
                  "#DarkMagenta"
                ]
              }
            ],
            "outputParameterMapping": [
              {
                "name": "SourceBarcodesInCP",
                "mapToGlobalVariableName": "SourcesInCP",
                "parameterType": "String"
              },
              {
                "name": "AllREMPsInCP",
                "mapToGlobalVariableName": "REMPSourcesToReturnFromCP",
                "parameterType": "String"
              },
              {
                "name": "All50sInCP",
                "mapToGlobalVariableName": "50TipsToReturnFromCP",
                "parameterType": "String"
              },
              {
                "name": "All200sInCP",
                "mapToGlobalVariableName": "200TipsToReturnFromCP",
                "parameterType": "String"
              },
              {
                "name": "AllCapsFound",
                "mapToGlobalVariableName": "CapsToReturnFromCP",
                "parameterType": "String"
              },
              {
                "name": "Module ID",
                "parameterType": "String"
              }
            ],
            "name": "Script.CPCheckSourceRacksInCP",
            "description": "Order: Script.CPCheckSourceRacksInCP",
            "guid": "4b51fbb9-d079-434c-816b-d893a23eee8a",
            "isAsync": false,
            "allowAsync": true,
            "iconUrl": "PackIcon.AlarmClock [#FFFFFF:0:0]",
            "backgroundColorHex": "#FFBFFF00",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
            "left": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                  "inputParameters": [
                    {
                      "name": "Timeout (min)",
                      "value": "10",
                      "valueType": "Double",
                      "defaultValue": "10"
                    },
                    {
                      "name": "From",
                      "value": "CP",
                      "valueType": "String"
                    },
                    {
                      "name": "To",
                      "value": "IO",
                      "valueType": "String"
                    },
                    {
                      "name": "Barcodes",
                      "value": "%REMPSourcesToReturnFromCP%",
                      "valueType": "String"
                    },
                    {
                      "name": "Metadata",
                      "value": "Orchestrator Used=True;Source Orchestrator Workflow=REMP Source;Destination Zone=Returns;Destination Orchestrator Workflow=Source;Labware Types=%Current Labware%",
                      "valueType": "String"
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "Barcodes",
                      "parameterType": "String"
                    },
                    {
                      "name": "Request ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Transport",
                  "description": "Transport",
                  "helpText": "Transports the specified barcode(s) from one station to another.",
                  "guid": "4460f686-88f7-4a4d-8bb5-5715af79309a",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                  "backgroundColorHex": "#FF666666",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "910f08eb-dcb3-40fb-b5d1-cbdc862813bf",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "right": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                        "inputParameters": [
                          {
                            "name": "Timeout (min)",
                            "value": "10",
                            "valueType": "Double",
                            "defaultValue": "10"
                          },
                          {
                            "name": "From",
                            "value": "CP",
                            "valueType": "String"
                          },
                          {
                            "name": "To",
                            "value": "IO",
                            "valueType": "String"
                          },
                          {
                            "name": "Barcodes",
                            "value": "%CapsToReturnFromCP%",
                            "valueType": "String"
                          },
                          {
                            "name": "Metadata",
                            "value": "Orchestrator Used=True;Source Orchestrator Workflow=Cap Holders;Destination Zone=Cap Holders;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=Default",
                            "valueType": "String"
                          }
                        ],
                        "outputParameterMapping": [
                          {
                            "name": "Barcodes",
                            "parameterType": "String"
                          },
                          {
                            "name": "Request ID",
                            "parameterType": "String"
                          }
                        ],
                        "name": "Transport",
                        "description": "Transport",
                        "helpText": "Transports the specified barcode(s) from one station to another.",
                        "guid": "ae1e066a-40a1-4f9e-b225-2c94d7d54274",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                        "backgroundColorHex": "#FF666666",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "1260b585-059c-44ea-ac95-6a20a8f71638",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "left": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "10",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "CP",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "IO",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "%50TipsToReturnFromCP%",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Orchestrator Used=True;Source Orchestrator Workflow=Consumable Storage;Destination Zone=50uL Tecan Tips;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=%Current Labware%",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Transport",
                              "description": "Transport",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "guid": "bfb35ba7-172b-4e9f-a4c8-772d0db7c223",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "backgroundColorHex": "#FF666666",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "c7912795-6edf-4b97-a5a8-bb56d3bfb517",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "10",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "CP",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "IO",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "%200TipsToReturnFromCP%",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Orchestrator Used=True;Source Orchestrator Workflow=Consumable Storage;Destination Zone=200uL Tecan Tips;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=%Current Labware%",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Transport",
                              "description": "Transport",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "guid": "159c4faf-52a2-4142-9afc-c67dc8dd6599",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "backgroundColorHex": "#FF666666",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "8169dbbc-aa9c-411d-96ba-c0eaf4ee6103",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "name": "Parallel",
                        "description": "Parallel",
                        "helpText": "Executes two sequences in parallel",
                        "guid": "a8ee58ae-9693-4183-bc05-e29f924126ca",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "backgroundColorHex": "#FF72EAFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "156b2592-678d-48bb-a158-54a33660acca",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "name": "Parallel",
                  "description": "Parallel",
                  "helpText": "Executes two sequences in parallel",
                  "guid": "23be89b4-a03b-4f8f-b1c7-e65284929646",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "backgroundColorHex": "#FF72EAFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "50213f02-e5c9-48a4-ad68-2225d1184093",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "name": "Parallel",
            "description": "Parallel",
            "helpText": "Executes two sequences in parallel",
            "guid": "3ad96834-69d6-4783-87db-a04c00c9f054",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
            "backgroundColorHex": "#FF72EAFF",
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "12dfbace-63a5-4c2b-8825-46e7ebd79925",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "parameters": [
    {
      "name": "LabwareTwoValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "ValidatedSources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Sources Not Available",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Output.Error",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoMetadata",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeMetadata",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneMetadata",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeMetadata ",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "WorkflowNumber",
      "value": "1",
      "valueType": "Integer",
      "defaultValue": "1",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "50Found",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "200Found",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TecanTipRacksDay",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TecanTipRacksSent",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TipsEventFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsUsed",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "AssayPlatesLabwareTwo",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPPreDilutionRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryRunRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryEventFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwarePreDilutionStorage",
      "value": "96 SWP Greiner PP 340ul",
      "valueType": "String",
      "defaultValue": "96 SWP Greiner PP 340ul",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwarePreDiluteValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourcesInCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IsDayEnd",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10Required",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips30Required",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity10Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity30Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalVelocity10TipBoxes",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalVelocity30TipBoxes",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips30PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REMPSourcesToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "200TipsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "50TipsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "scripts": [
    {
      "name": "SetMetadataForDestinationLabware",
      "code": "reference c:\\Program Files (x86)\\Green Button Go\\Newtonsoft.Json.dll\r\nreference c:\\Program Files (x86)\\Green Button Go\\BioSero.GreenButtonGo.Scripting.dll\r\nreference c:\\Program Files (x86)\\Green Button Go\\BioSero.Utilities.dll\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing System.Data;\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetMetadataForDestinationLabware : WorkflowScript\r\n    {\r\n        public SetMetadataForDestinationLabware(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           string LabwareOneValidated = (string)parameters[\"LabwareOneValidationResults\"]; \r\n           string LabwareOne = (string)parameters[\"Input.LabwareOneName\"]; \r\n           string LabwareTwoValidated = (string)parameters[\"LabwareTwoValidationResults\"]; \r\n           string LabwareTwo = (string)parameters[\"Input.LabwareTwoName\"]; \r\n           string LabwareThreeValidated = (string)parameters[\"LabwareThreeValidationResults\"]; \r\n           string LabwareThree = (string)parameters[\"Input.LabwareThreeName\"]; \r\n           List<string> LabwareOneList = LabwareOneValidated.Split(';').ToList();\r\n           List<string> LabwareTwoList = LabwareTwoValidated.Split(';').ToList();\r\n           List<string> LabwareThreeList = LabwareThreeValidated.Split(';').ToList();\r\n           string LabwareOneMetadata = \"\";\r\n           string LabwareTwoMetadata = \"\";\r\n           string LabwareThreeMetadata = \"\";\r\n           \r\n           \r\n           if (LabwareOneList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareOneMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareOne + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareOneMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareOne + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n           if (LabwareTwoList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareTwoMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareTwo + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareTwoMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareTwo + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n           if (LabwareThreeList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareThreeMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareThree + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareThreeMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareThree + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n          /*  System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneValidated.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoValidated.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeValidated.ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneList[0].ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoList[0].ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeList[0].ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOne.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwo.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThree.ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneMetadata.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoMetadata.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeMetadata.ToString()});*/\r\n              \r\n              \r\n\t    parameters[\"LabwareOneMetadata\"] = LabwareOneMetadata;\r\n\t    parameters[\"LabwareTwoMetadata\"] = LabwareTwoMetadata;\r\n\t    parameters[\"LabwareThreeMetadata\"] = LabwareThreeMetadata;\r\n              \r\n              \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CountRequiredVelocityRacksRequired",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CountRequiredVelocityRacksRequired : WorkflowScript\r\n    {\r\n        public CountRequiredVelocityRacksRequired(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           int CherryPickTotal =(int)parameters[\"Input.CherryPickTotal\"];\r\n           int WorkflowNumber =  (int)parameters[\"WorkflowNumber\"];\r\n           \r\n           int VelocityTipsRequired = 0;\r\n           \r\n           switch (WorkflowNumber) // Match Expression - can be any non-null expression\r\n            {\r\n                case 1: // Case Label 1\r\n                    // Switch Section START\r\n                    VelocityTipsRequired = 1 + CherryPickTotal + CherryPickTotal;\r\n                    break; // Switch Section END\r\n            }\r\n\t    parameters[\"VelocityTipsRequired\"] = VelocityTipsRequired;\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "SetMetadataForLabware",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetMetadataForLabware : WorkflowScript\r\n    {\r\n        public SetMetadataForLabware(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n            //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 ECHO PP 65ul;Destination Orchestrator Workflow=Consumables Carousel\r\n         //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 MTP 120ul;Destination Orchestrator Workflow=Consumables Carousel\r\n           //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 STbR 80ul;Destination Orchestrator Workflow=Consumables Carousel\r\n           \r\n           \r\n            string LabwareOneName = (string)parameters[\"Input.LabwareOneName\"];\r\n            string LabwareTwoName = (string)parameters[\"Input.LabwareTwoName\"];\r\n            string LabwareThreeName = (string)parameters[\"Input.LabwareThreeName\"];\r\n\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckTecanTipsSentStatus",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckTecanTipsSentStatus : WorkflowScript\r\n    {\r\n        public CheckTecanTipsSentStatus(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             TipsSentEvent transfer = new TipsSentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<TipsSentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "CreateTipsEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateTipsEvent : WorkflowScript\r\n    {\r\n        public CreateTipsEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             TipsSentEvent transfer = new TipsSentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<TipsSentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n\t    parameters[\"TecanTipRacksSent\"] = 0;\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "CheckForTipsEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForTipsEvent : WorkflowScript\r\n    {\r\n        public CheckForTipsEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        \r\n            \r\n\t\t\t         EventSearchParameters searchParams = new EventSearchParameters()\r\n\t\t\t{\r\n\t\t\t  Topic = \"Biosero.Scripting.TipsSentEvent\",\r\n\t\t\t  Start = DateTime.Now.Date,\r\n\t\t\t  ActorId = \"Roche-Orchestrator\"\r\n\t\t\t};\r\n\r\n\t\t\tvar events = Environment.QueryClient.GetEvents(searchParams, 10000, 0)?.ToList() ?? new List<EventMessage>();\r\n\t\t\t\r\n               \r\n\t    parameters[\"TipsEventFound\"] = events.Count()>0;\r\n\t    \r\n\t    \r\n\t    EventSearchParameters searchParameters = new EventSearchParameters()\r\n\t       {\r\n\t       Topic = \"Biosero.Scripting.InventorySentEvent\",\r\n\t       Start = DateTime.Now.Date,\r\n\t       ActorId = \"Roche-Orchestrator\"\r\n\t       };\r\n\t       \r\n\t      var events1 = Environment.QueryClient.GetEvents(searchParameters, 10000, 0)?.ToList() ?? new List<EventMessage>(); \r\n\t      \r\n\t      parameters[\"InventoryEventFound\"] = events1.Count()>0;\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "IsJobRequiringPreDilutionPlate",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class IsJobRequiringPreDilutionPlate : WorkflowScript\r\n    {\r\n        public IsJobRequiringPreDilutionPlate(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n            int TecanJob = (int)parameters[\"Input.Tecan JobID\"];\r\n            \r\n            List<int> TecanJobList = new List<int> {424};\r\n            \r\n            bool isInList = TecanJobList.Contains(TecanJob);\r\n         \r\n         parameters [\"CPPreDilutionRequired\"] = isInList;\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateInventoryEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateInventoryEvent : WorkflowScript\r\n    {\r\n        public CreateInventoryEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             InventorySentEvent transfer = new InventorySentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<InventorySentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n\t  //  parameters[\"InventoryRan\"] = 0;\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class InventorySentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "RemoveSourcesAlreadyOnCPWC",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RemoveSourcesAlreadyOnCPWC : WorkflowScript\r\n    {\r\n        public RemoveSourcesAlreadyOnCPWC(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           \r\n           string SourceDetails = (string)parameters[\"Input.SourceDetails\"]; \r\n           string SourcesInCP = (string)parameters[\"SourcesInCP\"]; \r\n\t  string[] SourceDetailsvalues = SourceDetails.Split(',');\r\n\t  string[] SourcesInCPvalues = SourcesInCP.Split(','); \r\n\t  bool ItemFound = false;\r\n\t  List<string> updatedItems = new List<string>();\r\n\t\r\n\tforeach (string item in SourceDetailsvalues)\r\n\t{\r\n\t        ItemFound = false;\r\n\t\tforeach (string item1 in SourcesInCPvalues)\r\n\t\t{\r\n\t\t  if(item==item1)\r\n\t\t     {\r\n\t\t     ItemFound = true;\r\n\t\t     }\r\n\t\t}\r\n\t\t\r\n\t\tif (ItemFound==false)\r\n\t\t  {\r\n\t\t   updatedItems.Add(item);\r\n\t\t  }\r\n\t}\r\n          string combinedString = string.Join(\",\", updatedItems.Select(item => item.ToUpper()));\r\n\t    parameters[\"Input.SourceDetails\"] = combinedString;\r\n           \r\n           \r\n\t//\t    SourceDetailsvalues.Remove(item);\r\n           \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckForEndOfTheDay",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForEndOfTheDay : WorkflowScript\r\n    {\r\n        public CheckForEndOfTheDay(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        DateTime currentTime = DateTime.Now;\r\n        DateTime targetTime = DateTime.Today.AddHours(16).AddMinutes(45);\r\n\r\n        if (currentTime > targetTime)\r\n        {\r\n             parameters[\"IsDayEnd\"] = true;\r\n        }\r\n        \r\n        \r\n        \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "RequiredVelocityTips",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RequiredVelocityTips : WorkflowScript\r\n    {\r\n        public RequiredVelocityTips(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        \r\n        \r\n                /*\r\n        Workflow requires Replicate and SD\r\n\r\nReplicate = 1 tip per 1 source\r\nSD - 1 tip per 1 dest\r\n\r\nWorflow 1 required - \r\n\r\nSD on the CP plate created for Labware type 2 \r\n\r\nTrasnsfer  to labware type 1 \r\n\r\nReplication to  labware type 3 \r\n\r\nexample:\r\n\r\n3 sources in order - creating 2 plates\r\n\r\n2  CP plated created \r\n\r\nRequiring - 3 replicates\r\n\r\nNeeded:\r\n\r\n1 Velocity rack for DMSO\r\n3 Velocity racks for the SD step\r\n3 Velocity racks for the Rep step\r\n\r\n \r\n        */\r\n           int LabwareTypeOneTotal = (int)parameters[\"Input.LabwareOneTotal\"]; \r\n           double LabwareTypeOneVolume = (double)parameters[\"Input.LabwareOneVolume\"]; \r\n           int LabwareOneST10Total = 0;\r\n           int LabwareOneST30Total = 0;\r\n           double LabwareTypeThreeVolume = (double)parameters[\"Input.LabwareThreeVolume\"]; \r\n           int LabwareThreeST10Total = 0;\r\n           int LabwareThreeST30Total = 0;\r\n           int LabwareTypeThreeTotal = (int)parameters[\"Input.LabwareThreeTotal\"]; \r\n           int CherryPickTotal = (int)parameters[\"Input.CherryPickTotal\"]; \r\n           int WorkflowNumber = (int)parameters[\"WorkflowNumber\"]; \r\n           int V10WorkflowStepsTotal = 0;\r\n           int V30WorkflowStepsTotal = 0;\r\n       //    string VelocityTypeLabwareOne = \"\";\r\n       //    string VelocityTypeLabwarThreee = \"\";\r\n           string VelocityTips10PlaceholderBarcodes = \"\";\r\n           string VelocityTips30PlaceholderBarcodes = \"\";\r\n           \r\n           \r\n           if (LabwareTypeOneVolume <=7)\r\n             {\r\n             LabwareOneST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>7) && (LabwareTypeOneVolume <=28))\r\n             {\r\n             LabwareOneST30Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>28) && (LabwareTypeOneVolume <=35))\r\n             {\r\n             LabwareOneST30Total = 1;\r\n             LabwareOneST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>35) && (LabwareTypeOneVolume <=42))\r\n             {\r\n             LabwareOneST30Total = 2;\r\n             }\r\n           \r\n           if ( (LabwareTypeThreeVolume <=7) && (LabwareTypeThreeVolume > 0))\r\n             {\r\n             LabwareThreeST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>7) && (LabwareTypeThreeVolume <=28))\r\n             {\r\n             LabwareThreeST30Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>28) && (LabwareTypeThreeVolume <=35))\r\n             {\r\n             LabwareThreeST30Total = 1;\r\n             LabwareThreeST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>35) && (LabwareTypeThreeVolume <=42))\r\n             {\r\n             LabwareThreeST30Total = 2;\r\n             }\r\n             \r\n    //       System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xx.txt\", new string []{ LabwareThreeST10Total.ToString()});\r\nswitch (WorkflowNumber)\r\n{\r\n    case 1:\r\n        V10WorkflowStepsTotal = 1 +( CherryPickTotal*LabwareOneST10Total) +( CherryPickTotal*LabwareThreeST10Total);\r\n        V30WorkflowStepsTotal = ( CherryPickTotal*LabwareOneST30Total) +( CherryPickTotal*LabwareThreeST30Total);\r\n        \r\n        break;\r\n  //  default:\r\n //       Console.WriteLine(\"Other day\");\r\n   //     break;\r\n}\r\n        \r\n \r\n\t    parameters[\"TotalVelocity10TipBoxes\"] = V10WorkflowStepsTotal;\r\n\t    parameters[\"TotalVelocity30TipBoxes\"] = V30WorkflowStepsTotal;\r\n           \r\n\t\r\n\tfor (int i = 1; i <= (V10WorkflowStepsTotal); i++)\r\n\t\t{\r\n\t\t    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes +\"Velocity10_\" +  i + \",\";\r\n\t\t}\r\n\t    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes.TrimEnd(',');\r\n\t    parameters[\"VelocityTips10PlaceholderBarcodes\"] = VelocityTips10PlaceholderBarcodes;\r\n           \r\n\t\r\n\tfor (int i = 1; i <= (V30WorkflowStepsTotal); i++)\r\n\t\t{\r\n\t\t    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes +\"Velocity30_\" +  i + \",\";\r\n\t\t}\r\n\t    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes.TrimEnd(',');\r\n\t    parameters[\"VelocityTips30PlaceholderBarcodes\"] = VelocityTips30PlaceholderBarcodes;\r\n\t    \r\n\t//    System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xs.txt\", new string []{ WorkflowStepsTotal.ToString()});\r\n        \r\n\t\r\n\t\r\n        }\r\n    }\r\n}",
      "language": "C#"
    }
  ],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "screens": [],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.PresenceEnter [#FFFFFF:20:0]",
  "color": "#FFFF007E",
  "name": "Return All From CP to IOC",
  "category": "Workflows",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}