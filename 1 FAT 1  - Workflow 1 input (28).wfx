{
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
            "parameterName": "Allowed Order Priorities",
            "leftOperand": "Low,Medium,High",
            "isUnaryOperation": true,
            "operator": "Add",
            "rightOperand": "",
            "name": "Set Parameter",
            "description": "Allowed Order Priorities = Low,Medium,High",
            "helpText": "Sets a parameter",
            "guid": "29a24ad8-a1f0-4e84-b30b-d2658c800eaa",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
            "backgroundColorHex": "#FFA8E281",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Create Orders",
            "name": "Run Script",
            "description": "Run Script: Create Orders",
            "helpText": "Runs the specified script",
            "guid": "449ccce1-6b6b-427e-aef4-dbac9b070e10",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Populate_Placeholders_Destination_Barcodes",
            "name": "Run Script",
            "description": "Run Script: Populate_Placeholders_Destination_Barcodes",
            "helpText": "Runs the specified script",
            "guid": "dfd962bf-d8a6-42db-9b08-95719ac586fa",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
            "yes": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "IsJobRequiringPreDilutionPlate - New",
                        "name": "Run Script",
                        "description": "Run Script: IsJobRequiringPreDilutionPlate - New",
                        "helpText": "Runs the specified script",
                        "guid": "f97cb3c5-0f3e-465b-b595-9af14a4c4524",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                        "parameterName": "TecanTipRacksSent",
                        "leftOperand": "1",
                        "isUnaryOperation": true,
                        "operator": "Add",
                        "rightOperand": "",
                        "name": "Set Parameter",
                        "description": "TecanTipRacksSent = 1",
                        "helpText": "Sets a parameter",
                        "guid": "9c2f9346-9104-4981-bda5-3effe4cc448c",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                        "backgroundColorHex": "#FFA8E281",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "CheckForTipsEvent - New",
                        "name": "Run Script",
                        "description": "Run Script: CheckForTipsEvent - New",
                        "helpText": "Runs the specified script",
                        "guid": "8499f044-f768-47c4-a952-03a356979309",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "CreateEventForTips",
                              "name": "Run Script",
                              "description": "Run Script: CreateEventForTips",
                              "helpText": "Runs the specified script",
                              "guid": "85a2e55c-f60d-4909-aa50-2deeb3667675",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "TecanTipRacksSent",
                              "leftOperand": "0",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "TecanTipRacksSent = 0",
                              "helpText": "Sets a parameter",
                              "guid": "95c6c7cf-13ea-4a30-975d-8f515a39d86d",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "ed95d83b-a04b-4ec0-a958-ddef4879bf7a",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "TecanTipRacksSent",
                              "leftOperand": "1",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "TecanTipRacksSent = 1",
                              "helpText": "Sets a parameter",
                              "guid": "f416b034-361e-4b8c-872d-d89da97abf55",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "64777c90-51f9-4e14-8b5c-4b28e340fbf8",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "TipsEventsFound",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "name": "Branch",
                        "description": "Branch if TipsEventsFound = False",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "1c0c7de5-b83b-4fc5-96b9-7e6f8456170d",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "CreateInventoryEvent - New",
                              "name": "Run Script",
                              "description": "Run Script: CreateInventoryEvent - New",
                              "helpText": "Runs the specified script",
                              "guid": "fed98e9c-3180-45c2-ae03-b715cfc989c7",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "InventoryRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "InventoryRequired = True",
                              "helpText": "Sets a parameter",
                              "guid": "7a0c7c46-5bec-4f5d-b02c-ecb16541eab6",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "InventoryStackCarouselRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "InventoryStackCarouselRequired = True",
                              "helpText": "Sets a parameter",
                              "guid": "652ab3d3-3f6c-4cd1-9a96-62d09343747d",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "InventorySkylineRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "InventorySkylineRequired = True",
                              "helpText": "Sets a parameter",
                              "guid": "ce8ab7d9-8433-4a13-9d2c-d8a76016f13e",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "InventoryHotelsCarouselRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "InventoryHotelsCarouselRequired = True",
                              "helpText": "Sets a parameter",
                              "guid": "40c743d5-e1df-44a2-8a02-c2e49ae7bf06",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                              "parameterName": "InventoryIncubatorRequired",
                              "leftOperand": "True",
                              "isUnaryOperation": true,
                              "operator": "Add",
                              "rightOperand": "",
                              "name": "Set Parameter",
                              "description": "InventoryIncubatorRequired = True",
                              "helpText": "Sets a parameter",
                              "guid": "b1a6b908-b233-47d6-b61f-a0dca16c56c0",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                              "backgroundColorHex": "#FFA8E281",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "a79a323d-5604-4b81-96f0-f278bffb73d4",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "b82cccca-7cdf-417d-b3d4-7c500044eedb",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "InventoryEventsFound",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "name": "Branch",
                        "description": "Branch if InventoryEventsFound = False",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "70f79c34-6095-42ea-b53c-0bc1c48cfc87",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "5875aff6-156b-47a6-b07c-41cc843e60a4",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "left": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "Barcode",
                                  "value": "%Input.SourceBarcodes%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "Unknown",
                                    "#DarkMagenta"
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "SourceBarcodesInCP",
                                  "mapToGlobalVariableName": "SourcesInCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "AllREMPsInCP",
                                  "mapToGlobalVariableName": "REMPSourcesToReturnFromCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "All50sInCP",
                                  "mapToGlobalVariableName": "50TipsToReturnFromCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "All200sInCP",
                                  "mapToGlobalVariableName": "200TipsToReturnFromCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "AllCapsFound",
                                  "mapToGlobalVariableName": "CapsToReturnFromCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "SourcesNotFound",
                                  "mapToGlobalVariableName": "SourcesNotInCP",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Script.CPCheckSourceRacksInCP",
                              "description": "Order: Script.CPCheckSourceRacksInCP",
                              "guid": "134467fd-a6a3-415e-9779-35f285022642",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.AlarmClock [#FFFFFF:0:0]",
                              "backgroundColorHex": "#0000FF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "RemoveSourcesAlreadyOnCPWC - New",
                              "name": "Run Script",
                              "description": "Run Script: RemoveSourcesAlreadyOnCPWC - New",
                              "helpText": "Runs the specified script",
                              "guid": "746145bd-1dce-4aa6-97b1-7976e5f8dc5a",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "886c7fbf-7252-4053-987b-e91d9246fb86",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "RequiredVelocityTips - New",
                              "name": "Run Script",
                              "description": "Run Script: RequiredVelocityTips - New",
                              "helpText": "Runs the specified script",
                              "guid": "47287ab3-c5b6-4f14-8276-b4dd819c8042",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "4e37d103-6449-4840-a889-13349eb0755f",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "name": "Parallel",
                        "description": "Parallel",
                        "helpText": "Executes two sequences in parallel",
                        "guid": "685f344a-7391-4355-a5e6-cda685cdf206",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "backgroundColorHex": "#FF72EAFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "0437ee13-9ffb-475c-8a3d-e7a68c25871e",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "name": "Parallel",
                  "description": "Parallel",
                  "helpText": "Executes two sequences in parallel",
                  "guid": "b75f5a93-91c3-47a0-8fc7-f35c43da8760",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "backgroundColorHex": "#FF72EAFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "timeout": "00:30:00",
                  "inputParameters": [
                    {
                      "name": "SourceDetails",
                      "value": "%Input.SourceBarcodes%",
                      "valueType": "String",
                      "defaultValue": "SIM BC5,SIM BC6",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    },
                    {
                      "name": "AssayLabwareTypes",
                      "value": "%LabwareTypesForOrders%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    },
                    {
                      "name": "AssayLabwareTypeTotals",
                      "value": "%LabwareTypesTotalsForOrders%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "SourceDetails",
                      "mapToGlobalVariableName": "CPFoundOutputs",
                      "parameterType": "String"
                    },
                    {
                      "name": "SourceBarcodesNotFound",
                      "mapToGlobalVariableName": "CPNotFoundOutputs",
                      "parameterType": "String"
                    },
                    {
                      "name": "AssayTypesNotFound",
                      "mapToGlobalVariableName": "CPAssayTypesNotFound",
                      "parameterType": "String"
                    },
                    {
                      "name": "InsufficientLabwareAssayTypes",
                      "mapToGlobalVariableName": "CPAssayTypesInsuffientAmount",
                      "parameterType": "String"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Script.OrchCheckInputVariables",
                  "description": "Order: Script.OrchCheckInputVariables",
                  "guid": "89142298-c1b6-4dca-9a4b-d7627c16ef40",
                  "isAsync": false,
                  "allowAsync": true,
                  "iconUrl": "PackIcon.Newspaper [#FFFFFF:0:0]",
                  "backgroundColorHex": "#FFFF0022",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "timeout": "00:30:00",
                  "inputParameters": [
                    {
                      "name": "Sources",
                      "value": "%CPNotFoundOutputs%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": {
                        "$type": "System.String[], System.Private.CoreLib",
                        "$values": []
                      },
                      "validationRules": [],
                      "tags": [
                        ""
                      ]
                    },
                    {
                      "name": "AssayTypes",
                      "value": "%CPAssayTypesNotFound%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": {
                        "$type": "System.String[], System.Private.CoreLib",
                        "$values": []
                      },
                      "validationRules": [],
                      "tags": [
                        ""
                      ]
                    },
                    {
                      "name": "AssayTypeTotals",
                      "value": "%CPAssayTypesInsuffientAmount%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": {
                        "$type": "System.String[], System.Private.CoreLib",
                        "$values": []
                      },
                      "validationRules": [],
                      "tags": [
                        ""
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "Error",
                      "mapToGlobalVariableName": "Validation Error",
                      "parameterType": "String"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Process CP Script Validated Results",
                  "description": "Order: Process CP Script Validated Results",
                  "guid": "dab8f568-286d-4804-820e-7beda5cd80d6",
                  "isAsync": false,
                  "allowAsync": true,
                  "iconUrl": "PackIcon.Proxy [#FFFFFF:0:0]",
                  "backgroundColorHex": "#FF40FF00",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "yes": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "6011eb85-8396-4414-8d31-136f7b0fa728",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                                    "description": "Log: If an error related to sources\r\n\r\nIf all barcodes are in CP",
                                    "text": "If an error related to sources\r\n\r\nIf all barcodes are in CP",
                                    "appendNewLine": false,
                                    "name": "Log",
                                    "helpText": "Writes to the log",
                                    "guid": "38e69195-4410-48ce-96e5-1b8fed881605",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                                    "backgroundColorHex": "#FFC69AE8",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                    "seconds": 10.0,
                                    "minutes": 0.0,
                                    "hours": 0.0,
                                    "name": "Delay",
                                    "description": "Delay 0:0:10",
                                    "helpText": "Delays the workflow for the specified amount of time",
                                    "guid": "2c03a5d0-6cb0-41c3-9f46-f71bb5309412",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                    "backgroundColorHex": "#FF26A9FF",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "REMPThawTime",
                                        "value": "%Input.Thaw Time%",
                                        "valueType": "Double",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "InventoryIncubator",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "InventorySkyline",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "InventoryStacksCarousel",
                                        "value": "False",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "InventoryHotelsCarousel",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SourceDetails",
                                        "value": "%SourcesNotInCP%",
                                        "valueType": "String",
                                        "defaultValue": "SIM BC5,SIM BC6",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "Current Orchestrator Workflow=Workflow 1;Orchestrator Used=True",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "Unknown",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "OrchestratorUsed",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeOneName",
                                        "value": "%Input.LabwareOneName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeTwoName",
                                        "value": "%Input.LabwareTwoName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeThreeName",
                                        "value": "%Input.LabwareThreeName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "InventoryOperationRequired",
                                        "value": "%InventoryRunRequired%",
                                        "valueType": "Boolean",
                                        "defaultValue": "True",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypePreDilution",
                                        "value": "%Input.LabwarePreDilutionName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "PreppedSourceDetails",
                                        "mapToGlobalVariableName": "Output.OutputRempRacks",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Cancel Order",
                                        "mapToGlobalVariableName": "CancelOrder",
                                        "parameterType": "Boolean"
                                      },
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "REMP Preparation",
                                    "description": "Order: REMP Preparation",
                                    "guid": "9cba5b39-f593-4bea-837d-ed09688ba41d",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "iconUrl": "PackIcon.MagnifyPlus [#FFFFFF:0:0]",
                                    "backgroundColorHex": "#FF00FF73",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "7d8a8e72-f3ba-4932-99d2-10765c77f79c",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "Input.SourceBarcodes",
                                "right": "%SourcesInCP%",
                                "evaluator": "Equal"
                              },
                              "name": "Branch",
                              "description": "Branch if Input.SourceBarcodes = %SourcesInCP%",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "guid": "43096a52-f451-4165-ae1a-4dd3e8724b1f",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "backgroundColorHex": "#FFDEDE81",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "451fa888-0054-4304-bde0-b8db37d5a50b",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: if there is an error not related to sources - STOP",
                              "text": "if there is an error not related to sources - STOP",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "8801c437-d6b9-4710-94b9-5d415807d7f2",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                              "message": "%Validation Error%",
                              "name": "Error",
                              "description": "Error: %Validation Error%",
                              "helpText": "Generates and error in the workflow with the specified message",
                              "guid": "2adefef7-ee96-42b8-9135-21a8235822cc",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFFF0000",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "54c59333-2d14-40a1-9807-dc3d1b67c4a9",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "Input.SourceBarcodes",
                          "right": "%ValidatedSources%",
                          "evaluator": "NotEqual"
                        },
                        "name": "Branch",
                        "description": "Branch if Input.SourceBarcodes ≠ %ValidatedSources%",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "dfed0719-97e3-4c94-8acf-5beaf0a9478e",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                              "sequence": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "Barcode",
                                        "value": "%Output.OutputRempRacks%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "Unknown",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "IOCRunInventoryRequired",
                                        "value": "%InventoryRunRequired%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "SufficientIOCSpace",
                                        "mapToGlobalVariableName": "SufficientSpaceForOrderLabware",
                                        "parameterType": "Boolean"
                                      },
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Script.Verify Sufficient Space For CP Transport",
                                    "description": "Order: Script.Verify Sufficient Space For CP Transport",
                                    "guid": "3109214f-2034-4da8-bcb8-f31d8796869a",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "iconUrl": "PackIcon.AlarmBell [#FFFFFF:0:0]",
                                    "backgroundColorHex": "#0000FF",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "28557cc1-721b-4783-85fe-be2b4a84dcde",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "SufficientSpaceForOrderLabware",
                                "right": "False",
                                "evaluator": "Equal"
                              },
                              "evaluateAtEnd": false,
                              "loopCount": 0,
                              "loopType": "While",
                              "foreachCollectionVariable": "",
                              "foreachItemVariable": "",
                              "foreachDelimiter": ",",
                              "name": "Loop",
                              "description": "Loop While SufficientSpaceForOrderLabware = False",
                              "helpText": "A loop over a sequence of elements",
                              "guid": "15ecaaef-0cb5-4651-82eb-e68481a116b4",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                              "backgroundColorHex": "#FF08EAA7",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "SourcesForOrder",
                                  "value": "%Output.OutputRempRacks%",
                                  "valueType": "String",
                                  "defaultValue": "SIM BC3",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CPPDRequired",
                                  "value": "%CPPreDilutionRequired%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "PDPPlaceholderBarcodes",
                                  "value": "%PDPPlaceholderBarcodes%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwarePDMetadata",
                                  "value": "Source Orchestrator Workflow=%LabwarePreDilutionStorage%;Labware Types=%Input.LabwarePreDilutionName%;Destination Orchestrator Workflow=%LabwarePreDilutionStorage%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CapsPlaceholderBarcodes",
                                  "value": "%CapsPlaceholderBarcodes%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "TecanTipsSent",
                                  "value": "%TecanTipRacksSent%",
                                  "valueType": "Integer",
                                  "defaultValue": "1",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CPAssayLabwareTypes",
                                  "value": "%CPLabwareTypesForOrders%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CPAssayLabwareTypeTotals",
                                  "value": "%CPLabwareTypeTotalsForOrders%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Workflow 1 -  FAT1 CP Transport",
                              "description": "Order: Workflow 1 -  FAT1 CP Transport",
                              "guid": "5c250ae7-7410-40ec-b44a-891455f4a831",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.AlarmLight [#FFFFFF:0:0]",
                              "backgroundColorHex": "#FF0017FF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "yes": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "0b0164df-5d1a-446f-ab15-40ae357a6d08",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "Barcodes",
                                        "value": "%Output.OutputRempRacks%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "Priority",
                                        "value": "%Input.Priority%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeOneTotal",
                                        "value": "%Input.LabwareOneTotal%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeTwoTotal",
                                        "value": "%Input.LabwareTwoTotal%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeThreeTotal",
                                        "value": "%Input.LabwareThreeTotal%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "CherryPickTotal",
                                        "value": "%Input.CherryPickTotal%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeOneName",
                                        "value": "%Input.LabwareOneName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeTwoName",
                                        "value": "%Input.LabwareTwoName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTypeThreeName",
                                        "value": "%Input.LabwareThreeName%",
                                        "valueType": "String",
                                        "defaultValue": "384 DTbR 80ul plate",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "Job Number",
                                        "value": "%Input.JobNumber%",
                                        "valueType": "Integer",
                                        "defaultValue": "5",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "Tecan50Meatdata",
                                        "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=50uL Tecan Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true",
                                        "valueType": "String",
                                        "defaultValue": "Source Orchestrator Workflow=Consumables Carousel;Zone=50uL Tecan Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "Tecan200Meatdata",
                                        "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=200uL Tecan Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true",
                                        "valueType": "String",
                                        "defaultValue": "Source Orchestrator Workflow=Consumables Carousel;Zone=200uL Tecan Tips;Destination Orchestrator Workflow=Consumables Carousel;Placeholder=true",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "CPPreDilutionRequired",
                                        "value": "%Input.CPPreDilutionRequired%",
                                        "valueType": "Boolean",
                                        "defaultValue": "True",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwarePreDilutionName",
                                        "value": "%Input.LabwarePreDilutionName%",
                                        "valueType": "String",
                                        "defaultValue": "96 SWP Greiner PP 340ul",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "PDPMetadata",
                                        "value": "Source Orchestrator Workflow=%LabwarePreDilutionStorage%;Labware Types=%Input.LabwarePreDilutionName%;Destination Orchestrator Workflow=%LabwarePreDilutionStorage%",
                                        "valueType": "String",
                                        "defaultValue": "Source Orchestrator Workflow=%LabwarePreDilutionStorage%;Labware Types=%Input.LabwarePreDilutionName%;Destination Orchestrator Workflow=%LabwarePreDilutionStorage%",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "TecanTipRackSent",
                                        "value": "%TecanTipRacksSent%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "WorkflowNumber",
                                        "value": "%Input.WorkflowNumber%",
                                        "valueType": "Integer",
                                        "defaultValue": "1",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwareTwoMetadata",
                                        "value": "Source Orchestrator Workflow=Stack Carousel;Labware Types=384 MTP 120ul;Destination Orchestrator Workflow=Stack Carousel",
                                        "valueType": "String",
                                        "defaultValue": "Source Orchestrator Workflow=Stack Carousel;Labware Types=384 MTP 120ul;Destination Orchestrator Workflow=Stack Carousel",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "LabwarePDMetadata",
                                        "value": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=96 SWP Greiner PP 340ul;Destination Orchestrator Workflow=Cytomat Skyline",
                                        "valueType": "String",
                                        "defaultValue": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=96 SWP Greiner PP 340ul;Destination Orchestrator Workflow=Cytomat Skyline",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "TecanJobID",
                                        "value": "%Input.Tecan JobID%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "ThawTime",
                                        "value": "%Input.Thaw Time%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "RunInventoryRequired",
                                        "value": "%InventoryRunRequired%",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "MosaicJobNumber",
                                        "value": "%Input.Mosaic Job%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBLabwareOneMetadata",
                                        "value": "%LabwareOneMetadata%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBLabwareThreeMetadata",
                                        "value": "%LabwareThreeMetadata%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBDMSOVolume",
                                        "value": "%Input.DMSOVolume%",
                                        "valueType": "Double",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBLabwareOneVolume",
                                        "value": "%Input.LabwareOneVolume%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBLabwareThreeVolume",
                                        "value": "%Input.LabwareThreeVolume%",
                                        "valueType": "Integer",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBVelocity10TipBoxName",
                                        "value": "%Input.EBVelocity10TipBoxName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      },
                                      {
                                        "name": "EBVelocity30TipBoxName",
                                        "value": "%Input.EBVelocity30TipBoxName%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          ""
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "OutputRempRacks",
                                        "mapToGlobalVariableName": "ValidatedSources",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "CP Inject Process",
                                    "description": "Order: CP Inject Process",
                                    "guid": "7e379d7a-2599-43f1-bec1-7fd5e1913540",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "iconUrl": "PackIcon.VectorPolylineEdit [#FFFFFF:0:0]",
                                    "backgroundColorHex": "#FFFF2600",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "132a3c48-826f-483b-875d-291775521174",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "Output.OutputRempRacks",
                                "right": "",
                                "evaluator": "Equal"
                              },
                              "name": "Branch",
                              "description": "Branch if Output.OutputRempRacks = ",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "guid": "c7a5b687-e7e5-456d-93ee-85c9552a3ccd",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "backgroundColorHex": "#FFDEDE81",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [],
                              "outputParameterMapping": [
                                {
                                  "name": "EB2RunningJobs",
                                  "parameterType": "Double"
                                },
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Script.EB2CheckLabwareTypeForBarcode",
                              "description": "Order: Script.EB2CheckLabwareTypeForBarcode",
                              "guid": "d7b3e830-e114-4516-9812-731393280ead",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.PlantOutline [#FFFFFF:0:0]",
                              "backgroundColorHex": "#FF00FF2E",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "ThawTime",
                                  "value": "%Input.Thaw Time%",
                                  "valueType": "String",
                                  "defaultValue": "1",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "SourceBarcodeDetails",
                                  "value": "%Output.OutputRempRacks%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeOneName",
                                  "value": "%Input.LabwareOneName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeTwoName",
                                  "value": "%Input.LabwareTwoName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeThreeName",
                                  "value": "%Input.LabwareThreeName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareOneMetadata",
                                  "value": "Source Orchestrator Workflow=%LabwareOneStorage%;Labware Types=%Input.LabwareOneName%;Destination Orchestrator Workflow=%LabwareOneStorage%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTwoMetadata",
                                  "value": "Source Orchestrator Workflow=%LabwareTwoStorage%;Labware Types=%Input.LabwareTwoName%;Destination Orchestrator Workflow=%LabwareTwoStorage%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareThreeMetadata",
                                  "value": "Source Orchestrator Workflow=%LabwareThreeStorage%;Labware Types=%Input.LabwareThreeName%;Destination Orchestrator Workflow=%LabwareThreeStorage%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CherryPickTotal",
                                  "value": "%Input.CherryPickTotal%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeOneTotal",
                                  "value": "%Input.LabwareOneTotal%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeTwoTotal",
                                  "value": "%Input.LabwareTwoTotal%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypeThreeTotal",
                                  "value": "%Input.LabwareThreeTotal%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "WorkflowNumber",
                                  "value": "%WorkflowNumber%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "TecanTipRacksSent",
                                  "value": "%TecanTipRacksSent%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Job Number",
                                  "value": "%Input.JobNumber%",
                                  "valueType": "Integer",
                                  "defaultValue": "3",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Tecan Job ID",
                                  "value": "%Input.Tecan JobID%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "RunInventory",
                                  "value": "%InventoryRunRequired%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwareTypePreDilution",
                                  "value": "%Input.LabwarePreDilutionName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "CPPreDilutionRequired",
                                  "value": "%CPPreDilutionRequired%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "LabwarePreDilutionMetadata",
                                  "value": "Source Orchestrator Workflow=%LabwarePreDilutionStorage%;Labware Types=%Input.LabwarePreDilutionName%;Destination Orchestrator Workflow=%LabwarePreDilutionStorage%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Labware One Volume",
                                  "value": "%Input.LabwareOneVolume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Labware Two Volume",
                                  "value": "%Input.LabwareTwoVolume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Labware Three Volume",
                                  "value": "%Input.LabwareThreeVolume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "InventorySkyline",
                                  "value": "%InventorySkyline%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "InventoryHotelsCarousel",
                                  "value": "%InventoryHotelsCarousel%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "InventoryIncubator",
                                  "value": "%InventoryIncubator%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "InventoryStackCarousel",
                                  "value": "%InventoryStackCarousel%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "DMSOVolume",
                                  "value": "%Input.DMSO_Volume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "OutputRempRacks",
                                  "mapToGlobalVariableName": "ValidatedSources",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "CapsBarcodes",
                                  "mapToGlobalVariableName": "CapsUsed",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "AssayPlatesLabwareTwo",
                                  "mapToGlobalVariableName": "AssayPlatesLabwareTwo",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Workflow 1 - (CP - SD (Bravo) - Transfer - ECHO)",
                              "description": "Order: Workflow 1 - (CP - SD (Bravo) - Transfer - ECHO)",
                              "guid": "3bfa9968-b47f-42a5-9689-351261a69ea7",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.Portrait [#FFFFFF:0:0]",
                              "backgroundColorHex": "#FFFF00CB",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "Barcodes",
                                  "value": "%Output.OutputRempRacks%",
                                  "valueType": "String",
                                  "defaultValue": "SIM BC1",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Cap Holders",
                                  "value": "%CapsUsed%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Assay Plates",
                                  "value": "%AssayPlatesLabwareTwo%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "SkipPreDilution",
                                  "value": "%CPPreDilutionRequired%",
                                  "valueType": "Boolean",
                                  "defaultValue": "False",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Job",
                                  "value": "%Input.JobNumber%",
                                  "valueType": "Integer",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Mosaic Job",
                                  "value": "%Input.Mosaic Job%",
                                  "valueType": "Integer",
                                  "defaultValue": "12",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                },
                                {
                                  "name": "Priority",
                                  "value": "%Input.Priority%",
                                  "valueType": "String",
                                  "defaultValue": "Medium",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    ""
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Main CP Assay Process",
                              "description": "Order: Main CP Assay Process",
                              "guid": "78cde825-5442-4a4c-8328-450c42b87580",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.FruitGrapes [#FFFFFF:0:0]",
                              "backgroundColorHex": "#FFFF0079",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "10",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "CP",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "EB2",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "%AssayPlatesLabwareTwo%",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Orchestrator Used=True;Source Orchestrator Workflow=Standard Assay;Destination Zone=Buffer",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Transport",
                              "description": "Transport",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "guid": "11347e61-5eba-4f3d-9c20-ba0d333a886b",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "backgroundColorHex": "#FF666666",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                              "timeout": "00:30:00",
                              "inputParameters": [
                                {
                                  "name": "Barcode",
                                  "value": "%Output.OutputRempRacks%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "Unknown",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "LabwareOneName",
                                  "value": "%Input.LabwareOneName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "LabwareThreeName",
                                  "value": "%Input.LabwareThreeName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "LabwareThreeTotal",
                                  "value": "%Input.LabwareThreeTotal%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "LabwareOneTotal",
                                  "value": "%Input.LabwareOneTotal%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "LabwareTwoName",
                                  "value": "%Input.LabwareTwoName%",
                                  "valueType": "String",
                                  "defaultValue": "",
                                  "valueOptions": [],
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "Labware One Volume",
                                  "value": "%Input.LabwareOneVolume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "Labware Three Volume",
                                  "value": "%Input.LabwareThreeVolume%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "Job No",
                                  "value": "%Input.JobNumber%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                },
                                {
                                  "name": "Mosaic Job No",
                                  "value": "%Input.Mosaic Job%",
                                  "valueType": "Double",
                                  "defaultValue": "0",
                                  "valueOptions": {
                                    "$type": "System.String[], System.Private.CoreLib",
                                    "$values": []
                                  },
                                  "validationRules": [],
                                  "tags": [
                                    "User",
                                    "#DarkMagenta"
                                  ]
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Module ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Placeholder Process",
                              "description": "Order: Placeholder Process",
                              "guid": "018e1921-32fb-4b76-bb9c-6d9e605fdac2",
                              "isAsync": false,
                              "allowAsync": true,
                              "iconUrl": "PackIcon.LocalGroceryStore [#FFFFFF:0:0]",
                              "backgroundColorHex": "#FFFF0000",
                              "isDisabled": true,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                              "left": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "a696c825-3261-42dd-9e93-28a0a2bf932f",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "right": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                    "yes": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                                          "left": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                "inputParameters": [
                                                  {
                                                    "name": "Timeout (min)",
                                                    "value": "10",
                                                    "valueType": "Double",
                                                    "defaultValue": "10"
                                                  },
                                                  {
                                                    "name": "From",
                                                    "value": "CP",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "To",
                                                    "value": "IO",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "Barcodes",
                                                    "value": "%REMPSourcesToReturnFromCP%",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "Metadata",
                                                    "value": "Orchestrator Used=True;Source Orchestrator Workflow=REMP Source;Destination Zone=Returns;Destination Orchestrator Workflow=Source;Labware Types=%Current Labware%",
                                                    "valueType": "String"
                                                  }
                                                ],
                                                "outputParameterMapping": [
                                                  {
                                                    "name": "Barcodes",
                                                    "parameterType": "String"
                                                  },
                                                  {
                                                    "name": "Request ID",
                                                    "parameterType": "String"
                                                  }
                                                ],
                                                "name": "Transport",
                                                "description": "Transport",
                                                "helpText": "Transports the specified barcode(s) from one station to another.",
                                                "guid": "4460f686-88f7-4a4d-8bb5-5715af79309a",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                "backgroundColorHex": "#FF666666",
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "910f08eb-dcb3-40fb-b5d1-cbdc862813bf",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "right": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                                                "left": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                      "inputParameters": [
                                                        {
                                                          "name": "Timeout (min)",
                                                          "value": "10",
                                                          "valueType": "Double",
                                                          "defaultValue": "10"
                                                        },
                                                        {
                                                          "name": "From",
                                                          "value": "CP",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "To",
                                                          "value": "IO",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "Barcodes",
                                                          "value": "%CapsToReturnFromCP%",
                                                          "valueType": "String"
                                                        },
                                                        {
                                                          "name": "Metadata",
                                                          "value": "Orchestrator Used=True;Source Orchestrator Workflow=Cap Holders;Destination Zone=Cap Holders;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=Default",
                                                          "valueType": "String"
                                                        }
                                                      ],
                                                      "outputParameterMapping": [
                                                        {
                                                          "name": "Barcodes",
                                                          "parameterType": "String"
                                                        },
                                                        {
                                                          "name": "Request ID",
                                                          "parameterType": "String"
                                                        }
                                                      ],
                                                      "name": "Transport",
                                                      "description": "Transport",
                                                      "helpText": "Transports the specified barcode(s) from one station to another.",
                                                      "guid": "ae1e066a-40a1-4f9e-b225-2c94d7d54274",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                      "backgroundColorHex": "#FF666666",
                                                      "isDisabled": false,
                                                      "isPausePointSet": false
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "1260b585-059c-44ea-ac95-6a20a8f71638",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "right": {
                                                  "children": [
                                                    {
                                                      "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                                                      "left": {
                                                        "children": [
                                                          {
                                                            "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                            "inputParameters": [
                                                              {
                                                                "name": "Timeout (min)",
                                                                "value": "10",
                                                                "valueType": "Double",
                                                                "defaultValue": "10"
                                                              },
                                                              {
                                                                "name": "From",
                                                                "value": "CP",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "To",
                                                                "value": "IO",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Barcodes",
                                                                "value": "%50TipsToReturnFromCP%",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Metadata",
                                                                "value": "Orchestrator Used=True;Source Orchestrator Workflow=Consumable Storage;Destination Zone=50uL Tecan Tips;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=%Current Labware%",
                                                                "valueType": "String"
                                                              }
                                                            ],
                                                            "outputParameterMapping": [
                                                              {
                                                                "name": "Barcodes",
                                                                "parameterType": "String"
                                                              },
                                                              {
                                                                "name": "Request ID",
                                                                "parameterType": "String"
                                                              }
                                                            ],
                                                            "name": "Transport",
                                                            "description": "Transport",
                                                            "helpText": "Transports the specified barcode(s) from one station to another.",
                                                            "guid": "bfb35ba7-172b-4e9f-a4c8-772d0db7c223",
                                                            "isAsync": false,
                                                            "allowAsync": false,
                                                            "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                            "backgroundColorHex": "#FF666666",
                                                            "isDisabled": false,
                                                            "isPausePointSet": false
                                                          }
                                                        ],
                                                        "name": "Sequence",
                                                        "description": "Sequence",
                                                        "helpText": "A sequence of workflow elements",
                                                        "guid": "c7912795-6edf-4b97-a5a8-bb56d3bfb517",
                                                        "isAsync": false,
                                                        "allowAsync": false,
                                                        "backgroundColorHex": "#00000000",
                                                        "isDisabled": false,
                                                        "isPausePointSet": false
                                                      },
                                                      "right": {
                                                        "children": [
                                                          {
                                                            "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                            "inputParameters": [
                                                              {
                                                                "name": "Timeout (min)",
                                                                "value": "10",
                                                                "valueType": "Double",
                                                                "defaultValue": "10"
                                                              },
                                                              {
                                                                "name": "From",
                                                                "value": "CP",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "To",
                                                                "value": "IO",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Barcodes",
                                                                "value": "%200TipsToReturnFromCP%",
                                                                "valueType": "String"
                                                              },
                                                              {
                                                                "name": "Metadata",
                                                                "value": "Orchestrator Used=True;Source Orchestrator Workflow=Consumable Storage;Destination Zone=200uL Tecan Tips;Destination Orchestrator Workflow=Carousel Hotel;Labware Types=%Current Labware%",
                                                                "valueType": "String"
                                                              }
                                                            ],
                                                            "outputParameterMapping": [
                                                              {
                                                                "name": "Barcodes",
                                                                "parameterType": "String"
                                                              },
                                                              {
                                                                "name": "Request ID",
                                                                "parameterType": "String"
                                                              }
                                                            ],
                                                            "name": "Transport",
                                                            "description": "Transport",
                                                            "helpText": "Transports the specified barcode(s) from one station to another.",
                                                            "guid": "159c4faf-52a2-4142-9afc-c67dc8dd6599",
                                                            "isAsync": false,
                                                            "allowAsync": false,
                                                            "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                            "backgroundColorHex": "#FF666666",
                                                            "isDisabled": false,
                                                            "isPausePointSet": false
                                                          }
                                                        ],
                                                        "name": "Sequence",
                                                        "description": "Sequence",
                                                        "helpText": "A sequence of workflow elements",
                                                        "guid": "8169dbbc-aa9c-411d-96ba-c0eaf4ee6103",
                                                        "isAsync": false,
                                                        "allowAsync": false,
                                                        "backgroundColorHex": "#00000000",
                                                        "isDisabled": false,
                                                        "isPausePointSet": false
                                                      },
                                                      "name": "Parallel",
                                                      "description": "Parallel",
                                                      "helpText": "Executes two sequences in parallel",
                                                      "guid": "a8ee58ae-9693-4183-bc05-e29f924126ca",
                                                      "isAsync": false,
                                                      "allowAsync": false,
                                                      "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                                                      "backgroundColorHex": "#FF72EAFF",
                                                      "isDisabled": false,
                                                      "isPausePointSet": false
                                                    }
                                                  ],
                                                  "name": "Sequence",
                                                  "description": "Sequence",
                                                  "helpText": "A sequence of workflow elements",
                                                  "guid": "156b2592-678d-48bb-a158-54a33660acca",
                                                  "isAsync": false,
                                                  "allowAsync": false,
                                                  "backgroundColorHex": "#00000000",
                                                  "isDisabled": false,
                                                  "isPausePointSet": false
                                                },
                                                "name": "Parallel",
                                                "description": "Parallel",
                                                "helpText": "Executes two sequences in parallel",
                                                "guid": "23be89b4-a03b-4f8f-b1c7-e65284929646",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                                                "backgroundColorHex": "#FF72EAFF",
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "50213f02-e5c9-48a4-ad68-2225d1184093",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "name": "Parallel",
                                          "description": "Parallel",
                                          "helpText": "Executes two sequences in parallel",
                                          "guid": "6fb0332b-2557-4d2a-bc88-0f9a65718459",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                                          "backgroundColorHex": "#FF72EAFF",
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "6e2c3838-4a75-4e41-968a-8c40d887a69c",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "no": {
                                      "children": [],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "478184de-70cb-4c69-baf6-b620f097d01c",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "IsDayEnd",
                                      "right": "True",
                                      "evaluator": "Equal"
                                    },
                                    "name": "Branch",
                                    "description": "Branch if IsDayEnd = True",
                                    "helpText": "Evaluates a condition and branches accordingly",
                                    "guid": "1b0b1304-a0f6-49c9-b652-66cfc1ef7523",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                    "backgroundColorHex": "#FFDEDE81",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "f2fd2ac2-effa-424e-88b0-5d14974b61cb",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "name": "Parallel",
                              "description": "Parallel",
                              "helpText": "Executes two sequences in parallel",
                              "guid": "05e15fca-f055-408f-a250-8cd17b82121f",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                              "backgroundColorHex": "#FF72EAFF",
                              "isDisabled": true,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "798f75f3-129b-4432-ae3e-d2b4fd113c11",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                              "message": "Order cancelled due to quarentined racks",
                              "name": "Error",
                              "description": "Error: Order cancelled due to quarentined racks",
                              "helpText": "Generates and error in the workflow with the specified message",
                              "guid": "516fba6a-3242-46f2-b587-d6a87d0234ac",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFFF0000",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "020a90c2-0cf8-47d4-9da7-de338c5c0758",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "CancelOrder",
                          "right": "False",
                          "evaluator": "Equal"
                        },
                        "name": "Branch",
                        "description": "Branch if CancelOrder = False",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "4ff1b531-59fd-4a52-9d49-d5e1646b5413",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "9fb576d5-f7bf-4944-b6b5-7119b6b7953f",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "38bb0976-8b95-4997-b273-da349d89bf57",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "Validation Error",
                    "right": "",
                    "evaluator": "Equal"
                  },
                  "name": "Branch",
                  "description": "Branch if Validation Error = ",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "guid": "6dd6e060-da4c-4f6b-b23a-efcf40751a2d",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "backgroundColorHex": "#FFDEDE81",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "3aff8b3e-5a36-4cfb-a309-77b57b3b1379",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "no": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
                  "message": "%Input.Priority% is not a valid priority",
                  "name": "Error",
                  "description": "Error: %Input.Priority% is not a valid priority",
                  "helpText": "Generates and error in the workflow with the specified message",
                  "guid": "3795087f-d2ee-4c9b-88f7-417ab410bd0c",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
                  "backgroundColorHex": "#FFFF0000",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.SetParameter, Biosero.Workflow.Core",
                  "parameterName": "Output.Error",
                  "leftOperand": "%Input.Priority% is not a valid priority",
                  "isUnaryOperation": true,
                  "operator": "Add",
                  "rightOperand": "",
                  "name": "Set Parameter",
                  "description": "Output.Error = %Input.Priority% is not a valid priority",
                  "helpText": "Sets a parameter",
                  "guid": "c4408263-0c6e-4f9c-9dc0-8ecbba64e021",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Equal [#FFFFFFFF]",
                  "backgroundColorHex": "#FFA8E281",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "ec6742ec-a0f5-4a09-be85-bba2c5952bfe",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "Allowed Order Priorities",
              "right": "%Input.Priority%",
              "evaluator": "Contains"
            },
            "name": "Branch",
            "description": "Branch if Allowed Order Priorities contains %Input.Priority%",
            "helpText": "Evaluates a condition and branches accordingly",
            "guid": "95c86ce8-dd98-477c-83f0-166d89206755",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
            "backgroundColorHex": "#FFDEDE81",
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "12dfbace-63a5-4c2b-8825-46e7ebd79925",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "parameters": [
    {
      "name": "LabwareOneValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "ValidatedSources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Sources Not Available",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Output.Error",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoMetadata",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeMetadata",
      "value": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 DTbR 80ul plate;Destination Orchestrator Workflow=Consumables Carousel",
      "valueType": "String",
      "defaultValue": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 DTbR 80ul plate;Destination Orchestrator Workflow=Consumables Carousel",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneMetadata",
      "value": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 ECHO PP 65ul;Destination Orchestrator Workflow=Consumables Carousel",
      "valueType": "String",
      "defaultValue": "Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 ECHO PP 65ul;Destination Orchestrator Workflow=Consumables Carousel",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.WorkflowNumber",
      "value": "1",
      "valueType": "Integer",
      "defaultValue": "1",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.LabwareTwoTotal",
      "value": "2",
      "valueType": "Integer",
      "defaultValue": "2",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.CherryPickTotal",
      "value": "2",
      "valueType": "Integer",
      "defaultValue": "2",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "50Found",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "200Found",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Thaw Time",
      "value": "1",
      "valueType": "Integer",
      "defaultValue": "1",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.UserSubmitted",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.JobNumber",
      "value": "3",
      "valueType": "Integer",
      "defaultValue": "3",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsUsed",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "AssayPlatesLabwareTwo",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryRunRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwarePreDilutionStorage",
      "value": "96 SWP Greiner PP 340ul",
      "valueType": "String",
      "defaultValue": "96 SWP Greiner PP 340ul",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwarePreDiluteValidationResults",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "IsDayEnd",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Mosaic Order Number",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.LabwareTwoVolume",
      "value": "15",
      "valueType": "Double",
      "defaultValue": "15",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10Required",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips30Required",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity10Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity30Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips30PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REMPSourcesToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "200TipsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "50TipsToReturnFromCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryStackCarousel",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventorySkyline",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryHotelsCarousel",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryIncubator",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Priority",
      "value": "Medium",
      "valueType": "String",
      "defaultValue": "Medium",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Allowed Order Priorities",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Mosaic Job",
      "value": "11",
      "valueType": "Integer",
      "defaultValue": "11",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.DMSOVolume",
      "value": "5",
      "valueType": "Double",
      "defaultValue": "5",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "ErrorMessage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Validation Error",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CancelOrder",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Output.OutputRempRacks",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SufficientSpaceForOrderLabware",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.EBVelocity10TipBoxName",
      "value": "384 V11 ST10 Tip Box Standard",
      "valueType": "String",
      "defaultValue": "384 V11 ST10 Tip Box Standard",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.EBVelocity30TipBoxName",
      "value": "384 V11 ST30 Tip Box Standard",
      "valueType": "String",
      "defaultValue": "384 V11 ST30 Tip Box Standard",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Order Id",
      "value": "3",
      "valueType": "Integer",
      "defaultValue": "3",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Json",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "NextJob",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourceBarcodes",
      "value": "SIM BC1,SIM BC3,SIM BC4,SIM BC5,SIM BC6",
      "valueType": "String",
      "defaultValue": "SIM BC1,SIM BC3,SIM BC4,SIM BC5,SIM BC6",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "PreDilutionRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TipsEventsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryEventsFound",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TecanTipRacksSent",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryIncubatorRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryStackCarouselRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventorySkylineRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryHotelsCarouselRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InventoryRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourcesInCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourceDetails",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneTotal",
      "value": "2",
      "valueType": "Integer",
      "defaultValue": "2",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeTotal",
      "value": "3",
      "valueType": "Integer",
      "defaultValue": "3",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalVelocity10TipBoxes",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalVelocity30TipBoxes",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity10TipsPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity30TipsPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareOneVolume",
      "value": "5",
      "valueType": "Double",
      "defaultValue": "5",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareThreeVolume",
      "value": "4",
      "valueType": "Double",
      "defaultValue": "4",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CherryPickTotal",
      "value": "2",
      "valueType": "Integer",
      "defaultValue": "2",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Tecan JobID",
      "value": "423",
      "valueType": "Integer",
      "defaultValue": "423",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.SourceBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Order ID",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.Jobs",
      "value": "[{\"JobNumber\":\"1\",\"Priority\":\"Medium\",\"ThawTime\":\"1\",\"CherryPickTotal\":\"2\",\"MosaicOrderNumber\":\"11\",\"DMSOVolume\":\"13\"},{\"JobNumber\":\"3\",\"Priority\":\"High\",\"ThawTime\":\"1\",\"CherryPickTotal\":\"2\",\"MosaicOrderNumber\":\"11\",\"DMSOVolume\":\"13\"}]",
      "valueType": "String",
      "defaultValue": "[{\"JobNumber\":\"1\",\"Priority\":\"Medium\",\"ThawTime\":\"1\",\"CherryPickTotal\":\"2\",\"MosaicOrderNumber\":\"11\",\"DMSOVolume\":\"13\"},{\"JobNumber\":\"3\",\"Priority\":\"High\",\"ThawTime\":\"1\",\"CherryPickTotal\":\"2\",\"MosaicOrderNumber\":\"11\",\"DMSOVolume\":\"13\"}]",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTwoTotal",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "WorkflowNum",
      "value": "1",
      "valueType": "Integer",
      "defaultValue": "1",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwarePreDilutionName",
      "value": "96 SWP Greiner PP 340ul",
      "valueType": "String",
      "defaultValue": "96 SWP Greiner PP 340ul",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourcesNotInCP",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.LabwareOneName",
      "value": "384 ECHO PP 65ul",
      "valueType": "String",
      "defaultValue": "384 ECHO PP 65ul",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.LabwareTwoName",
      "value": "384 MTP 120ul",
      "valueType": "String",
      "defaultValue": "384 MTP 120ul",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Input.LabwareThreeName",
      "value": "384 DTbR 80ul plate",
      "valueType": "String",
      "defaultValue": "384 DTbR 80ul plate",
      "validationRules": [],
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTypesForOrders",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "LabwareTypesTotalsForOrders",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPFoundOutputs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPNotFoundOutputs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPAssayTypesNotFound",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPAssayTypesInsuffientAmount",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "PDPPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CapsPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPPreDilutionRequired",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPLabwareTypesForOrders",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPLabwareTypeTotalsForOrders",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "scripts": [
    {
      "name": "SetMetadataForDestinationLabware",
      "code": "reference c:\\Program Files (x86)\\Green Button Go\\Newtonsoft.Json.dll\r\nreference c:\\Program Files (x86)\\Green Button Go\\BioSero.GreenButtonGo.Scripting.dll\r\nreference c:\\Program Files (x86)\\Green Button Go\\BioSero.Utilities.dll\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing System.Data;\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetMetadataForDestinationLabware : WorkflowScript\r\n    {\r\n        public SetMetadataForDestinationLabware(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           string LabwareOneValidated = (string)parameters[\"LabwareOneValidationResults\"]; \r\n           string LabwareOne = (string)parameters[\"Input.LabwareOneName\"]; \r\n           string LabwareTwoValidated = (string)parameters[\"LabwareTwoValidationResults\"]; \r\n           string LabwareTwo = (string)parameters[\"Input.LabwareTwoName\"]; \r\n           string LabwareThreeValidated = (string)parameters[\"LabwareThreeValidationResults\"]; \r\n           string LabwareThree = (string)parameters[\"Input.LabwareThreeName\"]; \r\n           List<string> LabwareOneList = LabwareOneValidated.Split(';').ToList();\r\n           List<string> LabwareTwoList = LabwareTwoValidated.Split(';').ToList();\r\n           List<string> LabwareThreeList = LabwareThreeValidated.Split(';').ToList();\r\n           string LabwareOneMetadata = \"\";\r\n           string LabwareTwoMetadata = \"\";\r\n           string LabwareThreeMetadata = \"\";\r\n           \r\n           \r\n           if (LabwareOneList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareOneMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareOne + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareOneMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareOne + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n           if (LabwareTwoList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareTwoMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareTwo + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareTwoMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareTwo + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n           if (LabwareThreeList[0].ToString() == \"StacksCarousel\")\r\n              {\r\n              LabwareThreeMetadata = \"Source Orchestrator Workflow=Stack Carousel;Labware Types=\" + LabwareThree + \";Destination Orchestrator Workflow=Consumables Carousel\";\r\n              }\r\n              else\r\n              {\r\n              LabwareThreeMetadata = \"Source Orchestrator Workflow=Cytomat Skyline;Labware Types=\" + LabwareThree + \";Destination Orchestrator Workflow=Consumables Carousel\";              \r\n              }\r\n           \r\n          /*  System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneValidated.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoValidated.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeValidated.ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneList[0].ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoList[0].ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeList[0].ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOne.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwo.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThree.ToString()});\r\n           \r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareOneMetadata.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareTwoMetadata.ToString()});\r\n               System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\jj.txt\", new string []{ LabwareThreeMetadata.ToString()});*/\r\n              \r\n              \r\n\t    parameters[\"LabwareOneMetadata\"] = LabwareOneMetadata;\r\n\t    parameters[\"LabwareTwoMetadata\"] = LabwareTwoMetadata;\r\n\t    parameters[\"LabwareThreeMetadata\"] = LabwareThreeMetadata;\r\n              \r\n              \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CountRequiredVelocityRacksRequired",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CountRequiredVelocityRacksRequired : WorkflowScript\r\n    {\r\n        public CountRequiredVelocityRacksRequired(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           int CherryPickTotal =(int)parameters[\"Input.CherryPickTotal\"];\r\n           int WorkflowNumber =  (int)parameters[\"WorkflowNumber\"];\r\n           \r\n           int VelocityTipsRequired = 0;\r\n           \r\n           switch (WorkflowNumber) // Match Expression - can be any non-null expression\r\n            {\r\n                case 1: // Case Label 1\r\n                    // Switch Section START\r\n                    VelocityTipsRequired = 1 + CherryPickTotal + CherryPickTotal;\r\n                    break; // Switch Section END\r\n            }\r\n\t    parameters[\"VelocityTipsRequired\"] = VelocityTipsRequired;\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "SetMetadataForLabware",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class SetMetadataForLabware : WorkflowScript\r\n    {\r\n        public SetMetadataForLabware(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n            //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 ECHO PP 65ul;Destination Orchestrator Workflow=Consumables Carousel\r\n         //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 MTP 120ul;Destination Orchestrator Workflow=Consumables Carousel\r\n           //Source Orchestrator Workflow=Cytomat Skyline;Labware Types=384 STbR 80ul;Destination Orchestrator Workflow=Consumables Carousel\r\n           \r\n           \r\n            string LabwareOneName = (string)parameters[\"Input.LabwareOneName\"];\r\n            string LabwareTwoName = (string)parameters[\"Input.LabwareTwoName\"];\r\n            string LabwareThreeName = (string)parameters[\"Input.LabwareThreeName\"];\r\n\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckTecanTipsSentStatus",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckTecanTipsSentStatus : WorkflowScript\r\n    {\r\n        public CheckTecanTipsSentStatus(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             TipsSentEvent transfer = new TipsSentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<TipsSentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "CreateTipsEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateTipsEvent : WorkflowScript\r\n    {\r\n        public CreateTipsEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             TipsSentEvent transfer = new TipsSentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<TipsSentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n\t    parameters[\"TecanTipRacksSent\"] = 0;\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "CheckForTipsEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForTipsEvent : WorkflowScript\r\n    {\r\n        public CheckForTipsEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        \r\n            \r\n\t\t\t         EventSearchParameters searchParams = new EventSearchParameters()\r\n\t\t\t{\r\n\t\t\t  Topic = \"Biosero.Scripting.TipsSentEvent\",\r\n\t\t\t  Start = DateTime.Now.Date,\r\n\t\t\t  ActorId = \"Roche-Orchestrator\"\r\n\t\t\t};\r\n\r\n\t\t\tvar events = Environment.QueryClient.GetEvents(searchParams, 10000, 0)?.ToList() ?? new List<EventMessage>();\r\n\t\t\t\r\n               \r\n\t    parameters[\"TipsEventFound\"] = events.Count()>0;\r\n\t    \r\n\t    \r\n\t    EventSearchParameters searchParameters = new EventSearchParameters()\r\n\t       {\r\n\t       Topic = \"Biosero.Scripting.InventorySentEvent\",\r\n\t       Start = DateTime.Now.Date,\r\n\t       ActorId = \"Roche-Orchestrator\"\r\n\t       };\r\n\t       \r\n\t      var events1 = Environment.QueryClient.GetEvents(searchParameters, 10000, 0)?.ToList() ?? new List<EventMessage>(); \r\n\t      \r\n\t      parameters[\"InventoryEventFound\"] = events1.Count()>0;\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    public class TipsSentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "IsJobRequiringPreDilutionPlate",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class IsJobRequiringPreDilutionPlate : WorkflowScript\r\n    {\r\n        public IsJobRequiringPreDilutionPlate(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n            int TecanJob = (int)parameters[\"Input.Tecan JobID\"];\r\n            \r\n            List<int> TecanJobList = new List<int> {424};\r\n            \r\n            bool isInList = TecanJobList.Contains(TecanJob);\r\n         \r\n         parameters [\"CPPreDilutionRequired\"] = isInList;\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateInventoryEvent",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\nusing Biosero.DataModels.Events;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateInventoryEvent : WorkflowScript\r\n    {\r\n        public CreateInventoryEvent(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n\r\n\t\tprivate EventContext GetEventContext(string[] subjects)\r\n\t\t{\r\n\t\t  DateTime time = DateTime.Now;\r\n\t\t  return new EventContext()\r\n\t\t  {\r\n\t\t    ActorId = \"Roche-Orchestrator\",\r\n\t\t    OperatorId = \"Roche-Orchestrator\",\r\n\t\t    Subjects = subjects,\r\n\t\t    Start = time,\r\n\t\t    End = time,\r\n\t\t  };\r\n\t\t  }\r\n\t\t  \r\n\t\t  \r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n         \r\n     //    int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n    //       int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n             \r\n             InventorySentEvent transfer = new InventorySentEvent()\r\n\t\t{\r\n\t\t  TimeStamp = DateTime.Now,\r\n\t\t  OperatorIdentifier = \"Roche-Orchestrator\",\r\n\t\t};\r\n\r\nEnvironment.EventClient.PublishEvent(EventMessage.FromEvent(new Event<InventorySentEvent>(transfer, GetEventContext(new string[] { \"\" }))));\r\n\t  //  parameters[\"InventoryRan\"] = 0;\r\n               \r\n\r\n               \r\n        }\r\n    }\r\n    \r\n    public class InventorySentEvent\r\n{\r\n    public DateTimeOffset TimeStamp { get; set; }\r\n\r\n    public string OperatorIdentifier { get; set; }\r\n}\r\n\r\n\r\n\r\n}\r\n        ",
      "language": "C#"
    },
    {
      "name": "RemoveSourcesAlreadyOnCPWC",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RemoveSourcesAlreadyOnCPWC : WorkflowScript\r\n    {\r\n        public RemoveSourcesAlreadyOnCPWC(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n           \r\n           string SourceDetails = (string)parameters[\"Input.SourceDetails\"]; \r\n           string SourcesInCP = (string)parameters[\"SourcesInCP\"]; \r\n\t  string[] SourceDetailsvalues = SourceDetails.Split(',');\r\n\t  string[] SourcesInCPvalues = SourcesInCP.Split(','); \r\n\t  bool ItemFound = false;\r\n\t  List<string> updatedItems = new List<string>();\r\n\t\r\n\tforeach (string item in SourceDetailsvalues)\r\n\t{\r\n\t        ItemFound = false;\r\n\t\tforeach (string item1 in SourcesInCPvalues)\r\n\t\t{\r\n\t\t  if(item==item1)\r\n\t\t     {\r\n\t\t     ItemFound = true;\r\n\t\t     }\r\n\t\t}\r\n\t\t\r\n\t\tif (ItemFound==false)\r\n\t\t  {\r\n\t\t   updatedItems.Add(item);\r\n\t\t  }\r\n\t}\r\n          string combinedString = string.Join(\",\", updatedItems.Select(item => item.ToUpper()));\r\n\t    parameters[\"Input.SourceDetails\"] = combinedString;\r\n           \r\n           \r\n\t//\t    SourceDetailsvalues.Remove(item);\r\n           \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckForEndOfTheDay",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForEndOfTheDay : WorkflowScript\r\n    {\r\n        public CheckForEndOfTheDay(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        DateTime currentTime = DateTime.Now;\r\n        DateTime targetTime = DateTime.Today.AddHours(16).AddMinutes(45);\r\n\r\n        if (currentTime > targetTime)\r\n        {\r\n             parameters[\"IsDayEnd\"] = true;\r\n        }\r\n        \r\n        \r\n        \r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "RequiredVelocityTips",
      "code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Biosero.Workflow;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RequiredVelocityTips : WorkflowScript\r\n    {\r\n        public RequiredVelocityTips(WorkflowEnvironment environment) : base(environment) {}\r\n\r\n        public void Run(Dictionary<string, object> parameters)\r\n        {\r\n        \r\n        \r\n                /*\r\n        Workflow requires Replicate and SD\r\n\r\nReplicate = 1 tip per 1 source\r\nSD - 1 tip per 1 dest\r\n\r\nWorflow 1 required - \r\n\r\nSD on the CP plate created for Labware type 2 \r\n\r\nTrasnsfer  to labware type 1 \r\n\r\nReplication to  labware type 3 \r\n\r\nexample:\r\n\r\n3 sources in order - creating 2 plates\r\n\r\n2  CP plated created \r\n\r\nRequiring - 3 replicates\r\n\r\nNeeded:\r\n\r\n1 Velocity rack for DMSO\r\n3 Velocity racks for the SD step\r\n3 Velocity racks for the Rep step\r\n\r\n \r\n        */\r\n           int LabwareTypeOneTotal = (int)parameters[\"Input.LabwareOneTotal\"]; \r\n           double LabwareTypeOneVolume = (double)parameters[\"Input.LabwareOneVolume\"]; \r\n           int LabwareOneST10Total = 0;\r\n           int LabwareOneST30Total = 0;\r\n           double LabwareTypeThreeVolume = (double)parameters[\"Input.LabwareThreeVolume\"]; \r\n           int LabwareThreeST10Total = 0;\r\n           int LabwareThreeST30Total = 0;\r\n           int LabwareTypeThreeTotal = (int)parameters[\"Input.LabwareThreeTotal\"]; \r\n           int CherryPickTotal = (int)parameters[\"Input.CherryPickTotal\"]; \r\n           int WorkflowNumber = (int)parameters[\"WorkflowNumber\"]; \r\n           int V10WorkflowStepsTotal = 0;\r\n           int V30WorkflowStepsTotal = 0;\r\n       //    string VelocityTypeLabwareOne = \"\";\r\n       //    string VelocityTypeLabwarThreee = \"\";\r\n           string VelocityTips10PlaceholderBarcodes = \"\";\r\n           string VelocityTips30PlaceholderBarcodes = \"\";\r\n           \r\n           \r\n           if (LabwareTypeOneVolume <=7)\r\n             {\r\n             LabwareOneST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>7) && (LabwareTypeOneVolume <=28))\r\n             {\r\n             LabwareOneST30Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>28) && (LabwareTypeOneVolume <=35))\r\n             {\r\n             LabwareOneST30Total = 1;\r\n             LabwareOneST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeOneVolume>35) && (LabwareTypeOneVolume <=42))\r\n             {\r\n             LabwareOneST30Total = 2;\r\n             }\r\n           \r\n           if ( (LabwareTypeThreeVolume <=7) && (LabwareTypeThreeVolume > 0))\r\n             {\r\n             LabwareThreeST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>7) && (LabwareTypeThreeVolume <=28))\r\n             {\r\n             LabwareThreeST30Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>28) && (LabwareTypeThreeVolume <=35))\r\n             {\r\n             LabwareThreeST30Total = 1;\r\n             LabwareThreeST10Total = 1;\r\n             }\r\n             else if ((LabwareTypeThreeVolume>35) && (LabwareTypeThreeVolume <=42))\r\n             {\r\n             LabwareThreeST30Total = 2;\r\n             }\r\n             \r\n    //       System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xx.txt\", new string []{ LabwareThreeST10Total.ToString()});\r\nswitch (WorkflowNumber)\r\n{\r\n    case 1:\r\n        V10WorkflowStepsTotal = 1 +( CherryPickTotal*LabwareOneST10Total) +( CherryPickTotal*LabwareThreeST10Total);\r\n        V30WorkflowStepsTotal = ( CherryPickTotal*LabwareOneST30Total) +( CherryPickTotal*LabwareThreeST30Total);\r\n        \r\n        break;\r\n  //  default:\r\n //       Console.WriteLine(\"Other day\");\r\n   //     break;\r\n}\r\n        \r\n \r\n\t    parameters[\"TotalVelocity10TipBoxes\"] = V10WorkflowStepsTotal;\r\n\t    parameters[\"TotalVelocity30TipBoxes\"] = V30WorkflowStepsTotal;\r\n           \r\n\t\r\n\tfor (int i = 1; i <= (V10WorkflowStepsTotal); i++)\r\n\t\t{\r\n\t\t    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes +\"Velocity10_\" +  i + \",\";\r\n\t\t}\r\n\t    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes.TrimEnd(',');\r\n\t    parameters[\"VelocityTips10PlaceholderBarcodes\"] = VelocityTips10PlaceholderBarcodes;\r\n           \r\n\t\r\n\tfor (int i = 1; i <= (V30WorkflowStepsTotal); i++)\r\n\t\t{\r\n\t\t    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes +\"Velocity30_\" +  i + \",\";\r\n\t\t}\r\n\t    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes.TrimEnd(',');\r\n\t    parameters[\"VelocityTips30PlaceholderBarcodes\"] = VelocityTips30PlaceholderBarcodes;\r\n\t    \r\n\t//    System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xs.txt\", new string []{ WorkflowStepsTotal.ToString()});\r\n        \r\n\t\r\n\t\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "IsJobRequiringPreDilutionPlate - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    // Scripts require a class with a parameterless constructor and a RunAsync method matching the below signature.\r\n    public class IsJobRequiringPreDilutionPlate_x_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            int TecanJob = context.GetGlobalVariableValue<int>(\"Input.Tecan JobID\");\r\n\r\n            List<int> TecanJobList = new List<int> { 424 };\r\n\r\n            bool isInList = TecanJobList.Contains(TecanJob);\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"PreDilutionRequired\", isInList);\r\n            \r\n            Serilog.Log.Information(\"PreDilutionRequired= {PreDilutionRequired}\", isInList);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CountRequiredVelocityRacksRequired - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CountRequiredVelocityRacksRequired_x_New \r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            int CherryPickTotal = context.GetGlobalVariableValue<int>(\"CherryPickTotal\");\r\n            int WorkflowNumber = context.GetGlobalVariableValue<int>(\"WorkflowNumber\");\r\n            string JobString = context.GetGlobalVariableValue<string>(\"Jobs\");\r\n\t\t\t\r\n            \t\t\t//\tstring JobString = context.GetGlobalVariableValue<string>(\"Json\");\r\n            List<Job> deserializedJobs = JsonConvert.DeserializeObject<List<Job>>(JobString);\r\n\r\n            int VelocityTipsRequired = 0;\r\n\r\n            switch (WorkflowNumber) // Match Expression - can be any non-null expression\r\n            {\r\n                case 1: // Case Label 1\r\n                    // Switch Section START\r\n                    VelocityTipsRequired = 1 + CherryPickTotal + CherryPickTotal;\r\n                    break; // Switch Section END\r\n            }\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"VelocityTipsRequired\", VelocityTipsRequired);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "RequiredVelocityTips - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RequiredVelocityTips_x_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n\r\n            int LabwareTypeOneTotal = 0;\r\n            double LabwareTypeOneVolume = 0;\r\n            int LabwareOneST10Total = 0;\r\n            int LabwareOneST30Total = 0;\r\n            double LabwareTypeThreeVolume = 0;\r\n            int LabwareThreeST10Total = 0;\r\n            int LabwareThreeST30Total = 0;\r\n            int LabwareTypeThreeTotal = 0;\r\n            int CherryPickTotal = 0;\r\n            int WorkflowNumber = 0;\r\n            int V10WorkflowStepsTotal = 0;\r\n            int V30WorkflowStepsTotal = 0;\r\n            string VelocityTips10PlaceholderBarcodes = \"\";\r\n            string VelocityTips30PlaceholderBarcodes = \"\";\r\n            string jobno = \"\";\r\n\r\n\r\n            /*\r\n            Workflow requires Replicate and SD\r\n\r\n            Replicate = 1 tip per 1 source\r\n            SD - 1 tip per 1 dest\r\n\r\n            Worflow 1 required - \r\n\r\n            SD on the CP plate created for Labware type 2 \r\n\r\n            Trasnsfer  to labware type 1 \r\n\r\n            Replication to  labware type 3 \r\n\r\n            example:\r\n\r\n            3 sources in order - creating 2 plates\r\n\r\n            2  CP plated created \r\n\r\n            Requiring - 3 replicates\r\n\r\n            Needed:\r\n\r\n            1 Velocity rack for DMSO\r\n            3 Velocity racks for the SD step\r\n            3 Velocity racks for the Rep step\r\n            */\r\n\r\n            var Identities = await client.GetIdentitiesAsync(typeIdentifier: \"1\");\r\n\r\n            foreach (var Identity in Identities)\r\n            {\r\n\r\n                // LabwareTypeOneTotal = context.GetGlobalVariableValue<int>(\"LabwareOneTotal\");\r\n                //      LabwareTypeOneVolume = context.GetGlobalVariableValue<double>(\"LabwareOneVolume\");\r\n                //    LabwareTypeThreeVolume = context.GetGlobalVariableValue<double>(\"LabwareThreeVolume\");\r\n                //   LabwareTypeThreeTotal = context.GetGlobalVariableValue<int>(\"LabwareThreeTotal\");\r\n                ///   CherryPickTotal = context.GetGlobalVariableValue<int>(\"CherryPickTotal\");\r\n                // WorkflowNumber = context.GetGlobalVariableValue<int>(\"WorkflowNum\");\r\n                LabwareTypeOneTotal = Identity.Properties.GetValue<int>(\"LabwareOneTotal\");\r\n                LabwareTypeOneVolume = Identity.Properties.GetValue<double>(\"LabwareOneVolume\");\r\n                LabwareTypeThreeVolume = Identity.Properties.GetValue<double>(\"LabwareThreeVolume\");\r\n                LabwareTypeThreeTotal = Identity.Properties.GetValue<int>(\"LabwareThreeTotal\");\r\n                CherryPickTotal = Identity.Properties.GetValue<int>(\"CherryPickTotal\");\r\n                WorkflowNumber = Identity.Properties.GetValue<int>(\"WorkflowNumber\");\r\n                jobno = Identity.Identifier;\r\n\r\n                if (LabwareTypeOneVolume <= 7)\r\n                {\r\n                    LabwareOneST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 7) && (LabwareTypeOneVolume <= 28))\r\n                {\r\n                    LabwareOneST30Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 28) && (LabwareTypeOneVolume <= 35))\r\n                {\r\n                    LabwareOneST30Total = 1;\r\n                    LabwareOneST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 35) && (LabwareTypeOneVolume <= 42))\r\n                {\r\n                    LabwareOneST30Total = 2;\r\n                }\r\n\r\n                if ((LabwareTypeThreeVolume <= 7) && (LabwareTypeThreeVolume > 0))\r\n                {\r\n                    LabwareThreeST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 7) && (LabwareTypeThreeVolume <= 28))\r\n                {\r\n                    LabwareThreeST30Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 28) && (LabwareTypeThreeVolume <= 35))\r\n                {\r\n                    LabwareThreeST30Total = 1;\r\n                    LabwareThreeST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 35) && (LabwareTypeThreeVolume <= 42))\r\n                {\r\n                    LabwareThreeST30Total = 2;\r\n                }\r\n\r\n                // Serilog.Log.Information(\"This will write to the console.\");\r\n\r\n                // System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xx.txt\", new string []{ LabwareThreeST10Total.ToString()});\r\n\r\n                switch (WorkflowNumber)\r\n                {\r\n                    case 1:\r\n                        V10WorkflowStepsTotal = 1 + (CherryPickTotal * LabwareOneST10Total) + (CherryPickTotal * LabwareThreeST10Total);\r\n                        V30WorkflowStepsTotal = (CherryPickTotal * LabwareOneST30Total) + (CherryPickTotal * LabwareThreeST30Total);\r\n\r\n                        break;\r\n                        //  default:\r\n                        //       Console.WriteLine(\"Other day\");\r\n                        //     break;\r\n                }\r\n\r\n                //            await context.AddOrUpdateGlobalVariableAsync(\"TotalVelocity10TipBoxes\", V10WorkflowStepsTotal);\r\n                //            await context.AddOrUpdateGlobalVariableAsync(\"TotalVelocity30TipBoxes\", V30WorkflowStepsTotal);\r\n\r\n\r\n\r\n                Serilog.Log.Information(\"TotalVelocity10TipBoxes= {TotalVelocity10TipBoxes}\", V10WorkflowStepsTotal);\r\n\r\n                Serilog.Log.Information(\"TotalVelocity30TipBoxes= {TotalVelocity30TipBoxes}\", V30WorkflowStepsTotal);\r\n\r\n                for (int i = 1; i <= (V10WorkflowStepsTotal); i++)\r\n                {\r\n                    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes + \"Velocity10_\" + i + \",\";\r\n                }\r\n\r\n                VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes.TrimEnd(',');\r\n\r\n                //      await context.AddOrUpdateGlobalVariableAsync(\"Velocity10TipsPlaceholderBarcodes\", VelocityTips10PlaceholderBarcodes);\r\n\r\n                Serilog.Log.Information(\"Velocity10TipsPlaceholderBarcodes= {Velocity10TipsPlaceholderBarcodes}\", VelocityTips10PlaceholderBarcodes);\r\n\r\n                for (int i = 1; i <= (V30WorkflowStepsTotal); i++)\r\n                {\r\n                    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes + \"Velocity30_\" + i + \",\";\r\n                }\r\n\r\n                VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes.TrimEnd(',');\r\n\r\n                //        await context.AddOrUpdateGlobalVariableAsync(\"Velocity30TipsPlaceholderBarcodes\", VelocityTips30PlaceholderBarcodes);\r\n\r\n                Serilog.Log.Information(\"Velocity30TipsPlaceholderBarcodes= {Velocity30TipsPlaceholderBarcodes}\", VelocityTips30PlaceholderBarcodes);\r\n\r\n            }\r\n            // System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xs.txt\", new string []{ WorkflowStepsTotal.ToString()});\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "RemoveSourcesAlreadyOnCPWC - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RemoveSourcesAlreadyOnCPWC_x_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string SourceDetails = context.GetGlobalVariableValue<string>(\"Input.SourceBarcodes\");\r\n            string SourcesInCP = context.GetGlobalVariableValue<string>(\"SourcesInCP\");\r\n            string[] SourceDetailsvalues = SourceDetails.Split(',');\r\n            string[] SourcesInCPvalues = SourcesInCP.Split(',');\r\n            bool ItemFound = false;\r\n            List<string> updatedItems = new List<string>();\r\n\r\n            foreach (string item in SourceDetailsvalues)\r\n            {\r\n                ItemFound = false;\r\n                foreach (string item1 in SourcesInCPvalues)\r\n                {\r\n                    if (item == item1)\r\n                    {\r\n                        ItemFound = true;\r\n                    }\r\n                }\r\n\r\n                if (ItemFound == false)\r\n                {\r\n                    updatedItems.Add(item);\r\n                }\r\n            }\r\n\r\n            string combinedString = string.Join(\",\", updatedItems.Select(item => item.ToUpper()));\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"SourceDetails\", combinedString);\r\n            \r\n            Serilog.Log.Information(\"SourceDetails= {SourceDetails}\", combinedString);\r\n\r\n            // SourceDetailsvalues.Remove(item);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckForTipsEvent - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckForTipsEvent_x_New \r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // midnight today at local location\r\n            var midnight = DateTime.Now.Date;\r\n\r\n            // convert to utc since Events.CreatedDateUtc is stored in UTC timezone\r\n            var createdFrom = midnight.ToUniversalTime();\r\n\r\n            var events = await client.GetEventsAsync(topic: \"Biosero.Scripting.TipsSentEvent\", createdFrom: createdFrom);\r\n\r\n            events = events.Where(x => x.ActorId == \"Roche-Orchestrator\").ToArray();\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TipsEventsFound\", events.Any());\r\n            \r\n            \r\n            Serilog.Log.Information(\"TipsEventsFound= {TipsEventsFound}\", events.Any());\r\n\r\n            events = await client.GetEventsAsync(topic: \"Biosero.Scripting.InventorySentEvent\", createdFrom: createdFrom);\r\n\r\n            events = events.Where(x => x.ActorId == \"Roche-Orchestrator\").ToArray();\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"InventoryEventsFound\", events.Any());\r\n            \r\n            \r\n            Serilog.Log.Information(\"InventoryEventsFound= {InventoryEventsFound}\", events.Any());\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateTipsEvent - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateTipsEvent_x_New \r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n            // int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n\r\n            TipsSentEvent transfer = new TipsSentEvent()\r\n            {\r\n                TimeStamp = DateTime.Now,\r\n                OperatorIdentifier = \"Roche-Orchestrator\",\r\n            };\r\n\r\n            var now = DateTimeOffset.Now;\r\n\r\n            await client.AddEventAsync(new AddEventCommand\r\n            {\r\n                Topic = \"Biosero.Scripting.TipsSentEvent\",\r\n                Data = JsonConvert.SerializeObject(transfer),\r\n                Start = now,\r\n                End = now,\r\n                ActorId = \"Roche-Orchestrator\",\r\n                OperatorId = \"Roche-Orchestrator\",\r\n                Subjects = new string[] { \"\" }\r\n            });\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TecanTipRacksSent\", 0);\r\n        }\r\n    }\r\n\r\n    public class TipsSentEvent\r\n    {\r\n        public DateTimeOffset TimeStamp { get; set; }\r\n\r\n        public string OperatorIdentifier { get; set; }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateInventoryEvent - New",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateInventoryEvent_x_New\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n            // int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n\r\n            InventorySentEvent transfer = new InventorySentEvent()\r\n            {\r\n                TimeStamp = DateTime.Now,\r\n                OperatorIdentifier = \"Roche-Orchestrator\",\r\n            };\r\n\r\n            var now = DateTimeOffset.Now;\r\n\r\n            await client.AddEventAsync(new AddEventCommand\r\n            {\r\n                Topic = \"Biosero.Scripting.InventorySentEvent\",\r\n                Data = JsonConvert.SerializeObject(transfer),\r\n                Start = now,\r\n                End = now,\r\n                ActorId = \"Roche-Orchestrator\",\r\n                OperatorId = \"Roche-Orchestrator\",\r\n                Subjects = new string[] { \"\" }\r\n            });\r\n\r\n            // parameters[\"InventoryRan\"] = 0;\r\n        }\r\n    }\r\n\r\n    public class InventorySentEvent\r\n    {\r\n        public DateTimeOffset TimeStamp { get; set; }\r\n\r\n        public string OperatorIdentifier { get; set; }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CreateEventForTips",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CreateEventForTips \r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            // int TecanTipRacksDay = (int)parameters[\"TecanTipRacksDay\"];\r\n            // int DayToday =  (int)DateTime.Now.DayOfWeek;\r\n\r\n            TipsSentEvent transfer = new TipsSentEvent()\r\n            {\r\n                TimeStamp = DateTime.Now,\r\n                OperatorIdentifier = \"Roche-Orchestrator\",\r\n            };\r\n\r\n            var now = DateTimeOffset.Now;\r\n\r\n            await client.AddEventAsync(new AddEventCommand\r\n            {\r\n                Topic = \"Biosero.Scripting.TipsSentEvent\",\r\n                Data = JsonConvert.SerializeObject(transfer),\r\n                Start = now,\r\n                End = now,\r\n                ActorId = \"Roche-Orchestrator\",\r\n                OperatorId = \"Roche-Orchestrator\",\r\n                Subjects = new string[] { \"\" }\r\n            });\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TecanTipRacksSent\", 0);\r\n            \r\n            Serilog.Log.Information(\"TecanTipRacksSent= {TecanTipRacksSent}\", 0);\r\n        }\r\n    }\r\n\r\n    public class TipsSentEvent\r\n    {\r\n        public DateTimeOffset TimeStamp { get; set; }\r\n\r\n        public string OperatorIdentifier { get; set; }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "Create Orders",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Newtonsoft.Json.Linq;\r\nusing System.Xml.Linq;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Create_Orders\r\n    {\r\n\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n\r\n            string JobString = context.GetGlobalVariableValue<string>(\"Input.Jobs\");\r\n            string Sources = context.GetGlobalVariableValue<string>(\"Input.SourceBarcodes\");\r\n            string TecanJob = context.GetGlobalVariableValue<int>(\"Input.Tecan JobID\").ToString();\r\n            int orderId = context.GetGlobalVariableValue<int>(\"Input.Order ID\");\r\n\r\n            //\tstring JobString = context.GetGlobalVariableValue<string>(\"Json\");\r\n            List<Job> deserializedJobs = JsonConvert.DeserializeObject<List<Job>>(JobString);\r\n            deserializedJobs = Job.ReorderJobs(deserializedJobs);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"NextJob\", deserializedJobs.FirstOrDefault().JobNumber);\r\n            //  parameters[\"\"] = deserializedJobs.FirstOrDefault().JobId;\r\n\r\n            var variable = context.GetGlobalVariableValue<string>(\"NextJob\");\r\n\r\n            Serilog.Log.Information(JsonConvert.SerializeObject(Job.ReorderJobs(deserializedJobs)));\r\n\r\n            Serilog.Log.Information(Sources);\r\n\r\n            Serilog.Log.Information(TecanJob);\r\n\r\n            Serilog.Log.Information(\"MyVariableName = {NextJob}\", variable);\r\n\r\n\t\t\t            foreach (Job job in deserializedJobs)\r\n\t\t\t            {\r\n\t\t\t\r\n\t\t\t                await client.RegisterIdentityAsync(\"Job Number \" + job.JobNumber, new RegisterIdentityCommand\r\n\t\t\t\t                {\r\n\t\t\t\t                    Name = \"Job Number \" + job.JobNumber,\r\n\t\t\t\t                    TypeIdentifier = \"1\",\r\n\t\t\t\t                    Description = job.JobNumber,\r\n\t\t\t\t                    InheritProperties = false,\r\n\t\t\t\t                    IsInstance = true,\r\n\t\t\t\t                    Properties = new List<Parameter>\r\n\t\t\t\t\t\t                    { new Parameter { Name = \"OrderID\", Value = orderId.ToString(), ValueType=ParameterValueType.Integer},\r\n\t\t\t\t\t\t                    new Parameter { Name = \"Priority\", Value = job.Priority, ValueType=ParameterValueType.String},\r\n\t\t\t\t\t\t                         new Parameter { Name = \"ThawTime\", Value = job.ThawTime},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"CherryPickTotal\", Value = job.CherryPickTotal},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"MosaicOrderNumber\", Value = job.MosaicOrderNumber},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"DMSOVolume\", Value = job.DMSOVolume},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"WorkflowNumber\", Value = job.WorkflowNumber.ToString(), ValueType=ParameterValueType.Integer},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareOneTotal\", Value = job.LabwareOneTotal},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareTwoTotal\", Value = job.LabwareTwoTotal},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareOneName\", Value = job.LabwareOneName},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareTwoName\", Value = job.LabwareTwoName},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareThreeName\", Value = job.LabwareThreeName},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareThreeTotal\", Value = job.LabwareThreeTotal},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareThreeVolume\", Value = job.LabwareThreeVolume},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareOneVolume\", Value = job.LabwareOneVolume},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"LabwareTypeTwoPlaceholderBarcodes\", Value = job.LabwareTypeTwoPlaceholderBarcodes},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"CapsPlaceholderBarcodes\", Value = job.LabwareTypeTwoPlaceholderBarcodes},\r\n\t\t\t\t\t\t                        new Parameter { Name = \"PDPPlaceholderBarcodes\", Value = job.LabwareTypeTwoPlaceholderBarcodes}\r\n\t\t\t\t\t\t                    }\r\n\t\t\t\t            \r\n\t\t\t\t                }\r\n\t\t\t                 ) ;\r\n        \r\n            }\r\n        }\r\n    }\r\n\r\n    public class Job\r\n    {\r\n        public string JobNumber { get; set; }\r\n        public string Priority { get; set; }\r\n        public string ThawTime { get; set; }\r\n        public string CherryPickTotal { get; set; }\r\n        public string MosaicOrderNumber { get; set; }\r\n        public string DMSOVolume { get; set; }\r\n\r\n        public int? WorkflowNumber { get; set; } = null;\r\n        public string LabwareOneTotal { get; set; }\r\n        public string LabwareTwoTotal { get; set; }\r\n        public string LabwareOneName { get; set; }\r\n        public string LabwareTwoName { get; set; }\r\n        public string LabwareThreeName { get; set; }\r\n        public string LabwareThreeTotal { get; set; }\r\n        public string LabwareOneVolume { get; set; }\r\n        public string LabwareThreeVolume { get; set; }\r\n        public string LabwareTypeTwoPlaceholderBarcodes { get; set; }\r\n        public string CapsPlaceholderBarcodes { get; set; }\r\n        public string PDPPlaceholderBarcodes { get; set; }\r\n\r\n        public int PriorityIndex\r\n            => Priority == \"High\" ? 1 : Priority == \"Medium\" ? 2 : 3;\r\n\r\n        public Job(string jobnumber, string priority, string thawtime, string cherrypicktotal, string mosaicOrderNumber, string dmsovol, int workflownumber, string labwareOneTotal, string labwareTwoTotal, string labwareThreeTotal, string labwareOneVolume, string labwareThreeVolume, string labwareonename, string labwaretwoname, string labwarethreename, string labwareTypeTwoPlaceholderBarcodes,string capsPlaceholderBarcodes, string pDPPlaceholderBarcodes)\r\n        {\r\n            JobNumber = jobnumber;\r\n            Priority = priority;\r\n            ThawTime = thawtime;\r\n            CherryPickTotal = cherrypicktotal;\r\n            MosaicOrderNumber = mosaicOrderNumber;\r\n            DMSOVolume = dmsovol;\r\n            WorkflowNumber = workflownumber;\r\n            LabwareOneTotal = labwareOneTotal;\r\n            LabwareTwoTotal = labwareTwoTotal;\r\n            LabwareOneName = labwareonename;\r\n            LabwareTwoName = labwaretwoname;\r\n            LabwareThreeName = labwarethreename;\r\n            LabwareThreeTotal = labwareThreeTotal;\r\n            LabwareOneVolume = labwareOneVolume;\r\n            LabwareThreeVolume = labwareThreeVolume;\r\n            LabwareTypeTwoPlaceholderBarcodes = labwareTypeTwoPlaceholderBarcodes;\r\n            CapsPlaceholderBarcodes = capsPlaceholderBarcodes;\r\n            PDPPlaceholderBarcodes = pDPPlaceholderBarcodes;\r\n        }\r\n\r\n        public static List<Job> ReorderJobs(List<Job> Jobs)\r\n        {\r\n            //     return JobString.OrderByDescending(j => j.Priority).ThenBy(j => j.SourceBarcode).ToList();\r\n            return Jobs.OrderBy(j => j.PriorityIndex).ToList();\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "Test properties identies",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Test_properties_identies\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            var Identities = await client.GetIdentitiesAsync(typeIdentifier:\"1\");\r\n            string testString = \"\";\r\n\r\n            foreach (var Identity in Identities) \r\n            {\r\n                testString = Identity.Properties.GetValue<string>(\"Priority\");\r\n                Serilog.Log.Information(\"testString= {testString}\", Identity.Properties.GetValue<string>(\"Priority\"));\r\n            }\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "Populate_Placeholders_Destination_Barcodes",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Populate_Placeholders_Destination_Barcodes\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            var Identities = await client.GetIdentitiesAsync(typeIdentifier: \"1\");\r\n            var orderedIdentities = Identities.OrderBy(i => i.Properties.GetValue<string>(\"Priority\"));\r\n\r\n            int LabwareTypeTwoTotal = 0;\r\n            int CherryPickTotal = 0;\r\n            int OrderID = 0;\r\n            string JobNumber = \"\";\r\n            string SourceBarcodes = \"\";\r\n            string LabwareOneName = \"\";\r\n            string LabwareTwoName = \"\";\r\n            string LabwareThreeName = \"\";\r\n            string LabwareOneTotal = \"\";\r\n            string LabwareTwoTotal = \"\";\r\n            string LabwareThreeTotal = \"\";\r\n            DateTime currentDate = DateTime.Now;\r\n            int CurrentDay = currentDate.Day;\r\n            string CapsPlaceholderBarcodes = \"\";\r\n            string PDPPlaceholderBarcodes = \"\";\r\n            string LabwareTypeTwoPlaceholderBarcodes = \"\";\r\n            string LabwareTypesForOrders = \"\";\r\n            string LabwareTypesTotalsForOrders = \"\";\r\n            string CPLabwareTypesForOrders = \"\";\r\n            string CPLabwareTypeTotalsForOrders = \"\";\r\n            int LabwareTypeOneTotal = 0;\r\n            double LabwareTypeOneVolume = 0;\r\n            int LabwareOneST10Total = 0;\r\n            int LabwareOneST30Total = 0;\r\n            double LabwareTypeThreeVolume = 0;\r\n            int LabwareThreeST10Total = 0;\r\n            int LabwareThreeST30Total = 0;\r\n            int LabwareTypeThreeTotal = 0;\r\n            int WorkflowNumber = 0;\r\n            int V10WorkflowStepsTotal = 0;\r\n            int V30WorkflowStepsTotal = 0;\r\n            string VelocityTips10PlaceholderBarcodes = \"\";\r\n            string VelocityTips30PlaceholderBarcodes = \"\";\r\n            string jobno = \"\";\r\n\r\n\r\n\r\n            SourceBarcodes = context.GetGlobalVariableValue<string>(\"Input.SourceBarcodes\");\r\n            OrderID = context.GetGlobalVariableValue<int>(\"Input.Order ID\");\r\n\r\n            List<string> REMPReturnedSources = SourceBarcodes.Split(',').ToList();\r\n            int REMPSourcesToProcess = REMPReturnedSources.Count;\r\n\r\n            Serilog.Log.Information(\"SourceBarcodes= {SourceBarcodes}\", SourceBarcodes);\r\n            Serilog.Log.Information(\"REMPSourcesToProcess= {REMPSourcesToProcess}\", REMPSourcesToProcess);\r\n\r\n\r\n\r\n            // Cap  = for each source, 1 Cap Holder\r\n\r\n            for (int i = 1; i <= (REMPSourcesToProcess); i++)\r\n            {\r\n                CapsPlaceholderBarcodes = CapsPlaceholderBarcodes + OrderID.ToString() + CurrentDay.ToString() + \"CAP\" + i + \",\";\r\n            }\r\n            CapsPlaceholderBarcodes = CapsPlaceholderBarcodes.TrimEnd(',');\r\n            // await context.AddOrUpdateGlobalVariableAsync(\"CapsPlaceholderBarcodes\", CapsPlaceholderBarcodes);\r\n            Serilog.Log.Information(\"CapsPlaceholderBarcodes= {CapsPlaceholderBarcodes}\", CapsPlaceholderBarcodes);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"CapsPlaceholderBarcodes\", CapsPlaceholderBarcodes);\r\n\r\n\r\n\r\n            // PDP  = for each source, 1 PDP \r\n            List<string> LabwareTypes = new List<string>(); // Your list (replace with your actual list)\r\n            List<string> LabwareTypeTotals = new List<string>(); // Your list (replace with your actual list)\r\n            List<string> CPLabwareTypes = new List<string>(); // Your list (replace with your actual list)\r\n            List<string> CPLabwareTypeTotals = new List<string>(); // Your list (replace with your actual list)\r\n\r\n            for (int i = 1; i <= (REMPSourcesToProcess); i++)\r\n            {\r\n                PDPPlaceholderBarcodes = PDPPlaceholderBarcodes + OrderID.ToString() + CurrentDay.ToString() + \"PDP\" + i + \",\";\r\n            }\r\n            PDPPlaceholderBarcodes = PDPPlaceholderBarcodes.TrimEnd(',');\r\n            // await context.AddOrUpdateGlobalVariableAsync(\"PDPPlaceholderBarcodes\", PDPPlaceholderBarcodes);\r\n            Serilog.Log.Information(\"PDPPlaceholderBarcodes= {PDPPlaceholderBarcodes}\", PDPPlaceholderBarcodes);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"PDPPlaceholderBarcodes\", PDPPlaceholderBarcodes);\r\n\r\n\r\n\r\n            foreach (var Identity in orderedIdentities)\r\n            {\r\n\r\n                Serilog.Log.Information(\"=======   job start =====\");\r\n                LabwareTypeTwoTotal = Identity.Properties.GetValue<int>(\"LabwareTwoTotal\");\r\n                string JobPriority = Identity.Properties.GetValue<string>(\"Priority\");\r\n                CherryPickTotal = Identity.Properties.GetValue<int>(\"CherryPickTotal\");\r\n                JobNumber = Identity.Description;\r\n                LabwareOneName = Identity.Properties.GetValue<string>(\"LabwareOneName\");\r\n                LabwareTwoName = Identity.Properties.GetValue<string>(\"LabwareTwoName\");\r\n                LabwareThreeName = Identity.Properties.GetValue<string>(\"LabwareThreeName\");\r\n                LabwareOneTotal = Identity.Properties.GetValue<string>(\"LabwareOneTotal\");\r\n                LabwareTwoTotal = Identity.Properties.GetValue<string>(\"LabwareTwoTotal\");\r\n                LabwareThreeTotal = Identity.Properties.GetValue<string>(\"LabwareThreeTotal\");\r\n                currentDate = DateTime.Now;\r\n\r\n\r\n\r\n                Serilog.Log.Information(\"CherryPickTotal= {CherryPickTotal}\", Identity.Properties.GetValue<string>(\"CherryPickTotal\"));\r\n                Serilog.Log.Information(\"JobNumber= {JobNumber}\", JobNumber);\r\n                Serilog.Log.Information(\"Priority= {Priority}\", Identity.Properties.GetValue<string>(\"Priority\"));\r\n                Serilog.Log.Information(\"LT1= {LabwareOneName}\", Identity.Properties.GetValue<string>(\"LabwareOneName\"));\r\n                Serilog.Log.Information(\"LT2= {LabwareTwoName}\", Identity.Properties.GetValue<string>(\"LabwareTwoName\"));\r\n                Serilog.Log.Information(\"LT3= {LabwareThreeName}\", Identity.Properties.GetValue<string>(\"LabwareThreeName\"));\r\n                Serilog.Log.Information(\"LTT1= {LabwareOneTotal}\", Identity.Properties.GetValue<string>(\"LabwareOneTotal\"));\r\n                Serilog.Log.Information(\"LTT2= {LabwareTwoTotal}\", Identity.Properties.GetValue<string>(\"LabwareTwoTotal\"));\r\n                Serilog.Log.Information(\"LTT3= {LabwareThreeTotal}\", Identity.Properties.GetValue<string>(\"LabwareThreeTotal\"));\r\n\r\n                // populate Assay barcodes...\r\n\r\n                for (int i = 1; i <= (CherryPickTotal); i++)\r\n                {\r\n                    if (LabwareTypeTwoPlaceholderBarcodes == \"\")\r\n                    {\r\n                        LabwareTypeTwoPlaceholderBarcodes = LabwareTypeTwoPlaceholderBarcodes + \"(\" + JobNumber.ToString() + \",\" + JobNumber.ToString() + CurrentDay.ToString() + \"Two\" + i + \",\" + JobPriority + \")\";\r\n                    }\r\n                    else\r\n                    {\r\n                        LabwareTypeTwoPlaceholderBarcodes = LabwareTypeTwoPlaceholderBarcodes + \",\" + \"(\" + JobNumber.ToString() + \",\" + JobNumber.ToString() + CurrentDay.ToString() + \"Two\" + i + \",\" + JobPriority + \")\";\r\n\r\n                    }\r\n                }\r\n                LabwareTypeTwoPlaceholderBarcodes = LabwareTypeTwoPlaceholderBarcodes.TrimEnd(',');\r\n                // await context.AddOrUpdateGlobalVariableAsync(\"LabwareTypeTwoPlaceholderBarcodes\", LabwareTypeTwoPlaceholderBarcodes);\r\n\r\n\r\n\r\n                // populate all required labware types for each job\r\n\r\n                bool LabOneExists = LabwareTypes.Contains(LabwareOneName);\r\n\r\n                if (!LabwareTypes.Contains(LabwareOneName))\r\n                {\r\n                    LabwareTypes.Add(LabwareOneName);\r\n                    LabwareTypeTotals.Add(LabwareOneTotal);\r\n                }\r\n                else\r\n                {\r\n                    int i = LabwareTypes.IndexOf(LabwareOneName);\r\n                    int CurrentNumber = Int32.Parse(LabwareTypeTotals[i]);\r\n                    CurrentNumber = CurrentNumber + Int32.Parse(LabwareOneTotal);\r\n                    LabwareTypeTotals[i] = CurrentNumber.ToString();\r\n                    //  LabwareTypeTotals.Add(CurrentNumber.ToString());\r\n\r\n                }\r\n\r\n\r\n\r\n                bool LabTwoExists = LabwareTypes.Contains(LabwareTwoName);\r\n\r\n                if (!LabwareTypes.Contains(LabwareTwoName))\r\n                {\r\n                    LabwareTypes.Add(LabwareTwoName);\r\n                    LabwareTypeTotals.Add(LabwareTwoTotal);\r\n                    CPLabwareTypes.Add(LabwareTwoName);\r\n                    CPLabwareTypeTotals.Add(LabwareTwoTotal);\r\n                }\r\n                else\r\n                {\r\n                    int i = LabwareTypes.IndexOf(LabwareTwoName);\r\n                    int CurrentNumber = Int32.Parse(LabwareTypeTotals[i]);\r\n                    CurrentNumber = CurrentNumber + Int32.Parse(LabwareTwoTotal);\r\n                    LabwareTypeTotals[i] = CurrentNumber.ToString();\r\n                    int X = CPLabwareTypes.IndexOf(LabwareTwoName);\r\n                    int CurrentLTNumber = Int32.Parse(CPLabwareTypeTotals[X]);\r\n                    CurrentLTNumber = CurrentLTNumber + Int32.Parse(LabwareTwoTotal);\r\n                    CPLabwareTypeTotals[X] = CurrentLTNumber.ToString();\r\n                    //   LabwareTypeTotals.Add(CurrentNumber.ToString());\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                bool LabThreeExists = LabwareTypes.Contains(LabwareThreeName);\r\n\r\n                if (!LabwareTypes.Contains(LabwareThreeName))\r\n                {\r\n                    LabwareTypes.Add(LabwareThreeName);\r\n                    LabwareTypeTotals.Add(LabwareThreeTotal);\r\n                }\r\n                else\r\n                {\r\n                    int i = LabwareTypes.IndexOf(LabwareThreeName);\r\n                    int CurrentNumber = Int32.Parse(LabwareTypeTotals[i]);\r\n                    CurrentNumber = CurrentNumber + Int32.Parse(LabwareThreeTotal);\r\n                    LabwareTypeTotals[i] = CurrentNumber.ToString();\r\n                    //  LabwareTypeTotals.Add(CurrentNumber.ToString());\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                // LabwareTypeOneTotal = context.GetGlobalVariableValue<int>(\"LabwareOneTotal\");\r\n                //      LabwareTypeOneVolume = context.GetGlobalVariableValue<double>(\"LabwareOneVolume\");\r\n                //    LabwareTypeThreeVolume = context.GetGlobalVariableValue<double>(\"LabwareThreeVolume\");\r\n                //   LabwareTypeThreeTotal = context.GetGlobalVariableValue<int>(\"LabwareThreeTotal\");\r\n                ///   CherryPickTotal = context.GetGlobalVariableValue<int>(\"CherryPickTotal\");\r\n                // WorkflowNumber = context.GetGlobalVariableValue<int>(\"WorkflowNum\");\r\n                LabwareTypeOneTotal = Identity.Properties.GetValue<int>(\"LabwareOneTotal\");\r\n                LabwareTypeOneVolume = Identity.Properties.GetValue<double>(\"LabwareOneVolume\");\r\n                LabwareTypeThreeVolume = Identity.Properties.GetValue<double>(\"LabwareThreeVolume\");\r\n                LabwareTypeThreeTotal = Identity.Properties.GetValue<int>(\"LabwareThreeTotal\");\r\n                CherryPickTotal = Identity.Properties.GetValue<int>(\"CherryPickTotal\");\r\n                WorkflowNumber = Identity.Properties.GetValue<int>(\"WorkflowNumber\");\r\n                jobno = Identity.Identifier;\r\n\r\n                if (LabwareTypeOneVolume <= 7)\r\n                {\r\n                    LabwareOneST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 7) && (LabwareTypeOneVolume <= 28))\r\n                {\r\n                    LabwareOneST30Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 28) && (LabwareTypeOneVolume <= 35))\r\n                {\r\n                    LabwareOneST30Total = 1;\r\n                    LabwareOneST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeOneVolume > 35) && (LabwareTypeOneVolume <= 42))\r\n                {\r\n                    LabwareOneST30Total = 2;\r\n                }\r\n\r\n                if ((LabwareTypeThreeVolume <= 7) && (LabwareTypeThreeVolume > 0))\r\n                {\r\n                    LabwareThreeST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 7) && (LabwareTypeThreeVolume <= 28))\r\n                {\r\n                    LabwareThreeST30Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 28) && (LabwareTypeThreeVolume <= 35))\r\n                {\r\n                    LabwareThreeST30Total = 1;\r\n                    LabwareThreeST10Total = 1;\r\n                }\r\n                else if ((LabwareTypeThreeVolume > 35) && (LabwareTypeThreeVolume <= 42))\r\n                {\r\n                    LabwareThreeST30Total = 2;\r\n                }\r\n\r\n                // Serilog.Log.Information(\"This will write to the console.\");\r\n\r\n                // System.IO.File.AppendAllLines(@\"C:\\Users\\LabTech\\Documents\\xx.txt\", new string []{ LabwareThreeST10Total.ToString()});\r\n\r\n                switch (WorkflowNumber)\r\n                {\r\n                    case 1:\r\n                        V10WorkflowStepsTotal = 1 + (CherryPickTotal * LabwareOneST10Total) + (CherryPickTotal * LabwareThreeST10Total);\r\n                        V30WorkflowStepsTotal = (CherryPickTotal * LabwareOneST30Total) + (CherryPickTotal * LabwareThreeST30Total);\r\n\r\n                        break;\r\n                        //  default:\r\n                        //       Console.WriteLine(\"Other day\");\r\n                        //     break;\r\n                }\r\n\r\n                //            await context.AddOrUpdateGlobalVariableAsync(\"TotalVelocity10TipBoxes\", V10WorkflowStepsTotal);\r\n                //            await context.AddOrUpdateGlobalVariableAsync(\"TotalVelocity30TipBoxes\", V30WorkflowStepsTotal);\r\n\r\n\r\n\r\n                Serilog.Log.Information(\"TotalVelocity10TipBoxes= {TotalVelocity10TipBoxes}\", V10WorkflowStepsTotal);\r\n\r\n                Serilog.Log.Information(\"TotalVelocity30TipBoxes= {TotalVelocity30TipBoxes}\", V30WorkflowStepsTotal);\r\n\r\n                VelocityTips10PlaceholderBarcodes = \"\";\r\n\r\n                for (int i = 1; i <= (V10WorkflowStepsTotal); i++)\r\n                {\r\n                    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes + JobNumber.ToString() + CurrentDay.ToString() + \"Velocity10_\" + i + \",\";\r\n                }\r\n\r\n                VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes.TrimEnd(',');\r\n\r\n                //      await context.AddOrUpdateGlobalVariableAsync(\"Velocity10TipsPlaceholderBarcodes\", VelocityTips10PlaceholderBarcodes);\r\n\r\n                Serilog.Log.Information(\"Velocity10TipsPlaceholderBarcodes= {Velocity10TipsPlaceholderBarcodes}\", VelocityTips10PlaceholderBarcodes);\r\n\r\n                VelocityTips30PlaceholderBarcodes = \"\";\r\n\r\n                for (int i = 1; i <= (V30WorkflowStepsTotal); i++)\r\n                {\r\n                    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes + JobNumber.ToString() + CurrentDay.ToString() + \"Velocity30_\" + i + \",\";\r\n                }\r\n\r\n                VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes.TrimEnd(',');\r\n\r\n                //        await context.AddOrUpdateGlobalVariableAsync(\"Velocity30TipsPlaceholderBarcodes\", VelocityTips30PlaceholderBarcodes);\r\n\r\n                Serilog.Log.Information(\"Velocity30TipsPlaceholderBarcodes= {Velocity30TipsPlaceholderBarcodes}\", VelocityTips30PlaceholderBarcodes);\r\n\r\n                Serilog.Log.Information(\"=======   job end =====\");\r\n\r\n            }\r\n\r\n\r\n            // print  all required labware types\r\n            for (int i = 0; i < LabwareTypes.Count; i++)\r\n            {\r\n                if (LabwareTypesForOrders == \"\")\r\n                {\r\n                    LabwareTypesForOrders = LabwareTypesForOrders + LabwareTypes[i];\r\n                }\r\n                else\r\n                {\r\n                    LabwareTypesForOrders = LabwareTypesForOrders + \",\" + LabwareTypes[i];\r\n\r\n                }\r\n                //Console.WriteLine(LabwareTypes[i]);\r\n            }\r\n\r\n\r\n            //    await context.AddOrUpdateGlobalVariableAsync(\"TotalVelocity10TipBoxes\", LabwareTypesForOrders);\r\n\r\n\r\n            // print  all required labware types\r\n            for (int i = 0; i < LabwareTypeTotals.Count; i++)\r\n            {\r\n                if (LabwareTypesTotalsForOrders == \"\")\r\n                {\r\n                    LabwareTypesTotalsForOrders = LabwareTypesTotalsForOrders + LabwareTypeTotals[i];\r\n                }\r\n                else\r\n                {\r\n                    LabwareTypesTotalsForOrders = LabwareTypesTotalsForOrders + \",\" + LabwareTypeTotals[i];\r\n\r\n                }\r\n                //Console.WriteLine(LabwareTypes[i]);\r\n            }\r\n\r\n\r\n            // print  all required labware types\r\n            for (int i = 0; i < CPLabwareTypes.Count; i++)\r\n            {\r\n                if (CPLabwareTypesForOrders == \"\")\r\n                {\r\n                    CPLabwareTypesForOrders = CPLabwareTypesForOrders + CPLabwareTypes[i];\r\n                }\r\n                else\r\n                {\r\n                    CPLabwareTypesForOrders = CPLabwareTypesForOrders + \",\" + CPLabwareTypes[i];\r\n\r\n                }\r\n                //Console.WriteLine(LabwareTypes[i]);\r\n            }\r\n\r\n\r\n            // print  all required labware types\r\n            for (int i = 0; i < CPLabwareTypeTotals.Count; i++)\r\n            {\r\n                if (CPLabwareTypeTotalsForOrders == \"\")\r\n                {\r\n                    CPLabwareTypeTotalsForOrders = CPLabwareTypeTotalsForOrders + CPLabwareTypeTotals[i];\r\n                }\r\n                else\r\n                {\r\n                    CPLabwareTypeTotalsForOrders = CPLabwareTypeTotalsForOrders + \",\" + CPLabwareTypeTotals[i];\r\n\r\n                }\r\n                //Console.WriteLine(LabwareTypes[i]);\r\n            }\r\n\r\n\r\n            //      await context.AddOrUpdateGlobalVariableAsync(\"LabwareTypesTotalsForOrders\", LabwareTypesTotalsForOrders);\r\n\r\n\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"LabwareTypesForOrders\", LabwareTypesForOrders);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"LabwareTypesTotalsForOrders\", LabwareTypesTotalsForOrders);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"CPLabwareTypesForOrders\", CPLabwareTypesForOrders);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"CPLabwareTypeTotalsForOrders\", CPLabwareTypeTotalsForOrders);\r\n            Serilog.Log.Information(\"LabwareTypeTwoPlaceholderBarcodes= {LabwareTypeTwoPlaceholderBarcodes}\", LabwareTypeTwoPlaceholderBarcodes);\r\n            Serilog.Log.Information(\"LabwareTypesForOrders= {LabwareTypesForOrders}\", LabwareTypesForOrders);\r\n            Serilog.Log.Information(\"LabwareTypesTotalsForOrders= {LabwareTypesTotalsForOrders}\", LabwareTypesTotalsForOrders);\r\n            Serilog.Log.Information(\"CPLabwareTypesForOrders= {CPLabwareTypesForOrders}\", CPLabwareTypesForOrders);\r\n            Serilog.Log.Information(\"CPLabwareTypeTotalsForOrders= {CPLabwareTypeTotalsForOrders}\", CPLabwareTypeTotalsForOrders);\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n",
      "language": "C#"
    }
  ],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "screens": [],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.AlertBox [#FFFFFF:20:0]",
  "color": "#FF19FF00",
  "name": "FAT1 - Workflow 1 input",
  "category": "Workflows",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}