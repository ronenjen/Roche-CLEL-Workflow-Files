{
  "procedures": [
    {
      "name": "Start",
      "sequence": {
        "children": [
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Process_State_Machine_EB_Initial",
            "name": "Run Script",
            "description": "Run Script: Process_State_Machine_EB_Initial",
            "helpText": "Runs the specified script",
            "guid": "9cd9c791-81d9-460f-a477-58eb918e14c2",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
            "helpText": "Generates and error in the workflow with the specified message",
            "backgroundColorHex": "#FFFF0000",
            "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
            "name": "Error",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "description": "Error: ",
            "isPausePointSet": false,
            "guid": "b2040c86-c7e3-4495-bb9f-aae9fb6d6d73"
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Process_EB_Sorted_Jobs",
            "name": "Run Script",
            "description": "Run Script: Process_EB_Sorted_Jobs",
            "helpText": "Runs the specified script",
            "guid": "5fca6586-b916-446f-872a-f3e31505ac0a",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.Error, Biosero.Workflow.Core",
            "helpText": "Generates and error in the workflow with the specified message",
            "backgroundColorHex": "#FFFF0000",
            "iconUrl": "PackIcon.AlertOutline [#FFFFFFFF]",
            "name": "Error",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "description": "Error: ",
            "isPausePointSet": false,
            "guid": "adaf79ae-a75f-4328-aad0-a92991883b09"
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "DebugCheckAllQueuedSources",
            "name": "Run Script",
            "description": "Run Script: DebugCheckAllQueuedSources",
            "helpText": "Runs the specified script",
            "guid": "26fdbf5f-7390-4578-a893-5ac4bd821409",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Process_State_Machine_EB_Initial",
            "name": "Run Script",
            "description": "Run Script: Process_State_Machine_EB_Initial",
            "helpText": "Runs the specified script",
            "guid": "59d99c91-866e-491f-973f-a265b2df9125",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "RequiredVelocityTips",
            "name": "Run Script",
            "description": "Run Script: RequiredVelocityTips",
            "helpText": "Runs the specified script",
            "guid": "f50efa2b-eb83-4ca0-adf0-99bd4e092315",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": true
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "FindDetailsOfCurrentPlateForEB",
            "name": "Run Script",
            "description": "Run Script: FindDetailsOfCurrentPlateForEB",
            "helpText": "Runs the specified script",
            "guid": "82a4c339-6c92-49b9-888e-6bfad1667f1b",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Deliver Tips: VelocityTips10PlaceholderBarcodes = %VelocityTips10PlaceholderBarcodes% and VelocityTips30PlaceholderBarcodes  = %VelocityTips10PlaceholderBarcodes%",
            "text": "Deliver Tips: VelocityTips10PlaceholderBarcodes = %VelocityTips10PlaceholderBarcodes% and VelocityTips30PlaceholderBarcodes  = %VelocityTips10PlaceholderBarcodes%",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "8fc39d58-7d6d-42fc-a011-9a338f0d1081",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
            "helpText": "Requires a user to approve the workflow before proceeding.",
            "backgroundColorHex": "#FFA500",
            "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
            "name": "Require Approval",
            "timeoutInMinutes": 360.0,
            "description": "Require Approval with timeout of: 360(min)",
            "guid": "0f051609-016b-4022-8965-b5f701448b25",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
            "yes": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "timeout": "01:00:00",
                  "inputParameters": [
                    {
                      "name": "AssayLabwareTypes",
                      "value": "384 V11 ST10 Tip Box Standard",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "AssayLabwareTypeZone",
                      "mapToGlobalVariableName": "Velocity10Zone",
                      "parameterType": "String"
                    },
                    {
                      "name": "AssayLabwareTypeStorage",
                      "mapToGlobalVariableName": "Velocity10Storage",
                      "parameterType": "String"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Script.OrchFindStorageForLabwareType",
                  "description": "Order: Script.OrchFindStorageForLabwareType",
                  "guid": "9cfe01ce-b16c-412f-9e55-e24d2ce7d6c2",
                  "isAsync": false,
                  "allowAsync": true,
                  "iconUrl": "PackIcon.Parachute [#FFFFFF:0:0]",
                  "backgroundColorHex": "#FFFF00CA",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                  "inputParameters": [
                    {
                      "name": "Timeout (min)",
                      "value": "100",
                      "valueType": "Double",
                      "defaultValue": "10"
                    },
                    {
                      "name": "From",
                      "value": "IO",
                      "valueType": "String"
                    },
                    {
                      "name": "To",
                      "value": "EB2",
                      "valueType": "String"
                    },
                    {
                      "name": "Barcodes",
                      "value": "%VelocityTips10PlaceholderBarcodes%",
                      "valueType": "String"
                    },
                    {
                      "name": "Metadata",
                      "value": "Source Orchestrator Workflow=%Velocity10Storage%;Labware Type=384 V11 ST10 Tip Box Standard;Destination Orchestrator Workflow=%Velocity10Storage%;Labware Designation=10 Tips",
                      "valueType": "String"
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "Barcodes",
                      "parameterType": "String"
                    },
                    {
                      "name": "Request ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Transport",
                  "description": "Transport",
                  "helpText": "Transports the specified barcode(s) from one station to another.",
                  "guid": "63eb5e8e-fce1-41f1-88a3-855369ce52f0",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                  "backgroundColorHex": "#FF666666",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "4079c0c8-8147-4be0-9903-5d1f0013a2ae",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "no": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                        "timeout": "00:30:00",
                        "inputParameters": [
                          {
                            "name": "AssayLabwareTypes",
                            "value": "384 V11 ST30 Tip Box Standard",
                            "valueType": "String",
                            "defaultValue": "",
                            "valueOptions": [],
                            "validationRules": [],
                            "tags": [
                              "User",
                              "#DarkMagenta"
                            ]
                          }
                        ],
                        "outputParameterMapping": [
                          {
                            "name": "AssayLabwareTypeZone",
                            "mapToGlobalVariableName": "Velocity30Zone",
                            "parameterType": "String"
                          },
                          {
                            "name": "AssayLabwareTypeStorage",
                            "mapToGlobalVariableName": "Velocity30Storage",
                            "parameterType": "String"
                          },
                          {
                            "name": "Module ID",
                            "mapToGlobalVariableName": "Velocity10Storage",
                            "parameterType": "String"
                          }
                        ],
                        "name": "Script.OrchFindStorageForLabwareType",
                        "description": "Order: Script.OrchFindStorageForLabwareType",
                        "guid": "361fe31f-881d-4c1e-a452-24e174546062",
                        "isAsync": false,
                        "allowAsync": true,
                        "iconUrl": "PackIcon.Parachute [#FFFFFF:0:0]",
                        "backgroundColorHex": "#FFFF00CA",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                        "inputParameters": [
                          {
                            "name": "Timeout (min)",
                            "value": "100",
                            "valueType": "Double",
                            "defaultValue": "10"
                          },
                          {
                            "name": "From",
                            "value": "IO",
                            "valueType": "String"
                          },
                          {
                            "name": "To",
                            "value": "EB2",
                            "valueType": "String"
                          },
                          {
                            "name": "Barcodes",
                            "value": "%VelocityTips30PlaceholderBarcodes%",
                            "valueType": "String"
                          },
                          {
                            "name": "Metadata",
                            "value": "Source Orchestrator Workflow=%Velocity30Storage%;Labware Type=384 V11 ST30 Tip Box Standard;Destination Orchestrator Workflow=%Velocity30Storage%;Labware Designation=30 Tips",
                            "valueType": "String"
                          }
                        ],
                        "outputParameterMapping": [
                          {
                            "name": "Barcodes",
                            "parameterType": "String"
                          },
                          {
                            "name": "Request ID",
                            "parameterType": "String"
                          }
                        ],
                        "name": "Transport",
                        "description": "Transport",
                        "helpText": "Transports the specified barcode(s) from one station to another.",
                        "guid": "870ab07c-7734-407c-b22d-447c7f077d82",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                        "backgroundColorHex": "#FF666666",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "f6af83e1-817b-4c69-b6d0-1c75c63be3a8",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "2a29522a-635c-4ef2-a361-5b8966994737",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "VelocityTips30PlaceholderBarcodes",
                    "right": "",
                    "evaluator": "NotEqual"
                  },
                  "name": "Branch",
                  "description": "Branch if VelocityTips30PlaceholderBarcodes ≠ ",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "guid": "aebfb02f-e343-4731-9253-449c0ca053a8",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "backgroundColorHex": "#FFDEDE81",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "853066f6-1074-4d4b-b854-196b5342edfe",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "VelocityTips10PlaceholderBarcodes",
              "right": "",
              "evaluator": "NotEqual"
            },
            "name": "Branch",
            "description": "Branch if VelocityTips10PlaceholderBarcodes ≠ ",
            "helpText": "Evaluates a condition and branches accordingly",
            "guid": "fc4ed5ec-aa2a-498a-9aae-43e0d6643691",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
            "backgroundColorHex": "#FFDEDE81",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Tips Delivered to EB",
            "text": "Tips Delivered to EB",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "b135808b-c38e-4d75-bb81-4a93e9567d3c",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Deliver Destination Plates, ReplicateOneBarcodes = %ReplicateOneBarcodes% and ReplicateTwoBarcodes = %ReplicateTwoBarcodes%",
            "text": "Deliver Destination Plates, ReplicateOneBarcodes = %ReplicateOneBarcodes% and ReplicateTwoBarcodes = %ReplicateTwoBarcodes%",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "49b9d772-6302-41a2-bed5-1a75c14572d1",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: ======================================",
            "text": "======================================",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "50bb9e48-ed71-4e10-b16c-55dcf3669e49",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
            "helpText": "Requires a user to approve the workflow before proceeding.",
            "backgroundColorHex": "#FFA500",
            "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
            "name": "Require Approval",
            "timeoutInMinutes": 360.0,
            "description": "Require Approval with timeout of: 360(min)",
            "guid": "974a64cf-992a-4da8-8bbe-9a0eb244e4e0",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
            "sequence": {
              "children": [
                {
                  "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                  "scriptName": "Process_EB_Sorted_Jobs",
                  "name": "Run Script",
                  "description": "Run Script: Process_EB_Sorted_Jobs",
                  "helpText": "Runs the specified script",
                  "guid": "d54a6f0d-24ba-4e53-9025-260c44a7156e",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                  "backgroundColorHex": "#FFF58CFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "timeout": "00:30:00",
                  "inputParameters": [
                    {
                      "name": "AssayLabwareTypes",
                      "value": "%REPOneLabwareType%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "AssayLabwareTypeZone",
                      "mapToGlobalVariableName": "RepOneZone",
                      "parameterType": "String"
                    },
                    {
                      "name": "AssayLabwareTypeStorage",
                      "mapToGlobalVariableName": "RepOneStorage",
                      "parameterType": "String"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Script.OrchFindStorageForLabwareType",
                  "description": "Order: Script.OrchFindStorageForLabwareType",
                  "guid": "8cdf24bf-c682-47da-92e5-a53eae7fc624",
                  "isAsync": false,
                  "allowAsync": true,
                  "iconUrl": "PackIcon.Parachute [#FFFFFF:0:0]",
                  "backgroundColorHex": "#FFFF00CA",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                  "timeout": "00:30:00",
                  "inputParameters": [
                    {
                      "name": "AssayLabwareTypes",
                      "value": "%REPTwoLabwareType%",
                      "valueType": "String",
                      "defaultValue": "",
                      "valueOptions": [],
                      "validationRules": [],
                      "tags": [
                        "User",
                        "#DarkMagenta"
                      ]
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "AssayLabwareTypeZone",
                      "mapToGlobalVariableName": "RepTwoZone",
                      "parameterType": "String"
                    },
                    {
                      "name": "AssayLabwareTypeStorage",
                      "mapToGlobalVariableName": "RepTwoStorage",
                      "parameterType": "String"
                    },
                    {
                      "name": "Module ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Script.OrchFindStorageForLabwareType",
                  "description": "Order: Script.OrchFindStorageForLabwareType",
                  "guid": "03f43f26-9893-41ac-a166-edc483c6643b",
                  "isAsync": false,
                  "allowAsync": true,
                  "iconUrl": "PackIcon.Parachute [#FFFFFF:0:0]",
                  "backgroundColorHex": "#FFFF00CA",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "helpText": "Executes two sequences in parallel",
                        "backgroundColorHex": "#FF72EAFF",
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "name": "Parallel",
                        "left": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                              "inputParameters": [
                                {
                                  "name": "Timeout (min)",
                                  "value": "100",
                                  "valueType": "Double",
                                  "defaultValue": "10"
                                },
                                {
                                  "name": "From",
                                  "value": "IO",
                                  "valueType": "String"
                                },
                                {
                                  "name": "To",
                                  "value": "EB2",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Barcodes",
                                  "value": "%ReplicateOneBarcodes%",
                                  "valueType": "String"
                                },
                                {
                                  "name": "Metadata",
                                  "value": "Source Orchestrator Workflow=%RepOneStorage%;Labware Type=%REPOneLabwareType%;Destination Orchestrator Workflow=%RepOneStorage%;Job=%Job Number%;Labware Designation=Destination Labware",
                                  "valueType": "String"
                                }
                              ],
                              "outputParameterMapping": [
                                {
                                  "name": "Barcodes",
                                  "parameterType": "String"
                                },
                                {
                                  "name": "Request ID",
                                  "parameterType": "String"
                                }
                              ],
                              "name": "Transport",
                              "description": "Transport",
                              "helpText": "Transports the specified barcode(s) from one station to another.",
                              "guid": "8be184d5-4798-4f9c-84ac-2dff7e1b434e",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                              "backgroundColorHex": "#FF666666",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "1614c87a-80fb-4289-9ae4-a85ef4b5dbdd",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                              "yes": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                    "inputParameters": [
                                      {
                                        "name": "Timeout (min)",
                                        "value": "100",
                                        "valueType": "Double",
                                        "defaultValue": "10"
                                      },
                                      {
                                        "name": "From",
                                        "value": "IO",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "To",
                                        "value": "EB2",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Barcodes",
                                        "value": "%ReplicateTwoBarcodes%",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "Source Orchestrator Workflow=%RepTwoStorage%;Labware Type=%REPTwoLabwareType%;Destination Orchestrator Workflow=%RepRepTwoStorageStorage%;Job=%Job Number%;Labware Designation=Destination Labware",
                                        "valueType": "String"
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Barcodes",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Request ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Transport",
                                    "description": "Transport",
                                    "helpText": "Transports the specified barcode(s) from one station to another.",
                                    "guid": "807a85e4-b458-4698-807d-d620b96f3a7a",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                    "backgroundColorHex": "#FF666666",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "358f8322-fd19-4547-af06-e20184cda468",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "no": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "60d04f69-8116-4f86-8b2b-806fdc7c1f6b",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "RepTwoPlaceholderBarcodes",
                                "right": "",
                                "evaluator": "NotEqual"
                              },
                              "name": "Branch",
                              "description": "Branch if RepTwoPlaceholderBarcodes ≠ ",
                              "helpText": "Evaluates a condition and branches accordingly",
                              "guid": "bd334f31-8c56-4b21-a406-7f411e22cd14",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                              "backgroundColorHex": "#FFDEDE81",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "c52f88ca-46b8-4572-9848-0fbdce433d0d",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "description": "Parallel",
                        "guid": "98664e90-f933-451c-9057-9d536b1f1665",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "734c101c-fe7c-4fb1-bcab-3c6fd7609439",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "3870f2b4-69da-49f6-8e46-56234c80a4ef",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "Job Fragment",
                    "right": "Replicate",
                    "evaluator": "Equal"
                  },
                  "name": "Branch",
                  "description": "Branch if Job Fragment = Replicate",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "guid": "46736cb3-8aee-495f-9942-3bbdebe28240",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "backgroundColorHex": "#FFDEDE81",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "4163051e-7c21-4e8d-925c-c6db698eb623",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "Prioritised Jobs",
              "right": "",
              "evaluator": "NotEqual"
            },
            "evaluateAtEnd": false,
            "loopCount": 0,
            "loopType": "While",
            "foreachCollectionVariable": "",
            "foreachItemVariable": "",
            "foreachDelimiter": ",",
            "name": "Loop",
            "description": "Loop While Prioritised Jobs ≠ ",
            "helpText": "A loop over a sequence of elements",
            "guid": "2638182b-d83c-4620-ae35-945a16e638f9",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
            "backgroundColorHex": "#FF08EAA7",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Destnation Plates delivered to EB ",
            "text": "Destnation Plates delivered to EB ",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "9bada52d-324a-4689-b436-12038bd70e8c",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Bring Source Plates",
            "text": "Bring Source Plates",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "e218e7bd-7b52-4210-9650-224503283fea",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: ======================================",
            "text": "======================================",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "f8a9c3db-6aa2-4a62-8c37-d274641a25c3",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
            "helpText": "Requires a user to approve the workflow before proceeding.",
            "backgroundColorHex": "#FFA500",
            "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
            "name": "Require Approval",
            "timeoutInMinutes": 360.0,
            "description": "Require Approval with timeout of: 360(min)",
            "guid": "bedc2154-25f8-40a2-82ff-05a526a096bd",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "CheckAllQueuedEBSources",
            "name": "Run Script",
            "description": "Run Script: CheckAllQueuedEBSources",
            "helpText": "Runs the specified script",
            "guid": "1b86c0b4-ead6-4ae0-9d2d-18284fb0f48b",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: this should  change\r\n\r\ncount with a script the number of plates from the order that are in the IOC (and so done) and compare it to the Queued plates - if equal then the order is finished!",
            "text": "this should  change\r\n\r\ncount with a script the number of plates from the order that are in the IOC (and so done) and compare it to the Queued plates - if equal then the order is finished!",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "fdd99b9b-5d0d-4aa0-8204-2dfccfab8409",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
            "sequence": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                  "description": "Log: transported are  %TotalEBTransportedSources%\r\n------------------- queued are %TotalEBQueuedDestinedSources%",
                  "text": "transported are  %TotalEBTransportedSources%\r\n------------------- queued are %TotalEBQueuedDestinedSources%",
                  "appendNewLine": false,
                  "name": "Log",
                  "helpText": "Writes to the log",
                  "guid": "395b5ed3-5d6c-4c80-af6e-398606e9501a",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                  "backgroundColorHex": "#FFC69AE8",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                  "yes": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "CheckAllQueuedEBSources",
                        "name": "Run Script",
                        "description": "Run Script: CheckAllQueuedEBSources",
                        "helpText": "Runs the specified script",
                        "guid": "1c278aed-d458-41ac-8e9c-21b6a9a64b19",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                        "description": "Log: TotalEBReadySources = %TotalEBReadySources%",
                        "text": "TotalEBReadySources = %TotalEBReadySources%",
                        "appendNewLine": false,
                        "name": "Log",
                        "helpText": "Writes to the log",
                        "guid": "c888a207-3635-412c-a58d-29f019106f6d",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                        "backgroundColorHex": "#FFC69AE8",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "CheckAllQueuedEBSources",
                              "name": "Run Script",
                              "description": "Run Script: CheckAllQueuedEBSources",
                              "helpText": "Runs the specified script",
                              "guid": "eaaf2965-e9f1-46a7-aa99-da7c6492ed44",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                              "seconds": 10.0,
                              "minutes": 0.0,
                              "hours": 0.0,
                              "name": "Delay",
                              "description": "Delay 0:0:10",
                              "helpText": "Delays the workflow for the specified amount of time",
                              "guid": "44a0becb-26b7-4718-86c6-189dfeb5fe4b",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FF26A9FF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: EBSourcesToBeTransferred = %EBSourcesToBeTransferred%",
                              "text": "EBSourcesToBeTransferred = %EBSourcesToBeTransferred%",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "ca1f1761-42e7-44c6-b6a3-777ca802d2ce",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                              "sequence": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "scriptName": "GetFirstPlateToBeSentToEB",
                                    "name": "Run Script",
                                    "description": "Run Script: GetFirstPlateToBeSentToEB",
                                    "helpText": "Runs the specified script",
                                    "guid": "8f5956fb-2a8f-4e69-bc51-fa5a8783b7f3",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                    "yes": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                          "timeout": "00:30:00",
                                          "inputParameters": [],
                                          "outputParameterMapping": [
                                            {
                                              "name": "SMSourcesCurrentlyOnEB",
                                              "mapToGlobalVariableName": "CurrentSourcesOnEB",
                                              "parameterType": "String"
                                            },
                                            {
                                              "name": "SMSourcesCurrentlyOnEBPriority",
                                              "mapToGlobalVariableName": "CurrentEBPriority",
                                              "parameterType": "String"
                                            },
                                            {
                                              "name": "Module ID",
                                              "parameterType": "String"
                                            }
                                          ],
                                          "name": "Script.FindEchoSourcesCurrentlyRunning",
                                          "description": "Order: Script.FindEchoSourcesCurrentlyRunning",
                                          "guid": "850792d9-2171-4b83-863a-46b280155932",
                                          "isAsync": false,
                                          "allowAsync": true,
                                          "iconUrl": "PackIcon.Telegram [#FFFFFF:0:0]",
                                          "backgroundColorHex": "#0000FF",
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        },
                                        {
                                          "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                                          "yes": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                "scriptName": "FindDetailsOfCurrentPlateForEB",
                                                "name": "Run Script",
                                                "description": "Run Script: FindDetailsOfCurrentPlateForEB",
                                                "helpText": "Runs the specified script",
                                                "guid": "e1e6ac5c-77d1-48e8-aa1a-bae1e7439a5a",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                "backgroundColorHex": "#FFF58CFF",
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "593b57f6-f9ca-48ae-9bbc-d30acd5184a4",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "no": {
                                            "children": [
                                              {
                                                "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                "scriptName": "ResetTransferredPlatesValuesedEBSources",
                                                "name": "Run Script",
                                                "description": "Run Script: ResetTransferredPlatesValuesedEBSources",
                                                "helpText": "Runs the specified script",
                                                "guid": "83503c43-36ad-4607-aa05-d70eb938cc5b",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                "backgroundColorHex": "#FFF58CFF",
                                                "isDisabled": false,
                                                "isPausePointSet": true
                                              },
                                              {
                                                "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
                                                "helpText": "Requires a user to approve the workflow before proceeding.",
                                                "backgroundColorHex": "#FFA500",
                                                "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
                                                "name": "Require Approval",
                                                "timeoutInMinutes": 360.0,
                                                "description": "Require Approval with timeout of: 360(min)",
                                                "guid": "f7e54203-a979-4b4f-8127-ebaf27f50088",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "isDisabled": true,
                                                "isPausePointSet": false
                                              },
                                              {
                                                "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                                "inputParameters": [
                                                  {
                                                    "name": "Timeout (min)",
                                                    "value": "100",
                                                    "valueType": "Double",
                                                    "defaultValue": "10"
                                                  },
                                                  {
                                                    "name": "From",
                                                    "value": "CP",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "To",
                                                    "value": "EB2",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "Barcodes",
                                                    "value": "%CurrentSourcePlate%",
                                                    "valueType": "String"
                                                  },
                                                  {
                                                    "name": "Metadata",
                                                    "value": "Source Orchestrator Workflow=Standard Assay;Labware Designation=Source Labware;Labware Type=%EBRempSourceLabwareType%;Order=%Input.OrderId%;Work Type=Echo;Job=%Job Number%;Priority=%JobPriorityNumber%;EB Destination=%DestinationForEB%;EB Source=%SourceForEB%;EB Instructions=%InstructionsForEB%",
                                                    "valueType": "String"
                                                  }
                                                ],
                                                "outputParameterMapping": [
                                                  {
                                                    "name": "Barcodes",
                                                    "mapToGlobalVariableName": "EBSources",
                                                    "parameterType": "String"
                                                  },
                                                  {
                                                    "name": "Request ID",
                                                    "parameterType": "String"
                                                  }
                                                ],
                                                "name": "Transport",
                                                "description": "Transport",
                                                "helpText": "Transports the specified barcode(s) from one station to another.",
                                                "guid": "7acd9c26-efcb-4da3-897d-d32c496c0366",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                                "backgroundColorHex": "#FF666666",
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              },
                                              {
                                                "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                                "scriptName": "CheckAllQueuedEBSources",
                                                "name": "Run Script",
                                                "description": "Run Script: CheckAllQueuedEBSources",
                                                "helpText": "Runs the specified script",
                                                "guid": "3a5a2449-a04a-45bf-9574-fb3a35fa02b4",
                                                "isAsync": false,
                                                "allowAsync": false,
                                                "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                                "backgroundColorHex": "#FFF58CFF",
                                                "isDisabled": false,
                                                "isPausePointSet": false
                                              }
                                            ],
                                            "name": "Sequence",
                                            "description": "Sequence",
                                            "helpText": "A sequence of workflow elements",
                                            "guid": "8b12bf86-7c28-4499-b92b-e5ee70b14195",
                                            "isAsync": false,
                                            "allowAsync": false,
                                            "backgroundColorHex": "#00000000",
                                            "isDisabled": false,
                                            "isPausePointSet": false
                                          },
                                          "evaluation": {
                                            "left": "CurrentSourcesOnEB",
                                            "right": "%CurrentSourcePlate%",
                                            "evaluator": "Contains"
                                          },
                                          "name": "Branch",
                                          "description": "Branch if CurrentSourcesOnEB contains %CurrentSourcePlate%",
                                          "helpText": "Evaluates a condition and branches accordingly",
                                          "guid": "9c31d6ec-f7d8-4f3d-92de-d8f84bc31dd6",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                          "backgroundColorHex": "#FFDEDE81",
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "335a6802-e84b-4c38-97d3-67bf9affdc46",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "no": {
                                      "children": [
                                        {
                                          "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                                          "description": "Log: EMPTY SOURCE PLATE LIST",
                                          "text": "EMPTY SOURCE PLATE LIST",
                                          "appendNewLine": false,
                                          "name": "Log",
                                          "helpText": "Writes to the log",
                                          "guid": "eebeca17-f6f0-43d4-ade9-c90f1af05f86",
                                          "isAsync": false,
                                          "allowAsync": false,
                                          "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                                          "backgroundColorHex": "#FFC69AE8",
                                          "isDisabled": false,
                                          "isPausePointSet": false
                                        }
                                      ],
                                      "name": "Sequence",
                                      "description": "Sequence",
                                      "helpText": "A sequence of workflow elements",
                                      "guid": "25950119-5a9f-4845-b4e6-1305a03393f4",
                                      "isAsync": false,
                                      "allowAsync": false,
                                      "backgroundColorHex": "#00000000",
                                      "isDisabled": false,
                                      "isPausePointSet": false
                                    },
                                    "evaluation": {
                                      "left": "CurrentSourcePlate",
                                      "right": "",
                                      "evaluator": "NotEqual"
                                    },
                                    "name": "Branch",
                                    "description": "Branch if CurrentSourcePlate ≠ ",
                                    "helpText": "Evaluates a condition and branches accordingly",
                                    "guid": "8ad1daef-c90b-4d7d-b2cd-8f8b96a7fc5b",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                                    "backgroundColorHex": "#FFDEDE81",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "adee0fb0-f10a-4793-852f-6ec2afc431a9",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "evaluation": {
                                "left": "EBSourcesToBeTransferred",
                                "right": "",
                                "evaluator": "NotEqual"
                              },
                              "evaluateAtEnd": false,
                              "loopCount": 0,
                              "loopType": "While",
                              "foreachCollectionVariable": "",
                              "foreachItemVariable": "",
                              "foreachDelimiter": ",",
                              "name": "Loop",
                              "description": "Loop While EBSourcesToBeTransferred ≠ ",
                              "helpText": "A loop over a sequence of elements",
                              "guid": "56caaa8e-63e6-4b89-97de-2c93c7608824",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                              "backgroundColorHex": "#FF08EAA7",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "cbf5543a-f74c-4630-b475-24add87b5ddb",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                              "seconds": 15.0,
                              "minutes": 0.0,
                              "hours": 0.0,
                              "name": "Delay",
                              "description": "Delay 0:0:15",
                              "helpText": "Delays the workflow for the specified amount of time",
                              "guid": "ffdd3aa6-7073-4130-888c-56e34cf20d28",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FF26A9FF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                              "scriptName": "CheckAllQueuedEBSources",
                              "name": "Run Script",
                              "description": "Run Script: CheckAllQueuedEBSources",
                              "helpText": "Runs the specified script",
                              "guid": "cd83dd2f-4195-4a1a-8430-9072b8118c1d",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                              "backgroundColorHex": "#FFF58CFF",
                              "isDisabled": false,
                              "isPausePointSet": false
                            },
                            {
                              "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
                              "description": "Log: AA",
                              "text": "AA",
                              "appendNewLine": false,
                              "name": "Log",
                              "helpText": "Writes to the log",
                              "guid": "c80294cb-71f4-4d8e-a47d-1757adc5feb5",
                              "isAsync": false,
                              "allowAsync": false,
                              "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
                              "backgroundColorHex": "#FFC69AE8",
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "dad3ead7-f2a4-41f4-b5e2-f68e8834b01e",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "TotalEBReadySources",
                          "right": "0",
                          "evaluator": "GreaterThan"
                        },
                        "name": "Branch",
                        "description": "Branch if TotalEBReadySources > 0",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "5f72e81e-42a4-4f80-8643-448521241e9d",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "f197033e-6968-41b7-875e-2503ef153cf6",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "no": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                        "seconds": 20.0,
                        "minutes": 0.0,
                        "hours": 0.0,
                        "name": "Delay",
                        "description": "Delay 0:0:20",
                        "helpText": "Delays the workflow for the specified amount of time",
                        "guid": "22fcd781-d31e-4116-b429-a27dcee7a629",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FF26A9FF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "CheckAllQueuedEBSources",
                        "name": "Run Script",
                        "description": "Run Script: CheckAllQueuedEBSources",
                        "helpText": "Runs the specified script",
                        "guid": "4d343eb6-574e-4ee0-b708-a3cc700b64ee",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "8dc4fa46-0888-4af4-9361-d64fcebc8a9b",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "TotalEBQueuedDestinedSources",
                    "right": "%TotalEBTransportedSources%",
                    "evaluator": "NotEqual"
                  },
                  "name": "Branch",
                  "description": "Branch if TotalEBQueuedDestinedSources ≠ %TotalEBTransportedSources%",
                  "helpText": "Evaluates a condition and branches accordingly",
                  "guid": "e1cfa0cf-775a-4772-ba32-3940fc4f89d5",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                  "backgroundColorHex": "#FFDEDE81",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "d5f636c9-c4a9-448f-bc08-821287d3fabf",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "evaluation": {
              "left": "TotalEBTransportedSources",
              "right": "%TotalEBQueuedDestinedSources%",
              "evaluator": "NotEqual"
            },
            "evaluateAtEnd": false,
            "loopCount": 0,
            "loopType": "While",
            "foreachCollectionVariable": "",
            "foreachItemVariable": "",
            "foreachDelimiter": ",",
            "name": "Loop",
            "description": "Loop While TotalEBTransportedSources ≠ %TotalEBQueuedDestinedSources%",
            "helpText": "A loop over a sequence of elements",
            "guid": "c2323694-65b4-4f7b-9cda-522ebc1f5aa6",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
            "backgroundColorHex": "#FF08EAA7",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Source Plates  have been Processed",
            "text": "Source Plates  have been Processed",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "cb04ec19-edc6-4ed4-9196-aa3bee4e2c86",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: ======================================",
            "text": "======================================",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "c32a8087-0ee9-4e14-8824-b858f28023ab",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Return Finished Plates to IOC",
            "text": "Return Finished Plates to IOC",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "870aef4e-9e8e-4bfd-84c1-298529a7b80e",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
            "helpText": "Requires a user to approve the workflow before proceeding.",
            "backgroundColorHex": "#FFA500",
            "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
            "name": "Require Approval",
            "timeoutInMinutes": 360.0,
            "description": "Require Approval with timeout of: 360(min)",
            "guid": "a53c6824-ab9d-4609-96ff-82995288c165",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
            "scriptName": "Check_Finished_Plates_In_EB",
            "name": "Run Script",
            "description": "Run Script: Check_Finished_Plates_In_EB",
            "helpText": "Runs the specified script",
            "guid": "4118c484-e98e-4cb9-96d7-5983cd32e4d6",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
            "backgroundColorHex": "#FFF58CFF",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
            "helpText": "Executes two sequences in parallel",
            "backgroundColorHex": "#FF72EAFF",
            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
            "name": "Parallel",
            "left": {
              "children": [
                {
                  "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                  "scriptName": "Check_All_Echo_Plates_Finished",
                  "name": "Run Script",
                  "description": "Run Script: Check_All_Echo_Plates_Finished",
                  "helpText": "Runs the specified script",
                  "guid": "b0dd59b0-a129-4341-a710-f6968634f279",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                  "backgroundColorHex": "#FFF58CFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                  "sequence": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                        "seconds": 10.0,
                        "minutes": 0.0,
                        "hours": 0.0,
                        "name": "Delay",
                        "description": "Delay 0:0:10",
                        "helpText": "Delays the workflow for the specified amount of time",
                        "guid": "791bb76c-2676-4a89-8c1d-b18213e46aa3",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FF26A9FF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "Check_All_Echo_Plates_Finished",
                        "name": "Run Script",
                        "description": "Run Script: Check_All_Echo_Plates_Finished",
                        "helpText": "Runs the specified script",
                        "guid": "766dfa9a-be34-41f7-87b8-41aa6ba3d23f",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "d0448a75-48d6-4f26-a03f-02ba49ad9941",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "Echo Plates Not Finished",
                    "right": "true",
                    "evaluator": "Equal"
                  },
                  "evaluateAtEnd": false,
                  "loopCount": 0,
                  "loopType": "While",
                  "foreachCollectionVariable": "",
                  "foreachItemVariable": "",
                  "foreachDelimiter": ",",
                  "name": "Loop",
                  "description": "Loop While Echo Plates Not Finished = true",
                  "helpText": "A loop over a sequence of elements",
                  "guid": "91f770f0-2260-40b5-bdf0-71718ec10c2c",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                  "backgroundColorHex": "#FF08EAA7",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                  "inputParameters": [
                    {
                      "name": "Timeout (min)",
                      "value": "10",
                      "valueType": "Double",
                      "defaultValue": "10"
                    },
                    {
                      "name": "From",
                      "value": "EB2",
                      "valueType": "String"
                    },
                    {
                      "name": "To",
                      "value": "IO",
                      "valueType": "String"
                    },
                    {
                      "name": "Barcodes",
                      "value": "%Finished Echo Plates%",
                      "valueType": "String"
                    },
                    {
                      "name": "Metadata",
                      "value": "Zone=Source Plates;Labware Designation=EB Plates;Labware Type=%EchoDestLabwareType%;Zone=Destination Plates;Labware Designation=EB Plates",
                      "valueType": "String"
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "Barcodes",
                      "parameterType": "String"
                    },
                    {
                      "name": "Request ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Transport",
                  "description": "Transport",
                  "helpText": "Transports the specified barcode(s) from one station to another.",
                  "guid": "c07928f7-9f8b-4279-b047-0a57cc886860",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                  "backgroundColorHex": "#FF666666",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "013f9401-7f3a-4184-92a4-ce95b7d98c18",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "right": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                  "seconds": 1.0,
                  "minutes": 0.0,
                  "hours": 0.0,
                  "name": "Delay",
                  "description": "Delay 0:0:1",
                  "helpText": "Delays the workflow for the specified amount of time",
                  "guid": "85e8111c-e5a9-4fd6-a9a8-c388ebbc2d21",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                  "backgroundColorHex": "#FF26A9FF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                  "scriptName": "Check_All_Source_Echo_Plates_Finished",
                  "name": "Run Script",
                  "description": "Run Script: Check_All_Source_Echo_Plates_Finished",
                  "helpText": "Runs the specified script",
                  "guid": "7b00a21f-576d-4bf2-ac17-50ee553e6286",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                  "backgroundColorHex": "#FFF58CFF",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Loop, Biosero.Workflow.Core",
                  "sequence": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                        "seconds": 20.0,
                        "minutes": 0.0,
                        "hours": 0.0,
                        "name": "Delay",
                        "description": "Delay 0:0:20",
                        "helpText": "Delays the workflow for the specified amount of time",
                        "guid": "fbb73ee5-452a-4007-b738-30e9a3c24ccd",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FF26A9FF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      },
                      {
                        "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                        "scriptName": "Check_All_Source_Echo_Plates_Finished",
                        "name": "Run Script",
                        "description": "Run Script: Check_All_Source_Echo_Plates_Finished",
                        "helpText": "Runs the specified script",
                        "guid": "bd4b1e0d-856b-4343-862f-532643c8ac2a",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                        "backgroundColorHex": "#FFF58CFF",
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "3f2d3021-d11e-4978-bbf8-624f99a9b446",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "evaluation": {
                    "left": "Source Echo Plates Not Finished",
                    "right": "true",
                    "evaluator": "Equal"
                  },
                  "evaluateAtEnd": false,
                  "loopCount": 0,
                  "loopType": "While",
                  "foreachCollectionVariable": "",
                  "foreachItemVariable": "",
                  "foreachDelimiter": ",",
                  "name": "Loop",
                  "description": "Loop While Source Echo Plates Not Finished = true",
                  "helpText": "A loop over a sequence of elements",
                  "guid": "40c9be99-a35a-427d-9441-f1e959ae852e",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.Reload [#FFFFFFFF]",
                  "backgroundColorHex": "#FF08EAA7",
                  "isDisabled": false,
                  "isPausePointSet": false
                },
                {
                  "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                  "inputParameters": [
                    {
                      "name": "Timeout (min)",
                      "value": "180",
                      "valueType": "Double",
                      "defaultValue": "10"
                    },
                    {
                      "name": "From",
                      "value": "EB2",
                      "valueType": "String"
                    },
                    {
                      "name": "To",
                      "value": "IO",
                      "valueType": "String"
                    },
                    {
                      "name": "Barcodes",
                      "value": "%Finished Source Plates%",
                      "valueType": "String"
                    },
                    {
                      "name": "Metadata",
                      "value": "Zone=Source Plates;Labware Designation=EB Plates;Labware Type=%EchoSourceLabwareType%;Zone=Source Plates;Labware Designation=EB Plates",
                      "valueType": "String"
                    }
                  ],
                  "outputParameterMapping": [
                    {
                      "name": "Barcodes",
                      "parameterType": "String"
                    },
                    {
                      "name": "Request ID",
                      "parameterType": "String"
                    }
                  ],
                  "name": "Transport",
                  "description": "Transport",
                  "helpText": "Transports the specified barcode(s) from one station to another.",
                  "guid": "e2fd3159-c940-4a27-8b3c-b65eed9b9093",
                  "isAsync": false,
                  "allowAsync": false,
                  "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                  "backgroundColorHex": "#FF666666",
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "88bcb373-e8bf-4316-ac9c-c438f668b833",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "description": "Parallel",
            "guid": "0166d17e-3ad9-4d61-9f73-a36f63e32113",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.WriteToLog, Biosero.Workflow.Core",
            "description": "Log: Done",
            "text": "Done",
            "appendNewLine": false,
            "name": "Log",
            "helpText": "Writes to the log",
            "guid": "d7b8cc57-10f1-42b8-a1e2-2dcd0c942144",
            "isAsync": false,
            "allowAsync": false,
            "iconUrl": "PackIcon.Feather [#FFFFFFFF]",
            "backgroundColorHex": "#FFC69AE8",
            "isDisabled": false,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Elements.RequireApproval, Biosero.Workflow.Core",
            "helpText": "Requires a user to approve the workflow before proceeding.",
            "backgroundColorHex": "#FFA500",
            "iconUrl": "PackIcon.PersonCheck [#FFFFFFFF]",
            "name": "Require Approval",
            "timeoutInMinutes": 360.0,
            "description": "Require Approval with timeout of: 360(min)",
            "guid": "99daa100-2e88-4f7a-a5b4-8222769efcf0",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": true,
            "isPausePointSet": false
          },
          {
            "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
            "helpText": "Executes two sequences in parallel",
            "backgroundColorHex": "#FF72EAFF",
            "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
            "name": "Parallel",
            "left": {
              "children": [],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "b0165680-df27-4e89-81ac-846ccd2edc4f",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "right": {
              "children": [
                {
                  "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                  "helpText": "Executes two sequences in parallel",
                  "backgroundColorHex": "#FF72EAFF",
                  "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                  "name": "Parallel",
                  "left": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                        "helpText": "Executes two sequences in parallel",
                        "backgroundColorHex": "#FF72EAFF",
                        "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                        "name": "Parallel",
                        "left": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "2e27dac0-e107-4b28-aaec-12a418d46aec",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "right": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                              "helpText": "Executes two sequences in parallel",
                              "backgroundColorHex": "#FF72EAFF",
                              "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                              "name": "Parallel",
                              "left": {
                                "children": [],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "a9dc9eab-2ac7-461b-949e-9ad9ed953ad3",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "right": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Elements.Delay, Biosero.Workflow.Core",
                                    "seconds": 0.0,
                                    "minutes": 5.0,
                                    "hours": 0.0,
                                    "name": "Delay",
                                    "description": "Delay 0:5:0",
                                    "helpText": "Delays the workflow for the specified amount of time",
                                    "guid": "e2754c0f-c5fa-4e2e-b731-01be5684a05c",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.ClockOutline [#FFFFFFFF]",
                                    "backgroundColorHex": "#FF26A9FF",
                                    "isDisabled": true,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "5fb4f6d0-6979-4c9c-9197-e999ffa0d192",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "description": "Parallel",
                              "guid": "443faeb0-291a-4e5b-a94a-6a36ee147572",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "a9056b58-4236-4c9f-9d63-0f0b44127efb",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "description": "Parallel",
                        "guid": "379f1f88-12e2-43cb-b6af-b5e655bfd462",
                        "isAsync": false,
                        "allowAsync": false,
                        "isDisabled": false,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "cb08cc4c-a417-4cd4-8a9b-0be44e0ee31f",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "right": {
                    "children": [
                      {
                        "$type": "Biosero.Workflow.Branch, Biosero.Workflow.Core",
                        "yes": {
                          "children": [
                            {
                              "$type": "Biosero.Workflow.Parallel, Biosero.Workflow.Core",
                              "helpText": "Executes two sequences in parallel",
                              "backgroundColorHex": "#FF72EAFF",
                              "iconUrl": "PackIcon.CallSplit [#FFFFFFFF:180]",
                              "name": "Parallel",
                              "left": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.RunScript, Biosero.Workflow.Core",
                                    "scriptName": "Process_EB_Sorted_Jobs",
                                    "name": "Run Script",
                                    "description": "Run Script: Process_EB_Sorted_Jobs",
                                    "helpText": "Runs the specified script",
                                    "guid": "b085690a-a9ed-4dc3-b46a-d983a2b57291",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.ScriptTextOutline [#FFFFFFFF]",
                                    "backgroundColorHex": "#FFF58CFF",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "SMCrashPlateThawTime",
                                        "value": "0",
                                        "valueType": "Double",
                                        "defaultValue": "0",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrchestratorUsed",
                                        "value": "True",
                                        "valueType": "Boolean",
                                        "defaultValue": "False",
                                        "valueOptions": {
                                          "$type": "System.String[], System.Private.CoreLib",
                                          "$values": []
                                        },
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMCrashPlateWorklist",
                                        "value": "%CrashPlatesForEB%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "Priority",
                                        "value": "%Job Priority%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMOrder Id",
                                        "value": "%Input.OrderId%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      },
                                      {
                                        "name": "SMJobNumber",
                                        "value": "%Job Number%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Crash Plate Preparation",
                                    "description": "Order: Crash Plate Preparation",
                                    "guid": "8c77674f-61ee-4e9e-b499-111fb316e414",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "iconUrl": "PackIcon.AtomicBomb [#FFFFFF:0:0]",
                                    "backgroundColorHex": "#FF6EFF00",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                    "inputParameters": [
                                      {
                                        "name": "Timeout (min)",
                                        "value": "100",
                                        "valueType": "Double",
                                        "defaultValue": "10"
                                      },
                                      {
                                        "name": "From",
                                        "value": "IO",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "To",
                                        "value": "EB2",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Barcodes",
                                        "value": "%CrashPlatesForEB%",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "Source Orchestrator Workflow=Consumables Carousel;Zone=MTPss;Labware Designation=Crash Plates;Labware Type=384 MTP 120ul",
                                        "valueType": "String"
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Barcodes",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Request ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Transport",
                                    "description": "Transport",
                                    "helpText": "Transports the specified barcode(s) from one station to another.",
                                    "guid": "daa170b6-4497-42f7-936c-7d3876b711cb",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                    "backgroundColorHex": "#FF666666",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "2f79ee27-0faa-42f8-8e04-ac2aba411c5d",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "right": {
                                "children": [
                                  {
                                    "$type": "Biosero.Workflow.Commands.ExecuteOrderCommand, Biosero.Workflow.Core",
                                    "timeout": "00:30:00",
                                    "inputParameters": [
                                      {
                                        "name": "AssayLabwareTypes",
                                        "value": "%CrashLabwareType%",
                                        "valueType": "String",
                                        "defaultValue": "",
                                        "valueOptions": [],
                                        "validationRules": [],
                                        "tags": [
                                          "User",
                                          "#DarkMagenta"
                                        ]
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "AssayLabwareTypeZone",
                                        "mapToGlobalVariableName": "CrashZone",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "AssayLabwareTypeStorage",
                                        "mapToGlobalVariableName": "CrashStorage",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Module ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Script.OrchFindStorageForLabwareType",
                                    "description": "Order: Script.OrchFindStorageForLabwareType",
                                    "guid": "fcea48f0-4b05-4821-bd34-3c10e3806095",
                                    "isAsync": false,
                                    "allowAsync": true,
                                    "iconUrl": "PackIcon.Parachute [#FFFFFF:0:0]",
                                    "backgroundColorHex": "#FFFF00CA",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  },
                                  {
                                    "$type": "Biosero.Workflow.Commands.TransportCommand, Biosero.Workflow.Core",
                                    "inputParameters": [
                                      {
                                        "name": "Timeout (min)",
                                        "value": "100",
                                        "valueType": "Double",
                                        "defaultValue": "10"
                                      },
                                      {
                                        "name": "From",
                                        "value": "IO",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "To",
                                        "value": "EB2",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Barcodes",
                                        "value": "%CrashDestinationsEB%",
                                        "valueType": "String"
                                      },
                                      {
                                        "name": "Metadata",
                                        "value": "Source Orchestrator Workflow=%CrashStorage%;Labware Type=%CrashLabwareType%;Destination Orchestrator Workflow=%CrashStorage%;Job=%Job Number%;Labware Designation=Destination Labware",
                                        "valueType": "String"
                                      }
                                    ],
                                    "outputParameterMapping": [
                                      {
                                        "name": "Barcodes",
                                        "parameterType": "String"
                                      },
                                      {
                                        "name": "Request ID",
                                        "parameterType": "String"
                                      }
                                    ],
                                    "name": "Transport",
                                    "description": "Transport",
                                    "helpText": "Transports the specified barcode(s) from one station to another.",
                                    "guid": "3d684d17-2d35-4564-8a0e-7db308268194",
                                    "isAsync": false,
                                    "allowAsync": false,
                                    "iconUrl": "PackIcon.TransitConnectionVariant [#FFFFFFFF]",
                                    "backgroundColorHex": "#FF666666",
                                    "isDisabled": false,
                                    "isPausePointSet": false
                                  }
                                ],
                                "name": "Sequence",
                                "description": "Sequence",
                                "helpText": "A sequence of workflow elements",
                                "guid": "63be898e-8b3c-4862-8824-8b7eec57bf60",
                                "isAsync": false,
                                "allowAsync": false,
                                "backgroundColorHex": "#00000000",
                                "isDisabled": false,
                                "isPausePointSet": false
                              },
                              "description": "Parallel",
                              "guid": "4a686768-db50-4754-94d8-17833970663c",
                              "isAsync": false,
                              "allowAsync": false,
                              "isDisabled": false,
                              "isPausePointSet": false
                            }
                          ],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "25e316cf-7466-4cab-ae97-b5bf6b94dc42",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "no": {
                          "children": [],
                          "name": "Sequence",
                          "description": "Sequence",
                          "helpText": "A sequence of workflow elements",
                          "guid": "4b9fab4f-07ea-4bdb-8c55-bf36591ac3c8",
                          "isAsync": false,
                          "allowAsync": false,
                          "backgroundColorHex": "#00000000",
                          "isDisabled": false,
                          "isPausePointSet": false
                        },
                        "evaluation": {
                          "left": "CrashPlatesForEB",
                          "right": "",
                          "evaluator": "NotEqual"
                        },
                        "name": "Branch",
                        "description": "Branch if CrashPlatesForEB ≠ ",
                        "helpText": "Evaluates a condition and branches accordingly",
                        "guid": "d32d8846-bdb9-4641-9094-e01c556f55ce",
                        "isAsync": false,
                        "allowAsync": false,
                        "iconUrl": "PackIcon.Help [#FFFFFFFF:0:2]",
                        "backgroundColorHex": "#FFDEDE81",
                        "isDisabled": true,
                        "isPausePointSet": false
                      }
                    ],
                    "name": "Sequence",
                    "description": "Sequence",
                    "helpText": "A sequence of workflow elements",
                    "guid": "c2f88a72-3411-4266-8fb2-432b4825e2f7",
                    "isAsync": false,
                    "allowAsync": false,
                    "backgroundColorHex": "#00000000",
                    "isDisabled": false,
                    "isPausePointSet": false
                  },
                  "description": "Parallel",
                  "guid": "0e09ed33-8e5e-4de1-a920-0fbd74d4122a",
                  "isAsync": false,
                  "allowAsync": false,
                  "isDisabled": false,
                  "isPausePointSet": false
                }
              ],
              "name": "Sequence",
              "description": "Sequence",
              "helpText": "A sequence of workflow elements",
              "guid": "465ff52a-9171-488e-9ee9-efcfaaa82970",
              "isAsync": false,
              "allowAsync": false,
              "backgroundColorHex": "#00000000",
              "isDisabled": false,
              "isPausePointSet": false
            },
            "description": "Parallel",
            "guid": "206f8bbd-a1db-492a-ad57-bebf13c3dda6",
            "isAsync": false,
            "allowAsync": false,
            "isDisabled": false,
            "isPausePointSet": false
          }
        ],
        "name": "Sequence",
        "description": "Sequence",
        "helpText": "A sequence of workflow elements",
        "guid": "11bbdc57-3d31-49f0-b58f-4ee23d6141bf",
        "isAsync": false,
        "allowAsync": false,
        "backgroundColorHex": "#00000000",
        "isDisabled": false,
        "isPausePointSet": false
      }
    }
  ],
  "parameters": [
    {
      "name": "Input.OrderId",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REPOneLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "REPTwoLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepOneZone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepOneStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepTwoZone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepTwoStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepOnePlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "RepTwoPlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPSourcesForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EBSourcesToBeTransferred",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPSourcesTransferred",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EBTransferredSources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EBSourcesIdentifiers",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CPSourcessIdentifiersForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourcesSentToTransfer",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Prioritised Jobs",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Job Priority",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Job Number",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalEBTransportedSources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalEBQueuedDestinedSources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "TotalEBReadySources",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityThresholdVolume",
      "value": "8",
      "valueType": "Integer",
      "defaultValue": "8",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips30PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10PlaceholderBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity10Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity30Zone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity10Storage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Velocity30Storage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashPlatesForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashDestinationsEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashZone",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CrashStorage",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EBRempSourceLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EBSources",
      "value": "Targ15,Targ16",
      "valueType": "String",
      "defaultValue": "Targ15,Targ16",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EchoInstructions",
      "value": "Targ1-REPOne 1,Targ2-REPOne 2,Targ3-REPOne 3",
      "valueType": "String",
      "defaultValue": "Targ1-REPOne 1,Targ2-REPOne 2,Targ3-REPOne 3",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Job Number Copy",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Echo Plates Not Finished",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Source Echo Plates Not Finished",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Finished Source Plates",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "AllEBSources",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Job Fragment",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "ReplicateOneBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "ReplicateTwoBarcodes",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "Finished Echo Plates",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EchoDestLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EchoSourceLabwareType",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "DestinationsForEcho",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "JobPriorityNumber",
      "value": "0",
      "valueType": "Integer",
      "defaultValue": "0",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CurrentEchoSourcesOnEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CurrentSourcesOnEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CurrentSourcePlate",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "InstructionsForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "SourceForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "DestinationForEB",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "JobFoundOnEB",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "HigherPriorityJob",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "CurrentEBPriority",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "EB Plates Ready",
      "value": "False",
      "valueType": "Boolean",
      "defaultValue": "False",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    },
    {
      "name": "VelocityTips10PlaceholderBarcodes Copy",
      "value": "",
      "valueType": "String",
      "defaultValue": "",
      "tags": {
        "$type": "System.Collections.ObjectModel.ObservableCollection`1[[System.String, System.Private.CoreLib]], System.ObjectModel",
        "$values": [
          ""
        ]
      }
    }
  ],
  "scripts": [
    {
      "name": "Process_State_Machine_EB_Initial",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_State_Machine_EB_Initial\r\n    {\r\n\r\n\r\n        static string ExtractNumber(string input)\r\n        {\r\n            // Initialize an empty result string\r\n            string result = string.Empty;\r\n\r\n            // Iterate through each character in the input string\r\n            foreach (char c in input)\r\n            {\r\n                // Check if the character is a digit or a decimal point\r\n                if (char.IsDigit(c) || c == '.')\r\n                {\r\n                    result += c;\r\n                }\r\n                else\r\n                {\r\n                    // Stop collecting characters once a non-numeric character is found\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Return the extracted number\r\n            return result;\r\n        }\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Racks Required\", false);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Crash Plates Required\", false);\r\n\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n\r\n            string ExtractedReplicationVolume = \"\";\r\n            string ExtractedNextReplicationVolume = \"\";\r\n            string NextReplicateLabware = \"\";\r\n            string FurtherReplicateLabware = \"\";\r\n            string DestinationCommonName = \"\";\r\n\r\n\r\n\r\n            int EBSourcesCount = 0;\r\n            int RepOneCount = 0;\r\n            int RepTwoCount = 0;\r\n\r\n\r\n            string JobWorkflowFragment = \"\";\r\n\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllCPSourcesForEB = new List<string>();\r\n            List<string> AllCPSourcesIdentifiersForEB = new List<string>();\r\n            List<string> AllSerializePlates = new List<string>();\r\n            List<string> AllReplicatePlates = new List<string>();\r\n            List<string> AllNextReplicatePlates = new List<string>();\r\n            List<string> AllCrashPlatesForEB = new List<string>();\r\n            List<string> AllCrashPlateIdentierssForEB = new List<string>();\r\n            List<string> AllCrashDestinationsEB = new List<string>();\r\n            List<string> EchoPairList = new List<string>();\r\n            List<string> ReplicateOneList = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicDestination? destination = destinations?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n                string DestinationId = dest.Identifier.ToString();\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n                string NextDestName = \"\";\r\n                string NextDestIdentifier = \"\";\r\n                string NextOperationType = \"\";\r\n                string NextReplicateDestName = \"\";\r\n                string NextReplicateSibling = \"\";\r\n                string NextReplicateDestIdentifier = \"\";\r\n                string NextReplicateOperationType = \"\";\r\n                string NextReplicateSampleTransfers = \"\";\r\n                string NextReplicateID = \"\";\r\n                string FurtherReplicateDestName = \"\";\r\n                string FurtherReplicateDestIdentifier = \"\";\r\n                string FurtherReplicateOperationType = \"\";\r\n                string FurtherReplicateSampleTransfers = \"\";\r\n                string FurtherReplicateID = \"\";\r\n\r\n                if (DestinationOperationType == \"CherryPick\")\r\n                {\r\n\t\t\tvar RepParentPlate = sources\r\n                                .Where(x => x.Name == DestinationName)\r\n                                .FirstOrDefault();\r\n                                \r\n \r\n\r\n                    // if not member already - add to a list of all EB CP sources for the order\r\n                    if ((!AllCPSourcesForEB.Contains(DestinationName)) && (RepParentPlate != null))\r\n                    {\r\n\t                        AllCPSourcesForEB.Add(DestinationName);\r\n\t                        AllCPSourcesIdentifiersForEB.Add(DestinationId);\r\n                    }\r\n\r\n                    // Find a list of all destinations (Serialiase) for the source above (should be only 1 each)\r\n                    var NextPlates = destinations\r\n                    .Where(x => x.ParentIdentifier != null &&\r\n                        x.ParentIdentifier == DestinationId)\r\n                    .ToList();\r\n\r\n                    foreach (var Plate in NextPlates)\r\n                    {\r\n                        NextDestName = Plate.Name;\r\n                        NextDestIdentifier = Plate.Identifier;\r\n                        NextOperationType = Plate.OperationType.ToString();\r\n                        string NextId = Plate.Identifier;\r\n\r\n\r\n\r\n                        // if not member already - add to a list of all serilisation for the order for the order\r\n                        if (!AllSerializePlates.Contains(NextDestName))\r\n                        {\r\n                            AllSerializePlates.Add(NextDestName);\r\n                        }\r\n\r\n\r\n\r\n                        if (NextOperationType == \"Serialise\")\r\n                        {\r\n                            var NextReplicatePlates = destinations\r\n                            .Where(x => x.ParentIdentifier != null &&\r\n                                x.ParentIdentifier == NextId)\r\n                            .ToList();\r\n\r\n                            foreach (var ReplicatePlate in NextReplicatePlates)\r\n                            {\r\n                                NextReplicateDestName = ReplicatePlate.Name;\r\n                                NextReplicateDestIdentifier = ReplicatePlate.Identifier;\r\n                                NextReplicateOperationType = ReplicatePlate.OperationType.ToString();\r\n                                NextReplicateSampleTransfers = ReplicatePlate.SampleTransfers;\r\n                                NextReplicateID = ReplicatePlate.Identifier;\r\n                                NextReplicateLabware = ReplicatePlate.CommonName;\r\n                                NextReplicateSibling = ReplicatePlate.SiblingIdentifier;\r\n\r\n\r\n\r\n                                var ExtractNum = destinations\r\n                                .Where(x => x.ParentIdentifier != null && x.Identifier == NextReplicateID)\r\n                                .FirstOrDefault();\r\n\r\n                                if (ExtractedReplicationVolume == \"\")\r\n                                {\r\n                                    ExtractedReplicationVolume = ExtractNumber(ExtractNum.SampleTransfers);\r\n                                }\r\n\r\n\r\n\r\n                                // if not member already - add to a list of all Echo plates needed for the order\r\n                                if (!AllReplicatePlates.Contains(NextReplicateDestName))\r\n                                {\r\n                                    AllReplicatePlates.Add(NextReplicateDestName);\r\n                                }\r\n\r\n                                \r\n\r\n                                var RepDestSource = sources\r\n                                .Where(x => x.Identifier == NextReplicateSibling)\r\n                                .FirstOrDefault();\r\n\r\n                                string DestSourceName = RepDestSource.Name;\r\n\r\n                          //      Serilog.Log.Information(\"w777777777777 = {DestSourceName}\", DestSourceName.ToString());\r\n\r\n                                // Find a list of all Echo plates for each  serialsed plate (if exists)\r\n                                var FurtherReplicatePlates = destinations\r\n                                .Where(x => x.ParentIdentifier != null &&\r\n                                    x.ParentIdentifier == NextReplicateID)\r\n                                .ToList();\r\n\r\n                                int CheckFurtherReplicateExists = FurtherReplicatePlates.Count();\r\n\r\n                                if (CheckFurtherReplicateExists > 0)\r\n                                {\r\n                                    foreach (var FurtherPlateRep in FurtherReplicatePlates)\r\n                                    {\r\n                                        FurtherReplicateDestName = FurtherPlateRep.Name;\r\n                                        FurtherReplicateDestIdentifier = FurtherPlateRep.Identifier;\r\n                                        FurtherReplicateOperationType = FurtherPlateRep.OperationType.ToString();\r\n                                        FurtherReplicateSampleTransfers = FurtherPlateRep.SampleTransfers;\r\n                                        FurtherReplicateID = FurtherPlateRep.Identifier;\r\n                                        FurtherReplicateLabware = FurtherPlateRep.CommonName;\r\n\r\n                                        var ExtractNectReplicateNum = destinations\r\n                                        .Where(x => x.ParentIdentifier != null && x.Identifier == FurtherReplicateID)\r\n                                        .FirstOrDefault();\r\n\r\n                                        if (ExtractedNextReplicationVolume == \"\")\r\n                                        {\r\n                                            ExtractedNextReplicationVolume = ExtractNumber(ExtractNectReplicateNum.SampleTransfers);\r\n                                        }\r\n\r\n\r\n\r\n                                        // if not member already - add to a list of all Echo plates needed for the order\r\n                                        if (!AllNextReplicatePlates.Contains(FurtherReplicateDestName))\r\n                                        {\r\n                                            AllNextReplicatePlates.Add(FurtherReplicateDestName);\r\n                                        }\r\n\r\n\r\n                                    }\r\n                                }\r\n\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                        else if (NextOperationType == \"Replicate\")\r\n                        {\r\n                            // Find a list of all replicates only\r\n                            var NextReplicatePlates = destinations\r\n                            .Where(x => x.ParentIdentifier != null)\r\n                            .ToList();\r\n\r\n                            foreach (var ReplicatePlate in NextReplicatePlates)\r\n                            {\r\n                                NextReplicateDestName = ReplicatePlate.Name;\r\n                                NextReplicateDestIdentifier = ReplicatePlate.Identifier;\r\n                                NextReplicateOperationType = ReplicatePlate.OperationType.ToString();\r\n                                NextReplicateSampleTransfers = ReplicatePlate.SampleTransfers;\r\n                                NextReplicateID = ReplicatePlate.Identifier;\r\n                                NextReplicateLabware = ReplicatePlate.CommonName;\r\n                                NextReplicateSibling = ReplicatePlate.SiblingIdentifier;\r\n\r\n\r\n                                var ExtractNum = destinations\r\n                                .Where(x => x.ParentIdentifier != null && x.Identifier == NextReplicateID)\r\n                                .FirstOrDefault();\r\n\r\n                                if (ExtractedReplicationVolume == \"\")\r\n                                {\r\n                                    ExtractedReplicationVolume = ExtractNumber(ExtractNum.SampleTransfers);\r\n                                }\r\n\r\n\r\n\r\n                                // if not member already - add to a list of all Echo plates needed for the order\r\n                                if (!AllReplicatePlates.Contains(NextReplicateDestName))\r\n                                {\r\n                                    AllReplicatePlates.Add(NextReplicateDestName);\r\n                                }\r\n\r\n\r\n                                var RepDestSource = sources\r\n                                .Where(x => x.Identifier == NextReplicateSibling)\r\n                                .FirstOrDefault();\r\n\r\n                                string DestSourceName = RepDestSource.Name;\r\n                                \r\n\r\n                                if (!EchoPairList.Contains(DestSourceName + \"-\" + NextReplicateDestName))\r\n                                {\r\n                                    EchoPairList.Add(DestSourceName + \"-\" + NextReplicateDestName);\r\n                                }\r\n\r\n\r\n                                if (!ReplicateOneList.Contains(NextReplicateDestName))\r\n                                {\r\n                                    ReplicateOneList.Add(NextReplicateDestName);\r\n                                }\r\n\r\n                                \r\n\r\n\r\n\r\n\r\n                                // Find a list of all Echo plates for each  serialsed plate (if exists)\r\n                                var FurtherReplicatePlates = destinations\r\n                                .Where(x => x.ParentIdentifier != null &&\r\n                                    x.ParentIdentifier == NextReplicateID)\r\n                                .ToList();\r\n\r\n                                int CheckFurtherReplicateExists = FurtherReplicatePlates.Count();\r\n\r\n                                if (CheckFurtherReplicateExists > 0)\r\n                                {\r\n                                    foreach (var FurtherPlateRep in FurtherReplicatePlates)\r\n                                    {\r\n                                        FurtherReplicateDestName = FurtherPlateRep.Name;\r\n                                        FurtherReplicateDestIdentifier = FurtherPlateRep.Identifier;\r\n                                        FurtherReplicateOperationType = FurtherPlateRep.OperationType.ToString();\r\n                                        FurtherReplicateSampleTransfers = FurtherPlateRep.SampleTransfers;\r\n                                        FurtherReplicateID = FurtherPlateRep.Identifier;\r\n                                        FurtherReplicateLabware = FurtherPlateRep.CommonName;\r\n\r\n                                        var ExtractNectReplicateNum = destinations\r\n                                        .Where(x => x.ParentIdentifier != null && x.Identifier == FurtherReplicateID)\r\n                                        .FirstOrDefault();\r\n\r\n                                        if (ExtractedNextReplicationVolume == \"\")\r\n                                        {\r\n                                            ExtractedNextReplicationVolume = ExtractNumber(ExtractNectReplicateNum.SampleTransfers);\r\n                                        }\r\n\r\n\r\n\r\n                                        // if not member already - add to a list of all Echo plates needed for the order\r\n                                        if (!AllNextReplicatePlates.Contains(FurtherReplicateDestName))\r\n                                        {\r\n                                            AllNextReplicatePlates.Add(FurtherReplicateDestName);\r\n                                        }\r\n\r\n\r\n                                    }\r\n                                }\r\n\r\n\r\n\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            string EchoPairListString = String.Join(\", \", EchoPairList);\r\n            string ReplicateOneListString = String.Join(\", \", ReplicateOneList);\r\n            //  Serilog.Log.Information(\"w777777777777 = {EchoPairListString}\", EchoPairListString.ToString());\r\n            await context.AddOrUpdateGlobalVariableAsync(\"EchoInstructions\", EchoPairListString);\r\n\r\n            List<string> highPriorityJobs = new List<string>();\r\n            List<string> mediumPriorityJobs = new List<string>();\r\n            List<string> lowPriorityJobs = new List<string>();\r\n\r\n            List<string> sortedJobs = new List<string>();\r\n\r\n            foreach (var job in jobs)\r\n            {\r\n                string JobPriority = job.Priority;\r\n                string JobNumber = job.JobId.ToString();\r\n                JobWorkflowFragment = job.WorkflowFragment.ToString();\r\n\r\n\r\n\r\n\r\n                switch (JobPriority)\r\n                {\r\n                    case \"High\":\r\n                        highPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                    case \"Medium\":\r\n                        mediumPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                    case \"Low\":\r\n                        lowPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            // Combine the lists in the desired order\r\n            sortedJobs.AddRange(highPriorityJobs);\r\n            sortedJobs.AddRange(mediumPriorityJobs);\r\n            sortedJobs.AddRange(lowPriorityJobs);\r\n\r\n            string PrioritisedJobs = string.Join(\",\", sortedJobs);\r\n            Serilog.Log.Information(\"Following is the list of Prioritised jobs for order {RequestedOrder}  = {PrioritisedJobs}\", RequestedOrder.ToString(), PrioritisedJobs.ToString());\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Prioritised Jobs\", PrioritisedJobs);\r\n\r\n            if (JobWorkflowFragment == \"Replicate\")\r\n            {\r\n            \tSerilog.Log.Information(\"JobWorkflowFragment = Replicate\");\r\n                foreach (var dest in destinations)\r\n                {\r\n                    string DestinationName = dest.Name;\r\n                    string DestinationDescription = dest.Description;\r\n                    string DestinationSampleTransfers = dest.SampleTransfers;\r\n                    string DestinationOperationType = dest.OperationType.ToString();\r\n                    string DestinationJobId = dest.JobId.ToString();\r\n                    string DestinationId = dest.Identifier.ToString();\r\n                    string DestinationSibling = dest.SiblingIdentifier.ToString();\r\n                    DestinationCommonName = dest.CommonName.ToString();\r\n                    string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n\r\n            Serilog.Log.Information(\"foreach {DestinationName}\", DestinationName);\r\n            Serilog.Log.Information(\"DestinationDescription {DestinationDescription}\", DestinationDescription);\r\n            Serilog.Log.Information(\"DestinationSampleTransfers {DestinationSampleTransfers}\", DestinationSampleTransfers);           \r\n            Serilog.Log.Information(\"DestinationOperationType {DestinationOperationType}\", DestinationOperationType);\r\n            Serilog.Log.Information(\"DestinationJobId{DestinationJobId}\", DestinationJobId);\r\n            Serilog.Log.Information(\"DestinationId{DestinationId}\", DestinationId);\r\n            Serilog.Log.Information(\"DestinationSibling{DestinationSibling}\", DestinationSibling);\r\n            Serilog.Log.Information(\"DestinationCommonName{DestinationCommonName}\", DestinationCommonName);\r\n            \r\n            if (DestinationParent != null)\r\n            \tSerilog.Log.Information(\"DestinationParent{DestinationParent}\", DestinationParent);\r\n\r\n\r\n\r\n                    if ((DestinationOperationType == \"Replicate\") && (DestinationParent == null))\r\n                    {\r\n                        // if not member already - add to a list of all EB CP sources for the order\r\n                        if (!AllCrashDestinationsEB.Contains(DestinationName))\r\n                        {\r\n                            AllCrashDestinationsEB.Add(DestinationName);\r\n                        }\r\n\r\n\r\n                        var SiblingResult = sources\r\n                                    .Where(x => x.Identifier == DestinationSibling)\r\n                                    .FirstOrDefault();\r\n\r\n                        String crashName = SiblingResult.Name.ToString();\r\n                        String crashIdentifier = SiblingResult.Identifier.ToString();\r\n\r\n                        // if not member already - add to a list of all EB CP sources for the order\r\n                        if (!AllCrashPlatesForEB.Contains(crashName))\r\n                        {\r\n                            AllCrashPlatesForEB.Add(crashName);\r\n                            AllCrashPlateIdentierssForEB.Add(crashIdentifier);\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n                string CrashNames = String.Join(\", \", AllCrashPlatesForEB);\r\n                string CrashIDs = String.Join(\", \", AllCrashPlateIdentierssForEB);\r\n                string CrashDestinationsEB = String.Join(\", \", AllCrashDestinationsEB);\r\n\r\n\r\n                Serilog.Log.Information(\"CrashNames = {CrashNames}\", CrashNames);\r\n\r\n                Serilog.Log.Information(\"CrashIDs = {CrashIDs}\", CrashIDs);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CrashPlatesForEB\", CrashNames);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CrashDestinationsEB\", CrashDestinationsEB);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CrashLabwareType\", DestinationCommonName);\r\n            }\r\n            else\r\n            {\r\n            \tSerilog.Log.Information(\"(else) JobWorkflowFragment = {JobWorkflowFragment}\", JobWorkflowFragment);\r\n\r\n                string RepOnePlaceholderBarcodes = \"\";\r\n                string RepTwoPlaceholderBarcodes = \"\";\r\n\r\n                EBSourcesCount = AllCPSourcesForEB.Count();\r\n                RepOneCount = AllReplicatePlates.Count();\r\n                RepTwoCount = AllNextReplicatePlates.Count();\r\n\r\n                List<string> RepOneBarcodes = new List<string>();\r\n                List<string> RepTwoBarcodes = new List<string>();\r\n                Serilog.Log.Information(\"The number of plates sent for first replicate = {RepOneCount}\", RepOneCount.ToString());\r\n                Serilog.Log.Information(\"The number of plates sent for the second replicate = {RepTwoCount}\", RepTwoCount.ToString());\r\n\r\n\r\n                if (RepOneCount > 0)\r\n                {\r\n                    for (int i = 1; i <= RepOneCount; i++)\r\n                    {\r\n                        RepOneBarcodes.Add(\"REPOne \" + i);\r\n                    }\r\n\r\n                    RepOnePlaceholderBarcodes = String.Join(\", \", RepOneBarcodes);\r\n\r\n                    string REPOneInstrument = \"\";\r\n                    double REPOneVolume = Double.Parse(ExtractedReplicationVolume);\r\n\r\n\r\n                    if (REPOneVolume < 0.5)\r\n                    {\r\n                        REPOneInstrument = \"Echo\";\r\n                    }\r\n                    else\r\n                    {\r\n                        REPOneInstrument = \"Bravo\";\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n                if (RepTwoCount > 0)\r\n                {\r\n\r\n                    for (int i = 1; i <= 10; i++)\r\n                    {\r\n                        RepTwoBarcodes.Add(\"REPTwo \" + i);\r\n                    }\r\n\r\n                    RepTwoPlaceholderBarcodes = String.Join(\", \", RepTwoBarcodes);\r\n                    string REPTwoInstrument = \"\";\r\n                    double REPTwoVolume = 0;\r\n\r\n                    if (ExtractedNextReplicationVolume != \"\")\r\n                    {\r\n                        REPTwoVolume = Double.Parse(ExtractedNextReplicationVolume);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                Serilog.Log.Information(\"Total volume required for the run = {ExtractedReplicationVolume}\", ExtractedReplicationVolume.ToString());\r\n                Serilog.Log.Information(\"Total volume for the next replicate = {ExtractedNextReplicationVolume}\", ExtractedNextReplicationVolume.ToString());\r\n\r\n\r\n\r\n\r\n                string EBSources = string.Join(\",\", AllCPSourcesForEB);\r\n                string AllEBSources = string.Join(\",\", AllCPSourcesForEB);\r\n                string EBSourcesIdentifiers = string.Join(\",\", AllCPSourcesIdentifiersForEB);\r\n                string SerializePlates = string.Join(\",\", AllSerializePlates);\r\n                string ReplicatePlates = string.Join(\",\", AllReplicatePlates);\r\n                string ReplicateTwoReplicatePlates = string.Join(\",\", AllNextReplicatePlates);\r\n\r\n\r\n                Serilog.Log.Information(\"The sources required for the run from CP to EB = {EBSources}\", EBSources.ToString());\r\n\r\n                Serilog.Log.Information(\"Total sources required for the run from CP to EB = {EBSourcesCount}\", EBSourcesCount.ToString());\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"REPOneLabwareType\", NextReplicateLabware);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"REPTwoLabwareType\", FurtherReplicateLabware);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"RepOnePlaceholderBarcodes\", ReplicateOneListString);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"RepTwoPlaceholderBarcodes\", RepTwoPlaceholderBarcodes);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CPSourcesForEB\", EBSources);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"AllEBSources\", AllEBSources);\r\n                \r\n                \r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CPSourcesIdentifiersForEB\", EBSourcesIdentifiers);\r\n\r\n\r\n\r\n                Serilog.Log.Information(\"Placeholder barcodes for replicate one = {ReplicateOneListString}\", ReplicateOneListString.ToString());\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "DebugCheckAllQueuedSources",
      "code": "#r ScriptTools.dll\r\n\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing ScriptTools;\r\n\r\nnamespace Acme.Orchestrator.Scripting\r\n{\r\npublic class DebugCheckAllQueuedSources\r\n    {\r\npublic async Task RunAsync  (DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            var DebugCheckAllQueuedSources = new ScriptTools.Tools();\r\n            await DebugCheckAllQueuedSources.RunAsync(\"Ronen\", client, context, cancellationToken);\r\n        }\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "CheckAllQueuedEBSources",
      "code": "using Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CheckAllQueuedEBSources\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string CPSourcesForEB = context.GetGlobalVariableValue<string>(\"CPSourcesForEB\");\r\n            string DestLabwareType = \"\";\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllDestinationsForOrder = new List<string>();\r\n            List<string> QueuedDestinationsForOrder = new List<string>();\r\n            List<string> ReadyDestinationsForEB = new List<string>();\r\n            List<string> TransportedSourcesForEB = new List<string>();\r\n            List<string> CPToEBBarcodes = CPSourcesForEB.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\r\n\r\n            string EBSources = string.Join(\",\", CPToEBBarcodes);\r\n            string initialReadyDestinations = string.Join(\",\", ReadyDestinationsForEB);\r\n            IdentityHelper _identityHelper;\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n            //Get all the Sources associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestID = dest.Identifier;\r\n                string DestName = dest.Name;\r\n                string DestType = dest.TypeIdentifier;\r\n                string DestState = dest.Status.ToString();\r\n                string DestOperationType = dest.OperationType.ToString();\r\n                string DestSampleTransfers= dest.SampleTransfers.ToString();                \r\n                \r\n                if (DestOperationType == \"Replicate\")\r\n                {\r\n\t\t\tstring cleanedInput = DestSampleTransfers.Trim();\r\n\t\t\t// Convert the cleaned string to a double\r\n\t\t\tdouble result = double.Parse(cleanedInput);\r\n                }\r\n               \r\n                bool isInList = CPToEBBarcodes.Contains(DestName);\r\n                if (isInList)\r\n                {   \r\n                    if (!AllDestinationsForOrder.Contains(DestName))\r\n                    {\r\n                        AllDestinationsForOrder.Add(DestName);\r\n                        QueuedDestinationsForOrder.Add(DestName);\r\n\t\t\tSerilog.Log.Information(\"### Adding {DestName} to QueuedDestinationsForOrder and AllDestinationsForOrder\",  DestName.ToString() );\r\n                    }\r\n                    \r\n                   Serilog.Log.Information(\"Looking for any Finished plates for Order {RequestedOrder}\",  RequestedOrder.ToString() );\r\n                   Serilog.Log.Information(\"Current Plate Name  {DestName}\",  DestName.ToString() );\r\n                   \r\n                   var cc = sources\r\n                   .Where(x => x.Name == DestName)\r\n                   .FirstOrDefault();\r\n                   \r\n                   string SameSource = cc.Name;\r\n                   Serilog.Log.Information(\"Found a source with the same name   {SameSource}\",  SameSource.ToString() );\r\n                   string SameSourceStatus = cc.Status.ToString();\r\n                   \r\n                    if (  (!ReadyDestinationsForEB.Contains(DestName)) && (DestState == \"Finished\") && (SameSourceStatus == \"Pending\") )\r\n                    {\r\n                        Serilog.Log.Information(\"Got One!= {DestName}\", DestName.ToString());\r\n                        ReadyDestinationsForEB.Add(DestName);\r\n                        DestLabwareType = dest.CommonName.ToString();\r\n\t\t\tConsole.WriteLine($\"***********       CheckAllQueuedEBSources: Adding Plate to ReadyDestinatonForEB, SameSource = {SameSource}, ReadyDestinationsForEB.Count = {ReadyDestinationsForEB.Count} \"+ Environment.NewLine );\r\n                    }\r\n                    if ( (!TransportedSourcesForEB.Contains(DestName)) && (DestState == \"Finished\") && (SameSourceStatus != \"Pending\") )\r\n                    {\r\n                        Serilog.Log.Information(\"Looking for any transporting  plates for Order {RequestedOrder}\",  RequestedOrder.ToString() );\r\n                        Serilog.Log.Information(\"This one was sent= {DestName}\", DestName.ToString());\r\n                        TransportedSourcesForEB.Add(DestName);\r\n\t\t\tConsole.WriteLine($\"***********       CheckAllQueuedEBSources: Adding Plate to TransportedSourcesForEB , SameSource = {SameSource}, TransportedSourcesForEB.Count = {TransportedSourcesForEB.Count} \"+ Environment.NewLine );\r\n                    }\r\n\r\n                   /*\r\n                    if ((!ReadyDestinationsForEB.Contains(DestName)) && (DestState == \"Finished\") && ((SameSourceStatus != \"Finished\") && (SameSourceStatus != \"Transfered\")))\r\n                    {\r\n                        Serilog.Log.Information(\"Got One!= {DestName}\", DestName.ToString());\r\n                        ReadyDestinationsForEB.Add(DestName);\r\n                        DestLabwareType = dest.CommonName.ToString();\r\n\t\t\tConsole.WriteLine($\"***********       CheckAllQueuedEBSources: Adding Plate to ReadyDestinatonForEB, SameSource = {SameSource}, ReadyDestinationsForEB.Count = {ReadyDestinationsForEB.Count} \"+ Environment.NewLine );\r\n                    }\r\n                    else if ((!TransportedSourcesForEB.Contains(DestName)) && (DestState == \"Transporting\") && (SameSourceStatus != \"Finished\") && (SameSourceStatus != \"Transfered\"))\r\n                    {\r\n                        Serilog.Log.Information(\"Looking for any transporting  plates for Order {RequestedOrder}\",  RequestedOrder.ToString() );\r\n                        Serilog.Log.Information(\"This one was sent= {DestName}\", DestName.ToString());\r\n                        TransportedSourcesForEB.Add(DestName);\r\n\t\t\tConsole.WriteLine($\"***********       CheckAllQueuedEBSources: Adding Plate to TransportedSourcesForEB , SameSource = {SameSource}, TransportedSourcesForEB.Count = {TransportedSourcesForEB.Count} \"+ Environment.NewLine );\r\n                    }\r\n                    */\r\n                }\r\n            }\r\n\r\n            string AllEBDestinedSources = string.Join(\",\", AllDestinationsForOrder);\r\n            int TotalEBDestinedSources = AllDestinationsForOrder.Count;\r\n            \r\n            Serilog.Log.Information(\"List all the plates that are need in EB form CP for order  {RequestedOrder}\",  RequestedOrder.ToString() );\r\n            Serilog.Log.Information(\"All queued plates= {AllEBDestinedSources}\", AllEBDestinedSources.ToString());            \r\n            Serilog.Log.Information(\"Total Queued plates= {TotalEBDestinedSources}\", TotalEBDestinedSources.ToString());\r\n                                    \r\n            string AllQueuedEBDestinedSources = string.Join(\",\", QueuedDestinationsForOrder);\r\n            int TotalEBQueuedDestinedSources = QueuedDestinationsForOrder.Count;\r\n            string AllEBReadySources = \"\";\r\n            int TotalEBReadySources = 0;\r\n            string AllEBTransportedSources = \"\";\r\n            int TotalEBTransportedSources = 0;\r\n\r\n            if (ReadyDestinationsForEB.Count() > 0)\r\n            {\r\n                AllEBReadySources = string.Join(\",\", ReadyDestinationsForEB);\r\n                TotalEBReadySources = ReadyDestinationsForEB.Count;\r\n            }\r\n            else\r\n            {\r\n                AllEBReadySources = \"\";\r\n                TotalEBReadySources = 0;\r\n            }\r\n            \r\n            Serilog.Log.Information(\"Got Two!= {AllEBReadySources}\", AllEBReadySources.ToString());\r\n\r\n            if (TransportedSourcesForEB.Count() > 0)\r\n            {\r\n                AllEBTransportedSources = string.Join(\",\", TransportedSourcesForEB);\r\n                TotalEBTransportedSources = TransportedSourcesForEB.Count;\r\n            }\r\n            else\r\n            {\r\n                AllEBTransportedSources = \"\";\r\n                TotalEBTransportedSources = 0;\r\n            }\r\n\r\n            Serilog.Log.Information(\"Total plate sources coming to EB from CP= {TotalEBDestinedSources} \", TotalEBDestinedSources.ToString());\r\n            Serilog.Log.Information(\"Total destinations marked as finished= {TotalEBQueuedDestinedSources} \", TotalEBQueuedDestinedSources.ToString());\r\n            Serilog.Log.Information(\"Got Three= {AllEBReadySources} \", AllEBReadySources.ToString());\r\n            Serilog.Log.Information(\"total finished = {TotalEBReadySources} \", TotalEBReadySources.ToString());\r\n            Serilog.Log.Information(\"All  EB transported sources= {AllEBTransportedSources} \", AllEBTransportedSources.ToString());\r\n            Serilog.Log.Information(\"Total EB transported sources= {TotalEBTransportedSources} \", TotalEBTransportedSources.ToString());\r\n            \r\n            await context.AddOrUpdateGlobalVariableAsync(\"TotalEBTransportedSources\", TotalEBTransportedSources);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TotalEBQueuedDestinedSources\", TotalEBQueuedDestinedSources);\r\n\r\n\t    await context.AddOrUpdateGlobalVariableAsync(\"EBSourcesToBeTransferred\", AllEBReadySources);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"TotalEBReadySources\", TotalEBReadySources);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"EBRempSourceLabwareType\", DestLabwareType);\r\n\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "ResetTransferredPlatesValuesedEBSources",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Resources;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Roche.LAMA1;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\nusing System;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class ResetTransferredPlatesValuesedEBSources\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string CurrentSource = context.GetGlobalVariableValue<string>(\"CurrentSourcePlate\");\r\n            string EBSourcesToBeTransferred = context.GetGlobalVariableValue<string>(\"EBSourcesToBeTransferred\");\r\n            Serilog.Log.Information(\"XYXYXY = {EBSourcesToBeTransferred}\", EBSourcesToBeTransferred);\r\n\r\n            int RequestedJob = context.GetGlobalVariableValue<int>(\"Job Number\");\r\n            int identityJobID = 0;\r\n\r\n\r\n            string SourceIndentityState = \"\";\r\n            string SourceIdentityPriority = \"\";\r\n            string SourceIdentityID = \"\";\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n\r\n            string SourcesToBeTransferred = context.GetGlobalVariableValue<string>(\"CPSourcesForEB\");\r\n\r\n\r\n            Serilog.Log.Information(\"The change status to Transferred relies on this list:  = {SourcesToBeTransferred}\", SourcesToBeTransferred);\r\n\r\n\r\n            string SourceIdentifierssToBeTransferred = context.GetGlobalVariableValue<string>(\"CPSourcesIdentifiersForEB\");\r\n\r\n\r\n            //       Serilog.Log.Information(\"SourcesToBeTransferred = {SourcesToBeTransferred}\", SourcesToBeTransferred);\r\n\r\n            //  Serilog.Log.Information(\"SourceIdentifierssToBeTransferred = {SourceIdentifierssToBeTransferred}\", SourceIdentifierssToBeTransferred);\r\n            string TransferredSources = context.GetGlobalVariableValue<string>(\"EBTransferredSources\");\r\n\r\n            List<string> AllTransferredSources = TransferredSources.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\r\n            List<string> AllSourcesToBeTransferred = SourcesToBeTransferred.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\r\n            List<string> AllSourceIdentifiersToBeTransferred = SourceIdentifierssToBeTransferred.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();\r\n\r\n\r\n            //\r\n            Serilog.Log.Information(\"The change status to Transferred relies on this list:  = {AllSourcesToBeTransferred}\", AllSourcesToBeTransferred);\r\n\r\n\r\n\r\n            foreach (var source in sources)\r\n            {\r\n                identityJobID = source.JobId; // Identity Job as string\r\n                SourceIdentityID = source.Identifier;\r\n                string SourceIdentityName = source.Name;\r\n                SourceIdentityPriority = source.Priority;\r\n                string SourceIdentityType = source.TypeIdentifier;\r\n                SourceIndentityState = source.Status.ToString();\r\n\r\n\r\n                Serilog.Log.Information(\"THESE PLATES WERE SENT====\");\r\n                Serilog.Log.Information(\"SourceIndentityState = {SourceIndentityState}\", SourceIndentityState);\r\n                Serilog.Log.Information(\"SourceIdentityName = {SourceIdentityName}\", SourceIdentityName);\r\n                Serilog.Log.Information(\"CurrentSource = {CurrentSource}\", EBSourcesToBeTransferred);\r\n                Serilog.Log.Information(\"SourceIdentityName = {SourceIdentityName}\", SourceIdentityName);\r\n\r\n\r\n                Serilog.Log.Information(\"VVVVVVVVVVVVVVVVVVVVVVVVV\");\r\n                Serilog.Log.Information(\"SourceIdentityName = {SourceIdentityName}\", SourceIdentityName);\r\n                Serilog.Log.Information(\"SourceIndentityState = {SourceIndentityState}\", SourceIndentityState);\r\n                Serilog.Log.Information(\"CurrentSource = {CurrentSource}\", CurrentSource);\r\n                Serilog.Log.Information(\"VVVVVVVVVVVVVVVVVVVVVVVVV\");\r\n\r\n                if ((AllSourcesToBeTransferred.Contains(SourceIdentityName)) && (SourceIndentityState == \"Pending\") && (CurrentSource == SourceIdentityName))\r\n                {\r\n                    Serilog.Log.Information(\"This Source was actually set as a TR = {SourceIdentityName}\", SourceIdentityName);\r\n                    var currentStatus = SourceIndentityState;\r\n                    source.Properties.SetValue(\"Status\", \"Transporting\");\r\n                    _identityHelper.Register(source, identityJobID, RequestedOrder);\r\n\r\n\r\n                    AllTransferredSources.Add(SourceIdentityName);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            string SourcesSentToTransfer = string.Join(\",\", AllTransferredSources);\r\n            Serilog.Log.Information(\"THESE PLATES WERE SENT====\");\r\n            Serilog.Log.Information(\"SourcesSentToTransfer = {SourcesSentToTransfer}\", SourcesSentToTransfer);\r\n\r\n\r\n\r\n            Serilog.Log.Information(\"0000000000000 = {SourcesSentToTransfer}\", SourcesSentToTransfer);\r\n\r\n\r\n\r\n            if (EBSourcesToBeTransferred != \"\")\r\n            {\r\n                Serilog.Log.Information(\"11111111\");\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"SourcesSentToTransfer\", SourcesSentToTransfer);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"EBSourcesToBeTransferred\", \"\");\r\n                await context.AddOrUpdateGlobalVariableAsync(\"Job Number\", identityJobID);\r\n\r\n\r\n                int JobPriorityNumber = 0;\r\n\r\n                switch (SourceIdentityPriority)\r\n                {\r\n                    case \"High\":\r\n                        JobPriorityNumber = 1;\r\n                        break;\r\n                    case \"Medium\":\r\n                        JobPriorityNumber = 2;\r\n                        break;\r\n                    case \"Low\":\r\n                        JobPriorityNumber = 3;\r\n                        break;\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n                var c = sources\r\n                .Where(x => x.Name == CurrentSource)\r\n                .FirstOrDefault();\r\n\r\n                string CurrentSourceID = c.Identifier;\r\n                string RepPlateSourceName = c.Name;\r\n\r\n\r\n                Serilog.Log.Information(\"2222222 = {RepPlateSourceName}\", RepPlateSourceName);\r\n\r\n\r\n                var d = destinations\r\n                .Where(x => x.SiblingIdentifier == CurrentSourceID)\r\n                .ToList();\r\n\r\n                string RepPlateName = string.Join(\", \", d.Select(x => x.Name));\r\n                string InstructionsForEcho = \"\";\r\n                int PriotiyNum = 0;\r\n\r\n\r\n                foreach (var destination in d)\r\n                {\r\n                    InstructionsForEcho += RepPlateSourceName + \"-\" + destination.Name + \", \";\r\n                }\r\n\r\n\r\n                InstructionsForEcho = InstructionsForEcho.TrimEnd(',', ' ');\r\n\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"InstructionsForEB\", InstructionsForEcho);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"SourceForEB\", RepPlateSourceName);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"DestinationForEB\", RepPlateName);\r\n\r\n                Serilog.Log.Information(\"3333 = {RepPlateSourceName}\", InstructionsForEcho);\r\n                Serilog.Log.Information(\"3333 = {RepPlateSourceName}\", RepPlateSourceName);\r\n                Serilog.Log.Information(\"3333 = {RepPlateSourceName}\", RepPlateName);\r\n\r\n                //     Serilog.Log.Information(\"looklook = {RepPlateSourceName}\", RepPlateSourceName);\r\n\r\n\r\n                Serilog.Log.Information(\"4444 = {RepPlateSourceName}\", RepPlateSourceName);\r\n                if (RepPlateSourceName != \"\")\r\n                {\r\n                    var e = destinations\r\n                    .Where(x => x.Name == RepPlateSourceName)\r\n                    .FirstOrDefault();\r\n\r\n                    string SourcePriority = e.Priority;\r\n                    //     Serilog.Log.Information(\"looklook2 = {SourcePriority}\", SourcePriority);\r\n\r\n                    switch (SourcePriority)\r\n                    {\r\n                        case \"High\":\r\n                            PriotiyNum = 1;\r\n                            break;\r\n                        case \"Medium\":\r\n                            PriotiyNum = 2;\r\n                            break;\r\n                        case \"Low\":\r\n                            PriotiyNum = 3;\r\n                            break;\r\n                    }\r\n\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"JobPriorityNumber\", PriotiyNum);\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "Process_State_Machine_EB",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\nusing System.IO;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_State_Machine_EB\r\n    {\r\n\r\n\r\n\r\n        enum Priority\r\n        {\r\n            High,\r\n            Medium,\r\n            Low\r\n        }\r\n\r\n        // Define a class to represent a job\r\n        class Job\r\n        {\r\n            public string Name { get; set; }\r\n            public Priority JobPriority { get; set; }\r\n\r\n            public Job(string name, Priority priority)\r\n            {\r\n                Name = name;\r\n                JobPriority = priority;\r\n            }\r\n        }\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string ReadyJobs = context.GetGlobalVariableValue<string>(\"Input.All Ready Jobs\");\r\n            string CPRacksToProcess = context.GetGlobalVariableValue<string>(\"Input.IOC Processed Racks\");\r\n\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n            List<string> highPriorityJobs = new List<string>();\r\n            List<string> mediumPriorityJobs = new List<string>();\r\n            List<string> lowPriorityJobs = new List<string>();\r\n\r\n            List<string> sortedJobs = new List<string>();\r\n\r\n            foreach (var job in jobs)\r\n            {\r\n                string JobPriority = job.Priority;\r\n                string JobNumber = job.JobId.ToString();\r\n                Serilog.Log.Information(\"JobNumber= {JobNumber}\", JobNumber.ToString());\r\n\r\n                switch (JobPriority)\r\n                {\r\n                    case \"High\":\r\n                        highPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                    case \"Medium\":\r\n                        mediumPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                    case \"Low\":\r\n                        lowPriorityJobs.Add(JobNumber);\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            // Combine the lists in the desired order\r\n            sortedJobs.AddRange(highPriorityJobs);\r\n            sortedJobs.AddRange(mediumPriorityJobs);\r\n            sortedJobs.AddRange(lowPriorityJobs);\r\n\r\n            string PrioritisedJobs = string.Join(\",\", sortedJobs);\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Prioritised Jobs\", PrioritisedJobs);\r\n\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "Process_EB_Sorted_Jobs",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\nusing System.IO;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Process_EB_Sorted_Jobs\r\n    {\r\n\r\n\r\n\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string PrioritisedJobs = context.GetGlobalVariableValue<string>(\"Prioritised Jobs\");\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string FirstReplicationBarcodes = context.GetGlobalVariableValue<string>(\"RepOnePlaceholderBarcodes\");\r\n            string SecondReplicationBarcodes = context.GetGlobalVariableValue<string>(\"RepTwoPlaceholderBarcodes\");\r\n            Serilog.Log.Information(\"FirstReplicationBarcodes= {FirstReplicationBarcodes}\", FirstReplicationBarcodes.ToString());\r\n\r\n            //instantiate LAMA1 objects\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n            //instantiate LAMA1 objects\r\n\r\n\r\n            List<string> JobReplicationOneBarcodes = new List<string>();\r\n            List<string> JobReplicationTwoBarcodes = new List<string>();\r\n\r\n\r\n            List<string> PrioritisedJobsList = PrioritisedJobs.Split(',').ToList();\r\n\r\n            // Get highest priority job\r\n            string PrioritisedJobId = PrioritisedJobsList[0];\r\n\r\n            Serilog.Log.Information(\"job= {job}\", PrioritisedJobId.ToString());\r\n\r\n            //Retrienve job name and identifier from Identities dataset\r\n            var i = jobs\r\n            .Where(x => x.Properties.GetValue<string>(\"JobId\") == PrioritisedJobId)\r\n            .FirstOrDefault();\r\n\r\n\r\n\r\n\r\n            string JobName = i.Name;\r\n            string JobIdentifier = i.Identifier;\r\n            int CurrentJobId = i.JobId;\r\n            string Priority = i.Priority;\r\n            string JobFragment = i.WorkflowFragment;\r\n\r\n            //Retrieve destination details from identities dataset\r\n            var a = destinations\r\n            .Where(a => a.Properties.GetValue<string>(\"JobId\") == PrioritisedJobId)\r\n            .FirstOrDefault();\r\n\r\n            string AssayLabwareType = a.CommonName;\r\n\r\n\r\n\r\n            int PriorityId = 0;\r\n\r\n            switch (Priority)\r\n            {\r\n                case \"High\":\r\n                    PriorityId = 1;\r\n                    break;\r\n                case \"Medium\":\r\n                    PriorityId = 2;\r\n                    break;\r\n                case \"Low\":\r\n                    PriorityId = 3;\r\n                    break;\r\n            }\r\n\r\n            Serilog.Log.Information(\"JobName= {JobName}\", JobName.ToString());\r\n            Serilog.Log.Information(\"JobIdentifier= {JobIdentifier}\", JobIdentifier.ToString());\r\n            Serilog.Log.Information(\"Priority= {Priority}\", PriorityId.ToString());\r\n\r\n            if (JobFragment.Contains(\"Replicate\"))\r\n            {\r\n                Serilog.Log.Information(\"JobFragment= Replicate\");\r\n                await context.AddOrUpdateGlobalVariableAsync(\"Job Fragment\", \"Replicate\");\r\n            }\r\n            else\r\n            {\r\n                Serilog.Log.Information(\"JobFragment= CherryPick\");\r\n                await context.AddOrUpdateGlobalVariableAsync(\"Job Fragment\", \"Cherry Pick\");\r\n            }\r\n\r\n\r\n            foreach (var dest in destinations)\r\n            {\r\n                string currentDestName = dest.Name;\r\n                int currentDestJob = dest.JobId;\r\n\r\n                if (FirstReplicationBarcodes.Contains(currentDestName) && (!JobReplicationOneBarcodes.Contains(currentDestName)) && (currentDestJob==CurrentJobId))\r\n                    {\r\n                Serilog.Log.Information(\"found a dest= {currentDestName}\", currentDestName.ToString());\r\n                    JobReplicationOneBarcodes.Add(currentDestName);\r\n\r\n                    }\r\n            }\r\n            string AllBarcodesRequiredForReplicteOne = String.Join(\", \", JobReplicationOneBarcodes);\r\n\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"ReplicateOneBarcodes\", AllBarcodesRequiredForReplicteOne); \r\n            await context.AddOrUpdateGlobalVariableAsync(\"Job Number\", Int32.Parse(PrioritisedJobId));\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Job Priority\", PriorityId.ToString());\r\n\r\n\r\n            string result = string.Join(\",\", PrioritisedJobs.Split(',').Where(s => s != PrioritisedJobId));\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Prioritised Jobs\", result);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "RequiredVelocityTips",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class RequiredVelocityTips\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            int VelocityThresholdVolume = context.GetGlobalVariableValue<int>(\"VelocityThresholdVolume\");\r\n\r\n\r\n            int TotalCP = 0;\r\n            int TotalEcho = 0;\r\n            double EchoVolume = 0;\r\n            int TotalBravo = 0;\r\n            double BravoVolume = 0;\r\n\r\n            int EchoST10Total = 0;\r\n            int EchoST30Total = 0;\r\n            int BravoST10Total = 0;\r\n            int BravoST30Total = 0;\r\n\r\n            int V10WorkflowStepsTotal = 0;\r\n            int V30WorkflowStepsTotal = 0;\r\n\r\n\r\n            string VelocityTips10PlaceholderBarcodes = \"\";\r\n            string VelocityTips30PlaceholderBarcodes = \"\";\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            var i = jobs\r\n            .Where(x => x.JobId == 525255)\r\n            .FirstOrDefault();\r\n\r\n\r\n            int TotalReplicates = 0;\r\n            int TotalSerialise = 0;\r\n            double DestSampleTransfers = 0.0;\r\n            string DestSibling = \"\";\r\n            List<string> AllDestSiblings = new List<string>();\r\n\r\n\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationOperation = dest.OperationType.ToString();\r\n\r\n\r\n                if (DestinationOperation == \"Replicate\")\r\n                {\r\n                    DestSampleTransfers = double.Parse(dest.SampleTransfers);\r\n                    DestSibling = dest.SiblingIdentifier.ToString();\r\n\r\n                    if ((DestSampleTransfers >= 0.5) && (!AllDestSiblings.Contains(DestSibling)))\r\n                    {\r\n                        AllDestSiblings.Add(DestSibling);\r\n                        TotalReplicates++;\r\n                        \r\n                    }\r\n                }\r\n                else if (DestinationOperation == \"Serialise\")\r\n                {\r\n                    TotalSerialise++;\r\n                }\r\n\r\n            }\r\n\r\n\r\n            if (TotalSerialise > 1)\r\n            {\r\n                TotalSerialise = TotalSerialise + 1;\r\n            }\r\n\r\n            if (DestSampleTransfers < VelocityThresholdVolume)\r\n            {\r\n                TotalReplicates = TotalReplicates + TotalSerialise;\r\n                for (int b = 1; b <= (TotalReplicates); b++)\r\n                {\r\n                    VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes + \"Velocity10_\" + b + \",\";\r\n                }\r\n            }\r\n            else if (DestSampleTransfers >= VelocityThresholdVolume)\r\n            {\r\n                TotalReplicates = TotalReplicates + TotalSerialise;\r\n                for (int b = 1; b <= (TotalReplicates); b++)\r\n                {\r\n                    VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes + \"Velocity30_\" + b + \",\";\r\n                }\r\n            }\r\n\r\n            VelocityTips10PlaceholderBarcodes = VelocityTips10PlaceholderBarcodes.TrimEnd(',');\r\n            VelocityTips30PlaceholderBarcodes = VelocityTips30PlaceholderBarcodes.TrimEnd(',');\r\n            string DS = String.Join(\", \", AllDestSiblings);\r\n\r\n            Serilog.Log.Information(\"VelocityTips10PlaceholderBarcodes = {VelocityTips10PlaceholderBarcodes}\", VelocityTips10PlaceholderBarcodes.ToString());\r\n            Serilog.Log.Information(\"DS = {DS}\", DS.ToString());\r\n\r\n            Serilog.Log.Information(\"VelocityTips30PlaceholderBarcodes = {VelocityTips30PlaceholderBarcodes}\", VelocityTips30PlaceholderBarcodes.ToString());\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"VelocityTips10PlaceholderBarcodes\", VelocityTips10PlaceholderBarcodes);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"VelocityTips30PlaceholderBarcodes\", VelocityTips30PlaceholderBarcodes);\r\n        }\r\n\r\n\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "CRASH_TEST",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\nusing System.Xml.Linq;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CRASH_TEST\r\n    {\r\n\r\n\r\n        static string ExtractNumber(string input)\r\n        {\r\n            // Initialize an empty result string\r\n            string result = string.Empty;\r\n\r\n            // Iterate through each character in the input string\r\n            foreach (char c in input)\r\n            {\r\n                // Check if the character is a digit or a decimal point\r\n                if (char.IsDigit(c) || c == '.')\r\n                {\r\n                    result += c;\r\n                }\r\n                else\r\n                {\r\n                    // Stop collecting characters once a non-numeric character is found\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Return the extracted number\r\n            return result;\r\n        }\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Racks Required\", false);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"IOC Crash Plates Required\", false);\r\n\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n\r\n            string ExtractedReplicationVolume = \"\";\r\n            string ExtractedNextReplicationVolume = \"\";\r\n            string NextReplicateLabware = \"\";\r\n            string FurtherReplicateLabware = \"\";\r\n\r\n\r\n\r\n            int EBSourcesCount = 0;\r\n            int RepOneCount = 0;\r\n            int RepTwoCount = 0;\r\n\r\n\r\n\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllCrashPlatesForEB = new List<string>();\r\n            List<string> AllCrashPlateIdentierssForEB = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicDestination? destination = destinations?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n                string DestinationId = dest.Identifier.ToString();\r\n                string DestinationSibling = dest.SiblingIdentifier.ToString();\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n\r\n\r\n\r\n\r\n                if ((DestinationOperationType == \"Replicate\") && (DestinationParent == null))\r\n                {\r\n                    var SiblingResult = sources\r\n                                .Where(x => x.Identifier == DestinationSibling)\r\n                                .FirstOrDefault();\r\n\r\n                    String crashName = SiblingResult.Name.ToString();\r\n                    String crashIdentifier = SiblingResult.Identifier.ToString();\r\n\r\n                    // if not member already - add to a list of all EB CP sources for the order\r\n                    if (!AllCrashPlatesForEB.Contains(crashName))\r\n                    {\r\n                        AllCrashPlatesForEB.Add(crashName);\r\n                        AllCrashPlateIdentierssForEB.Add(crashIdentifier);\r\n                    }\r\n\r\n\r\n                    string CrashNames = String.Join(\", \", AllCrashPlatesForEB);\r\n                    string CrashIDs = String.Join(\", \", AllCrashPlateIdentierssForEB);\r\n\r\n\r\n                    Serilog.Log.Information(\"CrashNames = {CrashNames}\", CrashNames);\r\n\r\n                    Serilog.Log.Information(\"CrashIDs = {CrashIDs}\", CrashIDs);\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "CP_Is_Only_A_CP_Job",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\nusing System.IO;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class CP_Is_Only_A_CP_Job\r\n    {  \r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string CurrentJobNumber = context.GetGlobalVariableValue<string>(\"Job Number\");\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n            //instantiate LAMA1 objects\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n\r\n            foreach (var dest in destinations)\r\n            {\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n\r\n\r\n                if ((DestinationParent == null) && (DestinationJobId == CurrentJobNumber) && (DestinationOperationType == \"CherryPick\"))\r\n                {\r\n\r\n\r\n                    Serilog.Log.Information(\"DestinationName= {DestinationName}\", DestinationName.ToString());\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "Check_All_Echo_Plates_Finished",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Check_All_Echo_Plates_Finished\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            int RequestedJob = context.GetGlobalVariableValue<int>(\"Job Number\");\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Echo Plates Not Finished\", true);\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n\r\n            string ExtractedReplicationVolume = \"\";\r\n            string ExtractedNextReplicationVolume = \"\";\r\n            string NextReplicateLabware = \"\";\r\n            string FurtherReplicateLabware = \"\";\r\n            string DestinationCommonName = \"\";\r\n            \r\n\r\n\r\n\r\n            int EBSourcesCount = 0;\r\n            int RepOneCount = 0;\r\n            int RepTwoCount = 0;\r\n\r\n\r\n            string JobWorkflowFragment = \"\";\r\n\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllCPSourcesForEB = new List<string>();\r\n            List<string> AllCPSourcesIdentifiersForEB = new List<string>();\r\n            List<string> AllSerializePlates = new List<string>();\r\n            List<string> AllReplicatePlates = new List<string>();\r\n            List<string> AllNextReplicatePlates = new List<string>();\r\n            List<string> AllCrashPlatesForEB = new List<string>();\r\n            List<string> AllCrashPlateIdentierssForEB = new List<string>();\r\n            List<string> AllCrashDestinationsEB = new List<string>();\r\n            List<string> EchoPairList = new List<string>();\r\n            List<string> EchoFinishedPlates = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the destinations associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  MosaicDestination? destination = destinations?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var dest in destinations)\r\n            {\r\n                bool echoSourceFound = false;\r\n                string DestinationName = dest.Name;\r\n                string DestinationDescription = dest.Description;\r\n                string DestinationSampleTransfers = dest.SampleTransfers;\r\n                string DestinationOperationType = dest.OperationType.ToString();\r\n                string DestinationJobId = dest.JobId.ToString();\r\n                string DestinationId = dest.Identifier.ToString();\r\n                string DestinationStatus = dest.Status.ToString();\r\n                string DestinationLabwareType = dest.CommonName.ToString();\r\n                string DestinationParent = dest.ParentIdentifier != null ? dest.ParentIdentifier.ToString() : null;\r\n                    Serilog.Log.Information(\"Plate found in dest  = {DestinationName}\", DestinationName.ToString());\r\n                    \r\n                    \r\n\t\t\t            foreach (var src in sources)\r\n\t\t\t            {\r\n\t\t\t              string sourceName = src.Name.ToString();\r\n\t\t\t              \r\n\t\t\t              if (DestinationName == sourceName)\r\n\t\t\t              {\r\n\t\t\t              echoSourceFound = true;\r\n\t\t\t              }\r\n\t\t\t            \r\n\t\t\t            }\r\n\t\t\t            \r\n\t\t\t            \r\n\r\n\r\n                if ((DestinationStatus != \"Finished\") &&  (DestinationOperationType == \"Replicate\") && (echoSourceFound==false))\r\n                {\r\n                    Serilog.Log.Information(\"Echo Plate Not Finished = {DestinationName}\", DestinationName.ToString());\r\n\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"Echo Plates Not Finished\", true);\r\n                }\r\n                else if ((DestinationStatus == \"Finished\") && (DestinationOperationType == \"Replicate\") && (echoSourceFound==false))\r\n                {\r\n                    Serilog.Log.Information(\"Echo Plate  Finished = {DestinationName}\", DestinationName.ToString());\r\n                    \r\n                     await context.AddOrUpdateGlobalVariableAsync(\"EchoDestLabwareType\", DestinationLabwareType);\r\n\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"Echo Plates Not Finished\", false);\r\n\r\n\r\n                    EchoFinishedPlates.Add(DestinationName);\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            string FinishedEchoPlates = string.Join(\",\", EchoFinishedPlates);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Finished Echo Plates\", FinishedEchoPlates);\r\n                    Serilog.Log.Information(\"FinishedEchoPlates= {FinishedEchoPlates}\", FinishedEchoPlates.ToString());\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "Check_All_Source_Echo_Plates_Finished",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Check_All_Source_Echo_Plates_Finished\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n            int RequestedJobNo = context.GetGlobalVariableValue<int>(\"Job Number\");\r\n\r\n\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Source Echo Plates Not Finished\", true);\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n\r\n\r\n\r\n\r\n\r\n            int EBSourcesCount = 0;\r\n            int RepOneCount = 0;\r\n            int RepTwoCount = 0;\r\n\r\n\r\n            string JobWorkflowFragment = \"\";\r\n            \r\n            \r\n\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            List<string> AllCPSourcesForEB = new List<string>();\r\n            List<string> AllCPSourcesIdentifiersForEB = new List<string>();\r\n            List<string> AllSerializePlates = new List<string>();\r\n            List<string> AllReplicatePlates = new List<string>();\r\n            List<string> AllNextReplicatePlates = new List<string>();\r\n            List<string> AllCrashPlatesForEB = new List<string>();\r\n            List<string> AllCrashPlateIdentierssForEB = new List<string>();\r\n            List<string> AllCrashsourcesEB = new List<string>();\r\n            List<string> EchoPairList = new List<string>();\r\n            List<string> EchoFinishedSourcePlates = new List<string>();\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n            //Get all the sources associated with this order\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            //Get all the sources associated with this order\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n            //Get all the jobs\r\n            var jobs = _identityHelper.GetJobs(RequestedOrder).ToList();\r\n\r\n\r\n            //  Mosaicsource? source = sources?.FirstOrDefault(d => d.Description == \"777\");\r\n            foreach (var src in sources)\r\n            {\r\n                bool echoSourceFound = false;\r\n                string sourceName = src.Name;\r\n                string sourceDescription = src.Description;\r\n                string sourceOperationType = src.OperationType.ToString();\r\n                string sourceJobId = src.JobId.ToString();\r\n                string sourceId = src.Identifier.ToString();\r\n                string sourceStatus = src.Status.ToString();\r\n                string sourceLabwareType = src.CommonName.ToString();\r\n                string sourceParent = src.ParentIdentifier != null ? src.ParentIdentifier.ToString() : null;\r\n                    \r\n                    \r\n\t\t\t            foreach (var src1 in sources)\r\n\t\t\t            {\r\n\t\t\t              string sourceName1 = src1.Name.ToString();\r\n\t\t\t              \r\n\t\t\t              if (sourceName1 == sourceName )\r\n\t\t\t              {\r\n\t\t\t              echoSourceFound = true;\r\n\t\t\t              }\r\n\t\t\t            \r\n\t\t\t            }\r\n\r\n          Serilog.Log.Information(\">>>>>\");\r\n          Serilog.Log.Information(\">>sourceName= {sourceName}\", sourceName.ToString());\r\n          Serilog.Log.Information(\">>sourceStatus = {sourceStatus}\", sourceStatus.ToString());\r\n          Serilog.Log.Information(\">>RequestedJobNo = {RequestedJobNo}\", RequestedJobNo.ToString());\r\n          Serilog.Log.Information(\">>sourceJobId = {sourceJobId}\", sourceJobId.ToString());\r\n          Serilog.Log.Information(\">>echoSourceFound  Finished = {echoSourceFound}\", echoSourceFound.ToString());\r\n          Serilog.Log.Information(\">>>>>\");\r\n\r\n\r\n                if ((sourceStatus != \"Finished\") && (echoSourceFound==true))\r\n                {\r\n                    Serilog.Log.Information(\">>Sources not finished yetd = {srcName}\", sourceName.ToString());\r\n\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"Source Echo Plates Not Finished\", true);\r\n                }\r\n                else if ((sourceStatus == \"Finished\") &&  (echoSourceFound==true))\r\n                {\r\n                    Serilog.Log.Information(\">>Sources  Finished = {srcName} for order {RequestedOrder} \", sourceName.ToString(), RequestedOrder.ToString());\r\n\r\n                    await context.AddOrUpdateGlobalVariableAsync(\"Source Echo Plates Not Finished\", false);\r\n\r\n\r\n                    EchoFinishedSourcePlates.Add(sourceName);\r\n                    \r\n          \t  await context.AddOrUpdateGlobalVariableAsync(\"EchoSourceLabwareType\", sourceLabwareType);\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n          \r\n            \r\n            \r\n            string  FinishedEchoSourcePlates = string.Join(\",\", EchoFinishedSourcePlates);\r\n            await context.AddOrUpdateGlobalVariableAsync(\"Finished Source Plates\", FinishedEchoSourcePlates);\r\n                    Serilog.Log.Information(\"FinishedEchoSourcePlates= {FinishedEchoSourcePlates}\", FinishedEchoSourcePlates.ToString());\r\n\r\n        }\r\n\r\n      \r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "FindDestAndInstructionsForEchoSource",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Resources;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Roche.LAMA1;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\nusing System;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class FindDestAndInstructionsForEchoSource\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n            string EBSources = context.GetGlobalVariableValue<string>(\"EBSourcesToBeTransferred\");\r\n\r\n\r\n            string SourceIndentityState = \"\";\r\n             string dstFinished  = \"\";\r\n             int JobPriorityNumber = 0;\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n\r\n            string SourcesToBeTransferred = context.GetGlobalVariableValue<string>(\"CPSourcesForEB\");\r\n            string SourceIdentifierssToBeTransferred = context.GetGlobalVariableValue<string>(\"CPSourcesIdentifiersForEB\");\r\n            \r\n            \r\n             List<string> AllParentIDs  = new List<string>();\r\n             List<string> EchoDestination  = new List<string>();\r\n             \r\n             List<object[]> transportList = new List<object[]();\r\n             \r\n            \r\n            \r\n                                            var FinishedPlates =_identityHelper.GetDestinations(RequestedOrder)\r\n                                .Where(x => x.Status == Status.Finished)\r\n                               .ToList();\r\n                               \r\n                       foreach (var dst in FinishedPlates)\r\n                       {\r\n                           dstFinished = dst.Name.ToString();\r\n                           dstJobId= dst.JobId;\r\n                           dstPriority = dst.Priority.ToString();\r\n                           \r\n                           \r\n\t\t                                   /*   foreach (var source in sources)\r\n\t\t\t\t\t\t\t            {\r\n\t\t\t\t\t\t\t                int SourceJobID = source.JobId; \r\n\t\t\t\t\t\t\t                string SourceOperation = source.OperationType.ToString();\r\n\t\t\t\t\t\t\t                string SourceIdentifier = source.Identifier.ToString();\r\n\t\t\t\t\t\t\t                string SourceName = source.Name.ToString();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t                if ((SourceOperation == \"Replicate\") && (SourceName==dstFinished))\r\n\t\t\t\t\t\t\t\t\t                {\r\n\t\t\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t\t\t                            Serilog.Log.Information(\"SourceIdentifier SourceIdentifier = {SourceIdentifier}\", SourceIdentifier);\r\n\t\t\t\t\t\t\t\t\t                            Serilog.Log.Information(\"SourceName SourceName = {SourceName}\", SourceName);\r\n\t\t\t\t\t\t\t\t\t                            \r\n\t\t\t\t\t\t\t\t\t                            \r\n\t\t\t\t\t\t\t\t\t                            var DestSibling =_identityHelper.GetDestinations(RequestedOrder)\r\n\t\t\t\t\t\t\t                                .Where(x => x.SiblingIdentifier == SourceIdentifier)\r\n\t\t\t\t\t\t\t                               .FirstOrDefault();\r\n\t\t\t\t\t\t\t                               \r\n\t\t\t\t\t\t\t                               string SiblingName = DestSibling.Name.ToString();\r\n\t\t\t\t\t\t\t                               int SiblingJob = DestSibling.JobId;\r\n\t\t\t\t\t\t\t                               string SiblingPriority = DestSibling.Priority.ToString();\r\n\t\t\t\t\t\t\t                               \r\n\t\t\t\t\t\t\t                               string RepEchoInstruction = SourceName + \"-\" + SiblingName;\r\n\t\t\t\t\t\t\t\t\t                           \r\n\t\t\t\t\t\t\t\t\t                   Serilog.Log.Information(\"RepEchoInstruction  = {RepEchoInstruction}\", RepEchoInstruction);\r\n\t\t\t\t\t\t\t\t\t                   AllParentIDs.Add(RepEchoInstruction);\r\n\t\t\t\t\t\t\t\t\t                   EchoDestination.Add(SiblingName);\r\n\t\t\t\t\t\t\t\t\t                   \r\n\t\t         \t\t\t\t\t\t\t\t //   {parentIds, destination, jobId, OrderId, Priority}\r\n\t\t\t\t\t\t\t\t\t                   \r\n\t\t\t\t\t                   \r\n\t\t\t\t\t\t\t        //        await context.AddOrUpdateGlobalVariableAsync(\"Job Number\", SiblingJob);\r\n\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t                switch (SiblingPriority)\r\n\t\t\t\t\t\t\t                {\r\n\t\t\t\t\t\t\t                \tcase \"High\";\r\n\t\t\t\t\t\t\t\t                \tJobPriorityNumber = 1;\r\n\t\t\t\t\t\t\t\t                \tbreak;\r\n\t\t\t\t\t\t\t                \tcase \"Medium\";\r\n\t\t\t\t\t\t\t\t                \tJobPriorityNumber = 2;\r\n\t\t\t\t\t\t\t\t                \tbreak;\r\n\t\t\t\t\t\t\t                \tcase \"Low\";\r\n\t\t\t\t\t\t\t\t                \tJobPriorityNumber = 3;\r\n\t\t\t\t\t\t\t\t                \tbreak;\r\n\t\t\t\t\t\t\t                \t\r\n\t\t\t\t\t\t\t                }\r\n\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t\t\t                   transportList.Add(new object[] { SourceName ,   SiblingName, SiblingJob,   RequestedOrder,  });\r\n\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t          //      await context.AddOrUpdateGlobalVariableAsync(\"JobPriorityNumber\", JobPriorityNumber);\r\n\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t                               \r\n\t\t\t\t\t\t\t                               \r\n\t\t\t\t\r\n\t\t\t\t                }*/\r\n\r\n            }\r\n                          \r\n                    \r\n                               \r\n                            Serilog.Log.Information(\"ParentID ParentID = {dstFinished}\", dstFinished);\r\n                        }\r\n                        \r\n              \r\n            \r\n                string InstructionsForEcho  = String.Join(\", \", AllParentIDs).Replace(\", \" , \",\");\r\n                string DestinationsForEcho  = String.Join(\", \", EchoDestination).Replace(\", \" , \",\");\r\n                \r\n                await context.AddOrUpdateGlobalVariableAsync(\"InstructionsForEcho\", InstructionsForEcho);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"DestinationsForEcho\", DestinationsForEcho);\r\n\t\t                   Serilog.Log.Information(\"InstructionsForEcho  = {InstructionsForEcho}\", InstructionsForEcho);\r\n\t\t                   Serilog.Log.Information(\"DestinationsForEcho  = {DestinationsForEcho}\", DestinationsForEcho);\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n}",
      "language": "C#"
    },
    {
      "name": "GetFirstPlateToBeSentToEB",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class GetFirstPlateToBeSentToEB\r\n    {\r\n\r\n\r\n\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string EBSourcesToBeTransferred = context.GetGlobalVariableValue<string>(\"EBSourcesToBeTransferred\");\r\n\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n\r\n\r\n\r\n            string[] EBEchoSourcesArray = EBSourcesToBeTransferred.Split(',');\r\n\r\n            // Convert the array to a List\r\n            List<string> EBEchoSourcesList = new List<string>(EBEchoSourcesArray);\r\n\r\n\r\n            List<string> HighListOfSources = new List<string>();\r\n            List<string> MediumListOfSources = new List<string>();\r\n            List<string> LowListOfSources = new List<string>();\r\n\r\n\r\n            List<string> ReorderedListOfSources = new List<string>();\r\n\r\n\r\n            foreach (string EBSource in EBEchoSourcesArray)\r\n\r\n            {\r\n                var a = sources\r\n                .Where(a => a.Name == EBSource)\r\n                .FirstOrDefault();\r\n\r\n                string SourceName = a.Name;\r\n                string SourcePriority = a.Priority;\r\n\r\n                if (SourcePriority == \"High\")\r\n                {\r\n                    HighListOfSources.Add(SourceName);\r\n                }\r\n                else if (SourcePriority == \"Medium\")\r\n                {\r\n                    MediumListOfSources.Add(SourceName);\r\n                }\r\n                else\r\n                {\r\n                    LowListOfSources.Add(SourceName);\r\n                }\r\n\r\n            }\r\n\r\n            ReorderedListOfSources.AddRange(HighListOfSources);\r\n            ReorderedListOfSources.AddRange(MediumListOfSources);\r\n            ReorderedListOfSources.AddRange(LowListOfSources);\r\n\r\n            // Use FirstOrDefault to get the first element or default value (null) if the list is empty\r\n\r\n            // Check if CurrentEchoPlate is null\r\n            string CurrentEchoPlate = ReorderedListOfSources.FirstOrDefault();\r\n\r\n\r\n            var dd = destinations\r\n            .Where(x => x.Name == CurrentEchoPlate)\r\n            .FirstOrDefault();\r\n\r\n\r\n\r\n            var cc = sources\r\n            .Where(x => x.Name == CurrentEchoPlate)\r\n            .FirstOrDefault();\r\n\r\n\r\n            string EchoPlateSourceStatus = cc.Status.ToString();\r\n            string EchoPlateDestinationStatus = dd.Status.ToString();\r\n            \r\n            \r\n                Serilog.Log.Information(\"-->>  {CurrentEchoPlate}\", CurrentEchoPlate.ToString());\r\n                Serilog.Log.Information(\"-->>  {EchoPlateSourceStatus}\", EchoPlateSourceStatus.ToString());\r\n                Serilog.Log.Information(\"-->>  {EchoPlateDestinationStatus}\", EchoPlateDestinationStatus.ToString());\r\n\r\n\r\n            if ((CurrentEchoPlate != null) && !((EchoPlateSourceStatus==\"Finished\") && (EchoPlateDestinationStatus == \"Finished\")))\r\n            {\r\n\r\n                string NewSourcesToBeSent = string.Join(\", \", ReorderedListOfSources);\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CurrentSourcePlate\", CurrentEchoPlate);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"EBSourcesToBeTransferred\", NewSourcesToBeSent);\r\n                Serilog.Log.Information(\"Current Echo Plate  {CurrentEchoPlate}\", CurrentEchoPlate.ToString());\r\n\r\n            }\r\n            else\r\n            {\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CurrentSourcePlate\", \"\");\r\n                await context.AddOrUpdateGlobalVariableAsync(\"EBSourcesToBeTransferred\", \"\");\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n        public List<Biosero.DataModels.Resources.Identity> GetPlatesWithNumberOfParents<T>(IdentityHelper _helper, QueryClient _queryClient, int nParents, string ownerId)\r\n        {\r\n            IEnumerable<DataModels.Resources.Identity> identities = typeof(T) switch\r\n            {\r\n                Type t when t == typeof(MosaicSource) => _helper.GetSources(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicDestination) => _helper.GetDestinations(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                Type t when t == typeof(MosaicJob) => _helper.GetJobs(ownerId).Select(od => od as Biosero.DataModels.Resources.Identity),\r\n                _ => throw new Exception(\"Type not supported\"),\r\n            };\r\n\r\n            //   Serilog.Log.Information($\"There are {orderIdents.Count} identities associated with owner ID {ownerId}\");\r\n            Dictionary<int, List<Biosero.DataModels.Resources.Identity>> identitiesWithNumberOfParents = new Dictionary<int, List<Biosero.DataModels.Resources.Identity>>();\r\n\r\n            int numberOfParentsCount;\r\n            string parent;\r\n            string Ident;\r\n\r\n            foreach (var identity in identities)\r\n            {\r\n                numberOfParentsCount = 0;\r\n                parent = identity.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                Ident = identity.Identifier;\r\n                //\tSerilog.Log.Information($\"Parent ID = {parent}\");\r\n                while (parent != string.Empty)\r\n                {                    //add null check here?\r\n                    Biosero.DataModels.Resources.Identity parentId = _queryClient.GetIdentity(parent);\r\n                    parent = parentId.Properties.GetOrDefaultValue(\"ParentIdentifier\", string.Empty);\r\n                    //Serilog.Log.Information($\"Parent ID = {parent}\");\r\n                    numberOfParentsCount += 1;\r\n                }\r\n\r\n                if (identitiesWithNumberOfParents.ContainsKey(numberOfParentsCount))\r\n                {\r\n                    identitiesWithNumberOfParents[numberOfParentsCount].Add(identity);\r\n                }\r\n\r\n                else\r\n                {\r\n                    identitiesWithNumberOfParents.Add(numberOfParentsCount, new List<Biosero.DataModels.Resources.Identity> { identity });\r\n                }\r\n            }\r\n            foreach (KeyValuePair<int, List<Biosero.DataModels.Resources.Identity>> kvp in identitiesWithNumberOfParents)\r\n            {\r\n                //   Serilog.Log.Information($\"There are {kvp.Value.Count} identities with  {kvp.Key} parents\");\r\n            }\r\n            if (identitiesWithNumberOfParents.ContainsKey(nParents))\r\n            {\r\n                return identitiesWithNumberOfParents[nParents];\r\n            }\r\n            else\r\n            {\r\n                return new List<Biosero.DataModels.Resources.Identity>();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    },
    {
      "name": "FindDetailsOfCurrentPlateForEB",
      "code": "#r Roche.LAMA1.dll\r\n\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Resources;\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Roche.LAMA1;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\nusing System;\r\n\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class FindDetailsOfCurrentPlateForEB\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n            string CurrentSource = context.GetGlobalVariableValue<string>(\"CurrentSourcePlate\");\r\n            await context.AddOrUpdateGlobalVariableAsync(\"HigherPriorityJob\", false);\r\n            \r\n                await context.AddOrUpdateGlobalVariableAsync(\"CurrentSourcePlate\", \"\");\r\n\r\n            Serilog.Log.Information(\"<<<<<<<<{CurrentSource}\", CurrentSource.ToString());\r\n            string CurrentSourcesOnEB = context.GetGlobalVariableValue<string>(\"CurrentSourcesOnEB\");\r\n            string SourceStatus = \"\";\r\n\r\n\r\n            string CurrentPriority = context.GetGlobalVariableValue<string>(\"CurrentEBPriority\").ToString();\r\n            Serilog.Log.Information(\"<<<<<<<<{CurrentPriority}\", CurrentPriority.ToString());\r\n            int CurrentJobPriorityNumber = 0;\r\n\r\n            if (CurrentPriority != \"\")\r\n            {\r\n                CurrentJobPriorityNumber = Int32.Parse(CurrentPriority);\r\n            }\r\n\r\n            int RequestedJob = context.GetGlobalVariableValue<int>(\"Job Number\");\r\n            int identityJobID = 0;\r\n\r\n            bool JobFoundOnEB = false;\r\n            bool HigherPriorityJob = false;\r\n\r\n\r\n            string SourceIndentityState = \"\";\r\n            string SourceIdentityPriority = \"\";\r\n\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n            var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n            var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n\r\n            Serilog.Log.Information(\"Section 1\");\r\n\r\n\r\n            // look for a destination with same barcode as the current source\r\n\r\n            var c = CurrentSource != null\r\n                ? destinations.Where(x => x.Name == CurrentSource).FirstOrDefault()\r\n                : null;\r\n\r\n\r\n            Serilog.Log.Information(\"Section 1a before\");\r\n            if (c != null)\r\n            {\r\n                //if one found\r\n                string DestName = c.Name;\r\n                string DestPriority = c.Priority;\r\n                int DestJob = c.JobId;\r\n                int DestPriorityNumber = 0;\r\n\r\n\r\n                Serilog.Log.Information(\"Section 1a\");\r\n                Serilog.Log.Information(\"Section 1a {DestName}\", DestName);\r\n                // get the priority for it\r\n                switch (DestPriority)\r\n                {\r\n                    case \"High\":\r\n                        DestPriorityNumber = 1;\r\n                        break;\r\n                    case \"Medium\":\r\n                        DestPriorityNumber = 2;\r\n                        break;\r\n                    case \"Low\":\r\n                        DestPriorityNumber = 3;\r\n                        break;\r\n                }\r\n\r\n                Serilog.Log.Information(\"Section 1b\");\r\n\r\n                Serilog.Log.Information(\"Section 2\");\r\n\r\n                await context.AddOrUpdateGlobalVariableAsync(\"JobPriorityNumber\", DestPriorityNumber);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"Job Number\", DestJob);\r\n\r\n                //get all sources currently on EB\r\n                string[] sourcesArray = CurrentSourcesOnEB.Split(',', ' ', StringSplitOptions.RemoveEmptyEntries);\r\n\r\n\r\n                Serilog.Log.Information(\"Section 3\");\r\n                Serilog.Log.Information(\"sourcesArray {sourcesArray}\", sourcesArray);\r\n\r\n                //loop through every source on EB\r\n                foreach (string src in sourcesArray)\r\n                {\r\n                    Serilog.Log.Information(\"DestName {DestName}\", DestName);\r\n                    Serilog.Log.Information(\"src {src}\", src);\r\n                    if (src == DestName)\r\n                    {\r\n                        Serilog.Log.Information(\"outside loop {src}\", src.ToString());\r\n\r\n                        var ee = sources\r\n                    .Where(x => x.Name == src)\r\n                    .First();\r\n                        //grt the status of the current source\r\n                         SourceStatus = ee.Status.ToString();\r\n\r\n                        Serilog.Log.Information(\"outside loop3 {SourceStatus}\", SourceStatus.ToString());\r\n\r\n                        //      if (SourceStatus == \"Pending\")\r\n                        //      {\r\n                        //          Serilog.Log.Information(\"outside loop {src}\", src.ToString());\r\n\r\n\r\n                        //           Serilog.Log.Information(\"Section 3a\");\r\n                        //           Serilog.Log.Information(\"{src}\", src.ToString());\r\n                        //            int JobPriorityNumber = 0;\r\n\r\n                        //             var d = destinations\r\n                        //           .Where(x => x.Name == src)\r\n                        //          .FirstOrDefault();\r\n\r\n                        //                   Serilog.Log.Information(\"Section 3b\");\r\n                        // Serilog.Log.Information(\"This plate is on EB currently {src}\", src);\r\n                        //                   Serilog.Log.Information(\"This status of plate currently  on EB currently {SourceStatus}\", SourceStatus);\r\n\r\n                        // if source found, set boolean for job found to true\r\n                        if ((src != \"\") && (SourceStatus == \"Pending\"))\r\n                        {\r\n                            Serilog.Log.Information(\"Section 4\");\r\n                            JobFoundOnEB = true;\r\n                            await context.AddOrUpdateGlobalVariableAsync(\"JobFoundOnEB\", JobFoundOnEB);\r\n                        }\r\n\r\n\r\n\r\n                        //      Serilog.Log.Information(\"DestName{DestName}\", DestName);\r\n                        //       Serilog.Log.Information(\"DestPriorityNumber{DestPriorityNumber}\", DestPriorityNumber);\r\n                        //       Serilog.Log.Information(\"CurrentJobPriorityNumber  {CurrentJobPriorityNumber}\", CurrentJobPriorityNumber);\r\n\r\n\r\n                    }\r\n                    \r\n                    \r\n                              Serilog.Log.Information(\"CurrentSource{CurrentSource}\", CurrentSource);\r\n\r\n                        var ee1 = sources\r\n                    .Where(x => x.Name == CurrentSource)\r\n                    .First();\r\n                        //grt the status of the current source\r\n                      string   SourceStatus1 = ee1.Status.ToString();\r\n                         \r\n                         \r\n\r\n\r\n\r\n                              Serilog.Log.Information(\"SourceStatus1{SourceStatus1}\", SourceStatus1);\r\n                              Serilog.Log.Information(\"DestPriorityNumber{DestPriorityNumber}\", DestPriorityNumber);\r\n                              Serilog.Log.Information(\"CurrentJobPriorityNumber{CurrentJobPriorityNumber}\", CurrentJobPriorityNumber);\r\n\r\n                    if ((DestPriorityNumber <CurrentJobPriorityNumber)&& (SourceStatus1 == \"Pending\"))\r\n                    {\r\n                        Serilog.Log.Information(\"Section 5\");\r\n                        HigherPriorityJob = true;\r\n                        await context.AddOrUpdateGlobalVariableAsync(\"HigherPriorityJob\", HigherPriorityJob);\r\n                await context.AddOrUpdateGlobalVariableAsync(\"CurrentSourcePlate\", DestName);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n}\r\n",
      "language": "C#"
    },
    {
      "name": "Check_Finished_Plates_In_EB",
      "code": "#r Roche.LAMA1.dll\r\n\r\n\r\n/*\r\nScript written by Ronen Peleg (ronenpeleg@biosero.com)\r\n\r\nDescription:\r\nInitial script to determine the type of order jobs required to be processed and their contents.\r\nThe script also populates various required variables in dataservices in down the line processes\r\n*/\r\n\r\n\r\n\r\n\r\nusing Biosero.DataServices.Client;\r\nusing Biosero.Orchestrator.WorkflowService;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Linq;\r\nusing Roche.LAMA1;\r\nusing Roche.LAMA1.Models;\r\nusing Roche.LAMA1.MosaicTypes;\r\nusing Biosero.DataServices.RestClient;\r\nusing Biosero.DataModels.Events;\r\nusing Biosero.DataModels.Ordering;\r\nusing Biosero.DataModels.Clients;\r\nusing Biosero.DataModels.Resources;\r\nusing System.Security.Cryptography;\r\nusing System.Collections;\r\n\r\n\r\nnamespace Biosero.Scripting\r\n{\r\n    public class Check_Finished_Plates_In_EB\r\n    {\r\n        public async Task RunAsync(DataServicesClient client, WorkflowContext context, CancellationToken cancellationToken)\r\n        {\r\n\r\n            // Boolean variable determining if the first workflow should process Racks or Crash plates. Both set to FALSE initially.\r\n            // it is not expected for a job to have bothrequired\r\n            await context.AddOrUpdateGlobalVariableAsync(\"EB Plates Ready\", false);\r\n\r\n\r\n            // Retrieve order ID ran\r\n            string RequestedOrder = context.GetGlobalVariableValue<string>(\"Input.OrderId\");\r\n\r\n            bool AreBothEqual = false;\r\n            int CompletedPlates = 0;\r\n\r\n\r\n\r\n            // connnect to the DS server, declare query, assecssioning and event clients for the URL\r\n            string API_BASE_URL = \"http://192.168.14.10:8105/api/v2.0/\";\r\n            IQueryClient _queryClient = new QueryClient(API_BASE_URL);\r\n            IAccessioningClient _accessioningClient = new AccessioningClient(API_BASE_URL);\r\n            IEventClient _eventClient = new EventClient(API_BASE_URL);\r\n\r\n            IdentityHelper _identityHelper;\r\n\r\n            //Build out and register the root identities (i.e Mosaic Job) if they do not exist\r\n            _identityHelper = new IdentityHelper(_queryClient, _accessioningClient, _eventClient);\r\n            _identityHelper.BuildBaseIdentities();\r\n\r\n\r\n\r\n\r\n            var orders = await client.GetExecutingOrdersAsync();\r\n\r\n            orders = orders.ToArray();\r\n\r\n            foreach (var order in orders)\r\n            {\r\n                //Get all the destinations associated with this order\r\n                var destinations = _identityHelper.GetDestinations(RequestedOrder).ToList();\r\n                var sources = _identityHelper.GetSources(RequestedOrder).ToList();\r\n\r\n\r\n                foreach (var dest in destinations)\r\n                {\r\n                    string DestName = dest.Name;\r\n                    string DestStatus = dest.Status.ToString();\r\n                    \r\n\r\n                    var cc = sources\r\n                    .Where(x => x.Name == DestName)\r\n                    .FirstOrDefault();\r\n\r\n                    \r\n\t\t\t if (cc != null)\r\n\t\t\t{\r\n\t\t\t    string RelatedSourceStatus = cc.Status.ToString();\r\n\r\n\r\n\t                    if ((DestStatus == \"Finished\") && (RelatedSourceStatus != \"Pending\"))\r\n\t                    {\r\n\t\r\n\t                        await context.AddOrUpdateGlobalVariableAsync(\"EB Plates Ready\", true);\r\n\t                    }\r\n\t\t\t}\r\n\r\n                }\r\n\r\n\r\n                foreach (var source in sources)\r\n                {\r\n                    string SrcName = source.Name;\r\n                    string SrcStatus = source.Status.ToString();\r\n\r\n                    if (SrcStatus == \"Finished\")\r\n                    {\r\n\r\n                        await context.AddOrUpdateGlobalVariableAsync(\"EB Plates Ready\", true);\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n",
      "language": "C#"
    }
  ],
  "globalScriptReferences": [
    "Biosero.Workflow.Core.dll",
    "Biosero.DataModels.dll"
  ],
  "screens": [],
  "deviceRequirements": [],
  "iconUrl": "PackIcon.AirballoonOutline [#FFFFFF:0:0]",
  "color": "#FFFF00E7",
  "name": "State Machine EB - TryScripts",
  "category": "Workflows",
  "lastModified": "0001-01-01T00:00:00+00:00",
  "parameterReferenceIndicator": "%"
}